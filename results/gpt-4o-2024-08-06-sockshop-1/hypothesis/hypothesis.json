{
    "steady_states": {
        "elems": [
            {
                "id": 0,
                "name": "carts-db-replicas",
                "description": "The first issue to address is 'Missing Resource Requests' in the 'carts-db' deployment. This is a critical issue because without resource requests, the pods may not get scheduled if the cluster is under resource pressure, leading to potential downtime. The 'carts-db' deployment is part of the database layer, which is crucial for the application's functionality. Ensuring that the 'carts-db' pods are running is essential for the system's steady state. Therefore, a steady state should be defined to ensure that the 'carts-db' deployment maintains its desired number of replicas, which is 2, to verify that the system can handle resource pressure without downtime.",
                "inspection": {
                    "tool_type": "k8s",
                    "duration": "5s",
                    "script": {
                        "path": "sandbox/cycle_20241127_024431/hypothesis/k8s_carts-db-replicas.py",
                        "content": "import os\nimport time\nfrom kubernetes import client, config\n\ndef check_carts_db_replicas(duration):\n    # Load Kubernetes configuration based on the environment\n    if os.getenv('KUBERNETES_SERVICE_HOST'):\n        config.load_incluster_config()\n    else:\n        config.load_kube_config()\n\n    v1 = client.AppsV1Api()\n    namespace = 'sock-shop'\n    deployment_name = 'carts-db'\n\n    for _ in range(duration):\n        try:\n            deployment = v1.read_namespaced_deployment(deployment_name, namespace)\n            replicas = deployment.status.replicas\n            ready_replicas = deployment.status.ready_replicas\n            print(f\"Desired replicas: {replicas}, Ready replicas: {ready_replicas}\")\n        except client.exceptions.ApiException as e:\n            print(f\"Exception when calling AppsV1Api->read_namespaced_deployment: {e}\")\n        time.sleep(1)\n\nif __name__ == '__main__':\n    import argparse\n    parser = argparse.ArgumentParser(description='Check carts-db replicas')\n    parser.add_argument('--duration', type=int, default=5, help='Duration to check the replicas')\n    args = parser.parse_args()\n    check_carts_db_replicas(args.duration)\n",
                        "work_dir": "sandbox/cycle_20241127_024431/hypothesis",
                        "fname": "k8s_carts-db-replicas.py"
                    },
                    "result": "Desired replicas: 2, Ready replicas: 2\nDesired replicas: 2, Ready replicas: 2\nDesired replicas: 2, Ready replicas: 2\nDesired replicas: 2, Ready replicas: 2\nDesired replicas: 2, Ready replicas: 2\n"
                },
                "threshold": {
                    "threshold": "At least 2 ready replicas for 'carts-db' must be maintained 95% of the time within a 1-minute monitoring period.",
                    "reason": "The steady state in question is the number of replicas for the 'carts-db' deployment. The current state shows that both the desired and ready replicas are consistently at 2, which is the expected number of replicas as per the deployment configuration. To ensure the system remains in a steady state, we need to define a threshold that accounts for potential fluctuations while still maintaining the necessary redundancy for reliability. Given that the system is expected to handle resource pressure without downtime, the threshold should ensure that at least 2 replicas are ready at any given time. However, to account for transient states during scaling or updates, a reasonable tolerance can be applied. Therefore, the threshold can be set such that at least 2 replicas are ready 95% of the time during the monitoring period, which is 1 minute as per the chaos engineering experiment constraints."
                },
                "unittest": {
                    "path": "sandbox/cycle_20241127_024431/hypothesis/unittest_carts-db-replicas_mod0.py",
                    "content": "import os\nimport time\nimport argparse\nfrom kubernetes import client, config\nfrom unittest_base import K8sAPIBase\n\nclass TestCartsDBReplicas(K8sAPIBase):\n    def __init__(self, duration):\n        super().__init__()\n        self.duration = duration\n\n    def test_carts_db_replicas(self):\n        namespace = 'sock-shop'\n        deployment_name = 'carts-db'\n        v1 = client.AppsV1Api()\n\n        # Initialize counters\n        total_checks = 0\n        successful_checks = 0\n\n        # Check the deployment status for the specified duration\n        for _ in range(self.duration):\n            try:\n                deployment = v1.read_namespaced_deployment(deployment_name, namespace)\n                ready_replicas = deployment.status.ready_replicas or 0\n                print(f\"Ready replicas: {ready_replicas}\")\n\n                # Increment total checks\n                total_checks += 1\n\n                # Check if the ready replicas meet the threshold\n                if ready_replicas >= 2:\n                    successful_checks += 1\n\n            except client.exceptions.ApiException as e:\n                print(f\"Exception when calling AppsV1Api->read_namespaced_deployment: {e}\")\n\n            time.sleep(1)\n\n        # Calculate the percentage of successful checks\n        success_rate = (successful_checks / total_checks) * 100\n        print(f\"Success rate: {success_rate}%\")\n\n        # Assert that the success rate meets the 95% threshold\n        assert success_rate >= 95, f\"Threshold not met: {success_rate}% < 95%\"\n\n\ndef main():\n    parser = argparse.ArgumentParser(description='Test carts-db replicas')\n    parser.add_argument('--duration', type=int, default=60, help='Duration to check the replicas')\n    args = parser.parse_args()\n\n    # Create an instance of the test class with the specified duration\n    test = TestCartsDBReplicas(args.duration)\n    test.test_carts_db_replicas()\n\n\nif __name__ == '__main__':\n    main()",
                    "work_dir": "sandbox/cycle_20241127_024431/hypothesis",
                    "fname": "unittest_carts-db-replicas_mod0.py"
                }
            },
            {
                "id": 1,
                "name": "front-end-replicas",
                "description": "The next issue to address is 'Single Replica Deployment' in the 'front-end' deployment. This is a critical issue because having only one replica can lead to downtime if the pod fails. The front-end is a crucial component as it serves as the entry point for users interacting with the application. Ensuring that the front-end is always available is essential for the system's steady state. Therefore, a steady state should be defined to ensure that the 'front-end' deployment maintains its desired number of replicas, which is 1, to verify that the system can handle failures without downtime.",
                "inspection": {
                    "tool_type": "k8s",
                    "duration": "5s",
                    "script": {
                        "path": "sandbox/cycle_20241127_024431/hypothesis/k8s_front-end-replicas.py",
                        "content": "import os\nimport time\nfrom kubernetes import client, config\n\ndef check_front_end_replicas(namespace, deployment_name, duration):\n    # Load Kubernetes configuration based on the environment\n    if os.getenv('KUBERNETES_SERVICE_HOST'):\n        config.load_incluster_config()\n    else:\n        config.load_kube_config()\n\n    v1 = client.AppsV1Api()\n    for _ in range(duration):\n        try:\n            deployment = v1.read_namespaced_deployment(deployment_name, namespace)\n            replicas = deployment.status.replicas\n            ready_replicas = deployment.status.ready_replicas\n            print(f\"Desired replicas: {replicas}, Ready replicas: {ready_replicas}\")\n        except client.exceptions.ApiException as e:\n            print(f\"Exception when calling AppsV1Api->read_namespaced_deployment: {e}\")\n        time.sleep(1)\n\nif __name__ == \"__main__\":\n    import argparse\n    parser = argparse.ArgumentParser(description='Check front-end replicas')\n    parser.add_argument('--duration', type=int, default=5, help='Duration to check the replicas')\n    args = parser.parse_args()\n    check_front_end_replicas('sock-shop', 'front-end', args.duration)",
                        "work_dir": "sandbox/cycle_20241127_024431/hypothesis",
                        "fname": "k8s_front-end-replicas.py"
                    },
                    "result": "Desired replicas: 1, Ready replicas: 1\nDesired replicas: 1, Ready replicas: 1\nDesired replicas: 1, Ready replicas: 1\nDesired replicas: 1, Ready replicas: 1\nDesired replicas: 1, Ready replicas: 1\n"
                },
                "threshold": {
                    "threshold": "At least 1 ready replica for the 'front-end' deployment must be maintained 100% of the time during the 1-minute monitoring period.",
                    "reason": "The steady state in question is the number of replicas for the 'front-end' deployment. The current state shows that the desired replicas are 1 and the ready replicas are also 1, which means the system is currently in a stable state. However, having only one replica is a potential risk for downtime if the pod fails. To ensure the system remains stable and can handle failures without downtime, the threshold should be set to ensure that at least 1 replica is always ready. Given the constraints of the chaos engineering experiment, which must be completed within 1 minute, and the fact that the current state is stable with 1 ready replica, the threshold should be set to ensure that the 'front-end' deployment maintains at least 1 ready replica 100% of the time during the monitoring period. This threshold accounts for the current state and ensures that the system remains stable under normal conditions."
                },
                "unittest": {
                    "path": "sandbox/cycle_20241127_024431/hypothesis/unittest_front-end-replicas_mod1.py",
                    "content": "import os\nimport time\nimport argparse\nfrom kubernetes import client, config\nfrom unittest_base import K8sAPIBase\n\nclass TestFrontEndReplicas(K8sAPIBase):\n    def __init__(self, namespace, deployment_name, duration):\n        super().__init__()\n        self.namespace = namespace\n        self.deployment_name = deployment_name\n        self.duration = duration\n        # Use AppsV1Api for deployment operations\n        self.apps_v1 = client.AppsV1Api()\n\n    def test_steady_state(self):\n        # Initialize variables to track the number of successful checks\n        successful_checks = 0\n\n        # Loop for the specified duration\n        for _ in range(self.duration):\n            try:\n                # Read the deployment status\n                deployment = self.apps_v1.read_namespaced_deployment(self.deployment_name, self.namespace)\n                ready_replicas = deployment.status.ready_replicas or 0\n\n                # Check if the number of ready replicas is at least 1\n                if ready_replicas >= 1:\n                    successful_checks += 1\n\n            except client.exceptions.ApiException as e:\n                print(f\"Exception when calling AppsV1Api->read_namespaced_deployment: {e}\")\n\n            # Wait for 1 second before the next check\n            time.sleep(1)\n\n        # Calculate the success ratio\n        success_ratio = successful_checks / self.duration\n\n        # Assert that the success ratio is 100%\n        assert success_ratio == 1.0, f\"Steady state not maintained: {success_ratio * 100}% of the time\"\n\n        # Print success message\n        print(\"Steady state maintained 100% of the time\")\n\n\ndef main():\n    parser = argparse.ArgumentParser(description='Test front-end replicas steady state')\n    parser.add_argument('--duration', type=int, default=60, help='Duration to check the replicas')\n    args = parser.parse_args()\n\n    # Create an instance of the test class\n    test = TestFrontEndReplicas('sock-shop', 'front-end', args.duration)\n\n    # Run the test\n    test.test_steady_state()\n\n\nif __name__ == '__main__':\n    main()\n",
                    "work_dir": "sandbox/cycle_20241127_024431/hypothesis",
                    "fname": "unittest_front-end-replicas_mod1.py"
                }
            }
        ]
    },
    "fault": {
        "event": "Black Friday Sale",
        "faults": [
            [
                {
                    "name": "StressChaos",
                    "name_id": 0,
                    "params": {
                        "mode": "all",
                        "selector": {
                            "namespaces": [
                                "sock-shop"
                            ],
                            "labelSelectors": {
                                "name": "carts-db"
                            }
                        },
                        "stressors": {
                            "cpu": {
                                "workers": 2,
                                "load": 100
                            },
                            "memory": {
                                "workers": 2,
                                "size": "256MB"
                            }
                        },
                        "containerNames": [
                            "carts-db"
                        ]
                    }
                }
            ],
            [
                {
                    "name": "PodChaos",
                    "name_id": 1,
                    "params": {
                        "action": "pod-kill",
                        "mode": "one",
                        "selector": {
                            "namespaces": [
                                "sock-shop"
                            ],
                            "labelSelectors": {
                                "name": "front-end"
                            }
                        }
                    }
                }
            ]
        ],
        "description": "During a Black Friday sale, the system is expected to handle a significant increase in traffic and load. This event will test the system's ability to maintain steady states under high demand. The primary weaknesses identified are missing resource requests for critical database components and a single replica for the front-end service. These weaknesses could lead to resource contention and downtime, respectively. To simulate the Black Friday event, we will first inject a StressChaos to simulate high CPU and memory usage on the 'carts-db' deployment, which lacks resource requests. This will test if the system can maintain the 'carts-db-replicas' steady state under resource pressure. Next, we will inject a PodChaos to kill the single replica of the 'front-end' deployment to test if the system can maintain the 'front-end-replicas' steady state and recover quickly. This sequence simulates the phenomena of high demand and potential failures during a Black Friday sale, targeting the system's identified weaknesses."
    }
}