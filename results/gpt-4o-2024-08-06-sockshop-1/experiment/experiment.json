{
    "plan": {
        "time_schedule": {
            "thought": "The chaos engineering experiment is designed to test the system's resilience under simulated fault conditions, specifically during a high-demand event like a Black Friday sale. The experiment is divided into three phases: pre-validation, fault-injection, and post-validation. Given the constraints that the entire experiment must be completed within 1 minute, we need to allocate time efficiently across these phases. \n\n1. **Pre-validation Phase**: This phase ensures that the system is in a steady state before any faults are injected. We will allocate 15 seconds for this phase. During this time, we will verify that the 'carts-db' deployment maintains at least 2 ready replicas 95% of the time and that the 'front-end' deployment maintains at least 1 ready replica 100% of the time. This is crucial to establish a baseline for the system's normal operation.\n\n2. **Fault-injection Phase**: This phase involves injecting faults to simulate the Black Friday event. We will allocate 30 seconds for this phase. The faults include a StressChaos on the 'carts-db' deployment to simulate high CPU and memory usage, and a PodChaos to kill the single replica of the 'front-end' deployment. This phase is critical to observe how the system behaves under stress and failure conditions.\n\n3. **Post-validation Phase**: This phase checks if the system returns to its steady state after the faults are removed. We will allocate 15 seconds for this phase. Similar to the pre-validation phase, we will verify the steady states of the 'carts-db' and 'front-end' deployments to ensure that the system can recover and maintain its expected performance.\n\nThe total time for the experiment is 60 seconds, with 15 seconds for pre-validation, 30 seconds for fault injection, and 15 seconds for post-validation. This allocation allows us to thoroughly test the system's resilience while adhering to the time constraint.",
            "total_time": "60s",
            "pre_validation_time": "15s",
            "fault_injection_time": "30s",
            "post_validation_time": "15s"
        },
        "pre_validation": {
            "thought": "In the pre-validation phase, we need to ensure that the system is in a steady state before we proceed with fault injection. Given the constraints of a 15-second total time for this phase, we will focus on verifying the two defined steady states: 'carts-db-replicas' and 'front-end-replicas'. These checks will be executed sequentially due to the short time frame, ensuring that each steady state is verified independently. The 'carts-db-replicas' steady state will be checked first, as it involves verifying that at least 2 replicas are ready 95% of the time within a 1-minute monitoring period. However, for the pre-validation phase, we will adjust the check to fit within the 15-second window, ensuring that the system is stable at the start of the experiment. Following this, we will verify the 'front-end-replicas' steady state, ensuring that at least 1 replica is ready 100% of the time during the 15-second pre-validation period. This approach ensures that both critical components are functioning as expected before introducing any faults.",
            "unit_tests": [
                {
                    "name": "carts-db-replicas",
                    "grace_period": "0s",
                    "duration": "7s",
                    "workflow_name": "pre-unittest-carts-db-replicas",
                    "deadline": "5m7s",
                    "file_path": "sandbox/cycle_20241127_024431/hypothesis/unittest_carts-db-replicas_mod0.py"
                },
                {
                    "name": "front-end-replicas",
                    "grace_period": "7s",
                    "duration": "8s",
                    "workflow_name": "pre-unittest-front-end-replicas",
                    "deadline": "5m8s",
                    "file_path": "sandbox/cycle_20241127_024431/hypothesis/unittest_front-end-replicas_mod1.py"
                }
            ]
        },
        "fault_injection": {
            "thought": "The fault-injection phase is designed to simulate a Black Friday sale scenario, which involves high demand and potential failures. The goal is to test the system's ability to maintain its steady states under these conditions. Given the constraints of a 30-second total time for this phase, we need to carefully schedule the fault injections to maximize the observation of system behavior while ensuring that the faults are impactful.\n\nFirst, we will inject a `StressChaos` fault targeting the `carts-db` deployment. This fault will simulate high CPU and memory usage, testing the system's ability to maintain the `carts-db-replicas` steady state under resource pressure. This fault will be injected at the start of the phase (grace period of 0s) and will last for 15 seconds. This duration is chosen to allow enough time for the system to react to the stress while leaving time for the next fault.\n\nNext, we will inject a `PodChaos` fault targeting the `front-end` deployment. This fault will kill the single replica of the `front-end` service, testing the system's ability to maintain the `front-end-replicas` steady state and recover quickly. This fault will be injected with a grace period of 15 seconds, starting immediately after the `StressChaos` fault ends, and will last for 15 seconds. This staggered approach ensures that each fault is isolated in time, allowing us to observe the system's response to each fault individually.\n\nThe unit tests for verifying the steady states will run concurrently with the fault injections. The `carts-db-replicas` unit test will start at the beginning of the phase and run for the entire 30 seconds, as it needs to monitor the system's ability to maintain the required number of replicas under stress. Similarly, the `front-end-replicas` unit test will also run for the entire 30 seconds, ensuring that the system can maintain at least one ready replica of the `front-end` service despite the pod-kill fault.",
            "fault_injection": [
                {
                    "name": "StressChaos",
                    "name_id": 0,
                    "grace_period": "0s",
                    "duration": "15s",
                    "workflow_name": "fault-stresschaos",
                    "deadline": "15s",
                    "params": {
                        "mode": "all",
                        "selector": {
                            "namespaces": [
                                "sock-shop"
                            ],
                            "labelSelectors": {
                                "name": "carts-db"
                            }
                        },
                        "stressors": {
                            "cpu": {
                                "workers": 2,
                                "load": 100
                            },
                            "memory": {
                                "workers": 2,
                                "size": "256MB"
                            }
                        },
                        "containerNames": [
                            "carts-db"
                        ]
                    }
                },
                {
                    "name": "PodChaos",
                    "name_id": 1,
                    "grace_period": "15s",
                    "duration": "15s",
                    "workflow_name": "fault-podchaos",
                    "deadline": "15s",
                    "params": {
                        "action": "pod-kill",
                        "mode": "one",
                        "selector": {
                            "namespaces": [
                                "sock-shop"
                            ],
                            "labelSelectors": {
                                "name": "front-end"
                            }
                        }
                    }
                }
            ],
            "unit_tests": [
                {
                    "name": "carts-db-replicas",
                    "grace_period": "0s",
                    "duration": "30s",
                    "workflow_name": "fault-unittest-carts-db-replicas",
                    "deadline": "5m30s",
                    "file_path": "sandbox/cycle_20241127_024431/hypothesis/unittest_carts-db-replicas_mod0.py"
                },
                {
                    "name": "front-end-replicas",
                    "grace_period": "0s",
                    "duration": "30s",
                    "workflow_name": "fault-unittest-front-end-replicas",
                    "deadline": "5m30s",
                    "file_path": "sandbox/cycle_20241127_024431/hypothesis/unittest_front-end-replicas_mod1.py"
                }
            ]
        },
        "post_validation": {
            "thought": "In the post-validation phase, we need to ensure that the system has returned to its steady states after the fault injection. Given the constraints of a 15-second total time for this phase, we will focus on quickly verifying the two steady states: 'carts-db-replicas' and 'front-end-replicas'. The approach is to run the unit tests for each steady state sequentially, as the time constraint does not allow for simultaneous execution. Each unit test will have a short grace period to allow the system to stabilize after the fault injection, followed by a brief duration to verify the steady state. The thought process is to prioritize the verification of the critical components affected by the fault injection, ensuring that the system can recover and maintain its expected behavior.",
            "unit_tests": [
                {
                    "name": "carts-db-replicas",
                    "grace_period": "0s",
                    "duration": "7s",
                    "workflow_name": "post-unittest-carts-db-replicas",
                    "deadline": "5m7s",
                    "file_path": "sandbox/cycle_20241127_024431/hypothesis/unittest_carts-db-replicas_mod0.py"
                },
                {
                    "name": "front-end-replicas",
                    "grace_period": "7s",
                    "duration": "8s",
                    "workflow_name": "post-unittest-front-end-replicas",
                    "deadline": "5m8s",
                    "file_path": "sandbox/cycle_20241127_024431/hypothesis/unittest_front-end-replicas_mod1.py"
                }
            ]
        },
        "summary": "The chaos engineering experiment is structured into three phases: pre-validation, fault-injection, and post-validation, all to be completed within a total of 60 seconds. \n\nIn the pre-validation phase, which lasts for 15 seconds, the system's steady state is verified before any faults are introduced. The verification of the 'carts-db-replicas' steady state is conducted first, with no waiting time before it starts, and it runs for 7 seconds. This is followed by the verification of the 'front-end-replicas' steady state, which begins immediately after the first verification ends, with a duration of 8 seconds. This sequential execution ensures that each component is independently verified for stability.\n\nThe fault-injection phase spans 30 seconds and is designed to simulate high-demand conditions. It begins with the injection of a 'StressChaos' fault on the 'carts-db' deployment, which starts immediately and lasts for 15 seconds. Following this, a 'PodChaos' fault is injected on the 'front-end' deployment, starting at the 15-second mark and also lasting for 15 seconds. Concurrently, unit tests for both 'carts-db-replicas' and 'front-end-replicas' run for the entire 30 seconds, starting at the beginning of the phase, to monitor the system's ability to maintain steady states under stress.\n\nIn the post-validation phase, which also lasts 15 seconds, the system's recovery to steady states is verified. The 'carts-db-replicas' steady state is checked first, starting immediately and running for 7 seconds. This is followed by the 'front-end-replicas' steady state verification, which begins at the 7-second mark and lasts for 8 seconds. This sequential approach ensures that the system's recovery is thoroughly validated after the fault conditions are removed."
    },
    "workflow_name": "chaos-experiment-20241127-025024",
    "workflow": {
        "path": "sandbox/cycle_20241127_024431/experiment/workflow.yaml",
        "content": "apiVersion: chaos-mesh.org/v1alpha1\nkind: Workflow\nmetadata:\n  name: chaos-experiment-20241127-025024\nspec:\n  entry: the-entry\n  templates:\n    #-------------------------------\n    # entry point of whole workflow\n    #-------------------------------\n    - name: the-entry\n      templateType: Serial\n      deadline: 31m\n      children:\n        - pre-validation-phase\n        - fault-injection-phase\n        - post-validation-phase\n\n    #-------------------------------------\n    # Entry point of pre-validation-phase\n    #-------------------------------------\n    - name: pre-validation-phase\n      templateType: Serial\n      deadline: 10m15s\n      children:\n        - pre-validation-overlapped-workflows\n    \n    - name: pre-validation-suspend-workflow\n      templateType: Serial\n      deadline: 5m15s\n      children:\n        - pre-validation-suspend\n        - pre-unittest-front-end-replicas\n\n    - name: pre-validation-suspend\n      templateType: Suspend\n      deadline: 7s\n\n    - name: pre-validation-overlapped-workflows\n      templateType: Parallel\n      deadline: 5m15s\n      children:\n        - pre-unittest-carts-db-replicas\n        - pre-validation-suspend-workflow\n\n    # Definitions of children of pre-validation-phase\n    - name: pre-unittest-carts-db-replicas\n      templateType: Task\n      deadline: 5m7s\n      task:\n        container:\n          name: pre-unittest-carts-db-replicas-container\n          image: chaos-eater/k8sapi:1.0\n          imagePullPolicy: IfNotPresent\n          command: [\"/bin/bash\", \"-c\"]\n          args: [\"python /chaos-eater/sandbox/cycle_20241127_024431/hypothesis/unittest_carts-db-replicas_mod0.py --duration 7\"]\n          volumeMounts:\n            - name: pvc-volume\n              mountPath: /chaos-eater\n        volumes:\n          - name: pvc-volume\n            persistentVolumeClaim:\n              claimName: pvc\n\n    - name: pre-unittest-front-end-replicas\n      templateType: Task\n      deadline: 5m8s\n      task:\n        container:\n          name: pre-unittest-front-end-replicas-container\n          image: chaos-eater/k8sapi:1.0\n          imagePullPolicy: IfNotPresent\n          command: [\"/bin/bash\", \"-c\"]\n          args: [\"python /chaos-eater/sandbox/cycle_20241127_024431/hypothesis/unittest_front-end-replicas_mod1.py --duration 8\"]\n          volumeMounts:\n            - name: pvc-volume\n              mountPath: /chaos-eater\n        volumes:\n          - name: pvc-volume\n            persistentVolumeClaim:\n              claimName: pvc\n    \n    #--------------------------------------\n    # Entry point of fault-injection-phase\n    #--------------------------------------\n    - name: fault-injection-phase\n      templateType: Serial\n      deadline: 10m30s\n      children:\n        - fault-injection-overlapped-workflows\n\n    - name: fault-injection-parallel-workflow\n      templateType: Parallel\n      deadline: 5m30s\n      children:\n        - fault-unittest-carts-db-replicas\n        - fault-unittest-front-end-replicas\n        - fault-stresschaos\n\n    - name: fault-injection-suspend-workflow\n      templateType: Serial\n      deadline: 30s\n      children:\n        - fault-injection-suspend\n        - fault-podchaos\n\n    - name: fault-injection-suspend\n      templateType: Suspend\n      deadline: 15s\n\n    - name: fault-injection-overlapped-workflows\n      templateType: Parallel\n      deadline: 5m30s\n      children:\n        - fault-injection-parallel-workflow\n        - fault-injection-suspend-workflow\n\n    # Definitions of children of pre-validation-phase\n    # unit tests\n    - name: fault-unittest-carts-db-replicas\n      templateType: Task\n      deadline: 5m30s\n      task:\n        container:\n          name: fault-unittest-carts-db-replicas-container\n          image: chaos-eater/k8sapi:1.0\n          imagePullPolicy: IfNotPresent\n          command: [\"/bin/bash\", \"-c\"]\n          args: [\"python /chaos-eater/sandbox/cycle_20241127_024431/hypothesis/unittest_carts-db-replicas_mod0.py --duration 30\"]\n          volumeMounts:\n            - name: pvc-volume\n              mountPath: /chaos-eater\n        volumes:\n          - name: pvc-volume\n            persistentVolumeClaim:\n              claimName: pvc\n\n    - name: fault-unittest-front-end-replicas\n      templateType: Task\n      deadline: 5m30s\n      task:\n        container:\n          name: fault-unittest-front-end-replicas-container\n          image: chaos-eater/k8sapi:1.0\n          imagePullPolicy: IfNotPresent\n          command: [\"/bin/bash\", \"-c\"]\n          args: [\"python /chaos-eater/sandbox/cycle_20241127_024431/hypothesis/unittest_front-end-replicas_mod1.py --duration 30\"]\n          volumeMounts:\n            - name: pvc-volume\n              mountPath: /chaos-eater\n        volumes:\n          - name: pvc-volume\n            persistentVolumeClaim:\n              claimName: pvc\n\n    # fault_injections\n    - name: fault-stresschaos\n      templateType: StressChaos\n      deadline: 15s\n      stressChaos:\n        containerNames:\n          - carts-db\n        mode: all\n        selector:\n          labelSelectors:\n            name: carts-db\n          namespaces:\n            - sock-shop\n        stressors:\n          cpu:\n            load: 100\n            workers: 2\n          memory:\n            size: 256MB\n            workers: 2\n\n\n    - name: fault-podchaos\n      templateType: PodChaos\n      deadline: 15s\n      podChaos:\n        action: pod-kill\n        mode: one\n        selector:\n          labelSelectors:\n            name: front-end\n          namespaces:\n            - sock-shop\n\n    \n    #--------------------------------------\n    # Entry point of post-validation phase\n    #--------------------------------------\n    - name: post-validation-phase\n      templateType: Serial\n      deadline: 10m15s\n      children:\n        - post-validation-overlapped-workflows\n\n    - name: post-validation-suspend-workflow\n      templateType: Serial\n      deadline: 5m15s\n      children:\n        - post-validation-suspend\n        - post-unittest-front-end-replicas\n\n    - name: post-validation-suspend\n      templateType: Suspend\n      deadline: 7s\n\n    - name: post-validation-overlapped-workflows\n      templateType: Parallel\n      deadline: 5m15s\n      children:\n        - post-unittest-carts-db-replicas\n        - post-validation-suspend-workflow\n\n    # Definitions of children of pre-validation-phase\n    - name: post-unittest-carts-db-replicas\n      templateType: Task\n      deadline: 5m7s\n      task:\n        container:\n          name: post-unittest-carts-db-replicas-container\n          image: chaos-eater/k8sapi:1.0\n          imagePullPolicy: IfNotPresent\n          command: [\"/bin/bash\", \"-c\"]\n          args: [\"python /chaos-eater/sandbox/cycle_20241127_024431/hypothesis/unittest_carts-db-replicas_mod0.py --duration 7\"]\n          volumeMounts:\n            - name: pvc-volume\n              mountPath: /chaos-eater\n        volumes:\n          - name: pvc-volume\n            persistentVolumeClaim:\n              claimName: pvc\n\n    - name: post-unittest-front-end-replicas\n      templateType: Task\n      deadline: 5m8s\n      task:\n        container:\n          name: post-unittest-front-end-replicas-container\n          image: chaos-eater/k8sapi:1.0\n          imagePullPolicy: IfNotPresent\n          command: [\"/bin/bash\", \"-c\"]\n          args: [\"python /chaos-eater/sandbox/cycle_20241127_024431/hypothesis/unittest_front-end-replicas_mod1.py --duration 8\"]\n          volumeMounts:\n            - name: pvc-volume\n              mountPath: /chaos-eater\n        volumes:\n          - name: pvc-volume\n            persistentVolumeClaim:\n              claimName: pvc",
        "work_dir": "sandbox/cycle_20241127_024431/experiment",
        "fname": "workflow.yaml"
    }
}