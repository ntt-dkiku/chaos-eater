The Chaos Engineering cycle involves a structured approach to testing the resilience of a Kubernetes-based system, specifically focusing on an Nginx web server setup. The cycle begins with understanding the user inputs, which include Kubernetes manifests for a Pod and a Service. The Pod manifest defines a single Nginx container with a 'Never' restart policy, while the Service manifest exposes this Pod on port 80. Identified weaknesses include the Pod's restart policy and the lack of redundancy due to a single Pod deployment.

The hypothesis for the experiment is that the system should maintain its steady states even when faults are injected. Two steady states are defined: the Pod should be running at least 90% of the time, and the Service should have an HTTP request success rate of at least 99%. These are tested using Python scripts and K6 JavaScript, respectively.

The fault scenario simulates a cyber attack using Chaos Mesh, injecting 'PodChaos' to kill the Pod and 'NetworkChaos' to introduce network latency. The experiment is divided into three phases: pre-validation, fault-injection, and post-validation, all within a 1-minute timeframe. Pre-validation ensures the system is stable, fault-injection tests resilience under attack, and post-validation checks recovery.

Initially, the experiment fails due to the Pod not restarting after being killed and the Service becoming unavailable. Analysis reveals the need for a Deployment to manage multiple Pod replicas, providing redundancy and automatic recovery. After modifying the Pod manifest to a Deployment with three replicas, the experiment is rerun successfully, with all unit tests passing, confirming the system's improved resilience.