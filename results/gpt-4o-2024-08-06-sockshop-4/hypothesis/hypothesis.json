{
    "steady_states": {
        "elems": [
            {
                "id": 0,
                "name": "carts-db-pod-count",
                "description": "The first issue to address is the 'Missing Resource Requests' in the 'carts-db' Deployment. This is a critical issue because without resource requests, the pods may not get scheduled if the cluster is under resource pressure, leading to potential downtime. To verify the steady state, we can measure the number of 'carts-db' pods running, ensuring it matches the expected replica count of 2. This will help us understand if the pods are being scheduled correctly despite the missing resource requests.",
                "inspection": {
                    "tool_type": "k8s",
                    "duration": "5s",
                    "script": {
                        "path": "sandbox/cycle_20241127_041819/hypothesis/k8s_carts-db-pod-count.py",
                        "content": "import os\nimport time\nfrom kubernetes import client, config\n\n# Load Kubernetes configuration based on the environment\nif os.getenv('KUBERNETES_SERVICE_HOST'):\n    config.load_incluster_config()\nelse:\n    config.load_kube_config()\n\nv1 = client.AppsV1Api()\n\ndef check_carts_db_pod_count(namespace, expected_count):\n    pod_count = 0\n    try:\n        resp = v1.read_namespaced_deployment(name='carts-db', namespace=namespace)\n        pod_count = resp.status.replicas\n    except client.exceptions.ApiException as e:\n        print(f\"Exception when calling AppsV1Api->read_namespaced_deployment: {e}\")\n    return pod_count\n\ndef main(duration):\n    namespace = 'sock-shop'\n    expected_count = 2\n    for _ in range(duration):\n        pod_count = check_carts_db_pod_count(namespace, expected_count)\n        print(f\"Current 'carts-db' pod count: {pod_count}\")\n        if pod_count == expected_count:\n            print(\"Pod count matches expected count.\")\n        else:\n            print(\"Pod count does not match expected count.\")\n        time.sleep(1)\n\nif __name__ == '__main__':\n    import argparse\n    parser = argparse.ArgumentParser(description='Check carts-db pod count.')\n    parser.add_argument('--duration', type=int, default=5, help='Duration to check the pod count in seconds')\n    args = parser.parse_args()\n    main(args.duration)\n",
                        "work_dir": "sandbox/cycle_20241127_041819/hypothesis",
                        "fname": "k8s_carts-db-pod-count.py"
                    },
                    "result": "Current 'carts-db' pod count: 2\nPod count matches expected count.\nCurrent 'carts-db' pod count: 2\nPod count matches expected count.\nCurrent 'carts-db' pod count: 2\nPod count matches expected count.\nCurrent 'carts-db' pod count: 2\nPod count matches expected count.\nCurrent 'carts-db' pod count: 2\nPod count matches expected count.\n"
                },
                "threshold": {
                    "threshold": "At least 2 'carts-db' pods must be running 95% of the time within a 1-minute monitoring period.",
                    "reason": "The steady state we are examining is the number of 'carts-db' pods running, which should match the expected replica count of 2. The current state shows that the pod count consistently matches the expected count of 2 over multiple checks. Given that the system is expected to maintain 2 replicas, the threshold should ensure that at least 2 pods are running to maintain redundancy and availability. To account for potential fluctuations, such as during pod restarts or updates, a reasonable tolerance can be applied. For example, allowing a brief period where the pod count might drop to 1, but it should recover quickly. Therefore, the threshold can be defined as maintaining at least 2 'carts-db' pods running 95% of the time within a 1-minute monitoring period. This allows for brief fluctuations while ensuring the system remains stable and available."
                },
                "unittest": {
                    "path": "sandbox/cycle_20241127_041819/hypothesis/unittest_carts-db-pod-count_mod0.py",
                    "content": "import os\nimport time\nimport argparse\nfrom kubernetes import client, config\nfrom unittest_base import K8sAPIBase\n\nclass TestCartsDBPodCount(K8sAPIBase):\n    def __init__(self):\n        super().__init__()\n        self.v1_apps = client.AppsV1Api()\n\n    def check_carts_db_pod_count(self, namespace, expected_count):\n        pod_count = 0\n        try:\n            resp = self.v1_apps.read_namespaced_deployment(name='carts-db', namespace=namespace)\n            pod_count = resp.status.replicas\n        except client.exceptions.ApiException as e:\n            print(f\"Exception when calling AppsV1Api->read_namespaced_deployment: {e}\")\n        return pod_count\n\n    def test_steady_state(self, duration):\n        namespace = 'sock-shop'\n        expected_count = 2\n        successful_checks = 0\n\n        for _ in range(duration):\n            pod_count = self.check_carts_db_pod_count(namespace, expected_count)\n            print(f\"Current 'carts-db' pod count: {pod_count}\")\n            if pod_count == expected_count:\n                successful_checks += 1\n            time.sleep(1)\n\n        # Calculate the percentage of successful checks\n        success_percentage = (successful_checks / duration) * 100\n        print(f\"Success percentage: {success_percentage}%\")\n\n        # Assert that the success percentage is at least 95%\n        assert success_percentage >= 95, f\"Pod count was not stable enough: {success_percentage}% < 95%\"\n\n\ndef main():\n    parser = argparse.ArgumentParser(description='Test carts-db pod count steady state.')\n    parser.add_argument('--duration', type=int, default=60, help='Duration to check the pod count in seconds')\n    args = parser.parse_args()\n\n    test = TestCartsDBPodCount()\n    test.test_steady_state(args.duration)\n\n\nif __name__ == '__main__':\n    main()\n",
                    "work_dir": "sandbox/cycle_20241127_041819/hypothesis",
                    "fname": "unittest_carts-db-pod-count_mod0.py"
                }
            },
            {
                "id": 1,
                "name": "front-end-pod-count",
                "description": "The next issue to address is the 'Single Replica Deployment' in the 'front-end' Deployment. This is a critical issue because having only one replica can lead to downtime if the pod fails. To verify the steady state, we can measure the number of 'front-end' pods running, ensuring it matches the expected replica count of 1. This will help us understand if the pod is being scheduled correctly and remains available despite being a single replica. Monitoring the pod count will allow us to verify the system's resilience to potential failures.",
                "inspection": {
                    "tool_type": "k8s",
                    "duration": "5s",
                    "script": {
                        "path": "sandbox/cycle_20241127_041819/hypothesis/k8s_front-end-pod-count.py",
                        "content": "import os\nimport time\nimport argparse\nfrom kubernetes import client, config\n\ndef check_front_end_pod_count(namespace, duration):\n    # Load Kubernetes configuration based on the environment\n    if os.getenv('KUBERNETES_SERVICE_HOST'):\n        config.load_incluster_config()\n    else:\n        config.load_kube_config()\n\n    v1 = client.CoreV1Api()\n    pod_label_selector = 'name=front-end'\n\n    for _ in range(duration):\n        pods = v1.list_namespaced_pod(namespace=namespace, label_selector=pod_label_selector)\n        pod_count = len(pods.items)\n        print(f'Current front-end pod count: {pod_count}')\n        time.sleep(1)\n\n    print('Finished checking front-end pod count.')\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Check front-end pod count in the sock-shop namespace.')\n    parser.add_argument('--duration', type=int, default=5, help='Duration to check the pod count in seconds.')\n    args = parser.parse_args()\n\n    check_front_end_pod_count(namespace='sock-shop', duration=args.duration)\n",
                        "work_dir": "sandbox/cycle_20241127_041819/hypothesis",
                        "fname": "k8s_front-end-pod-count.py"
                    },
                    "result": "Current front-end pod count: 1\nCurrent front-end pod count: 1\nCurrent front-end pod count: 1\nCurrent front-end pod count: 1\nCurrent front-end pod count: 1\nFinished checking front-end pod count.\n"
                },
                "threshold": {
                    "threshold": "At least 1 front-end pod must be running 95% of the time during a 1-minute monitoring period.",
                    "reason": "The current state of the system shows that the front-end pod count is consistently at 1, which matches the expected replica count as per the deployment configuration. Given that the system is currently stable with a single replica, the threshold should ensure that at least 1 front-end pod is running at all times. However, to account for potential fluctuations or brief disruptions, a reasonable tolerance should be included. Since the experiment must be completed within 1 minute, we can set a threshold that allows for a brief period where the pod count might temporarily drop below 1, but it should recover quickly. Therefore, the threshold can be defined as having at least 1 front-end pod running 95% of the time during the 1-minute monitoring period. This allows for a brief 3-second window where the pod count might be 0, but it should not persist beyond that."
                },
                "unittest": {
                    "path": "sandbox/cycle_20241127_041819/hypothesis/unittest_front-end-pod-count_mod0.py",
                    "content": "import os\nimport time\nimport argparse\nfrom kubernetes import client, config\nfrom unittest_base import K8sAPIBase\n\nclass TestFrontEndPodCount(K8sAPIBase):\n    def __init__(self, namespace, duration):\n        super().__init__()\n        self.namespace = namespace\n        self.duration = duration\n\n    def test_front_end_pod_count(self):\n        pod_label_selector = 'name=front-end'\n        successful_checks = 0\n\n        # Check the pod count every second for the specified duration\n        for _ in range(self.duration):\n            pods = self.v1.list_namespaced_pod(namespace=self.namespace, label_selector=pod_label_selector)\n            pod_count = len(pods.items)\n            print(f'Current front-end pod count: {pod_count}')\n\n            # Increment successful checks if pod count is 1 or more\n            if pod_count >= 1:\n                successful_checks += 1\n\n            time.sleep(1)\n\n        # Calculate the percentage of successful checks\n        success_rate = (successful_checks / self.duration) * 100\n        print(f'Success rate: {success_rate}%')\n\n        # Assert that the success rate meets the 95% threshold\n        assert success_rate >= 95, f\"Front-end pod count did not meet the 95% threshold. Success rate: {success_rate}%\"\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Test front-end pod count in the sock-shop namespace.')\n    parser.add_argument('--duration', type=int, default=60, help='Duration to check the pod count in seconds.')\n    args = parser.parse_args()\n\n    test = TestFrontEndPodCount(namespace='sock-shop', duration=args.duration)\n    test.test_front_end_pod_count()",
                    "work_dir": "sandbox/cycle_20241127_041819/hypothesis",
                    "fname": "unittest_front-end-pod-count_mod0.py"
                }
            }
        ]
    },
    "fault": {
        "event": "Black Friday Sale",
        "faults": [
            [
                {
                    "name": "StressChaos",
                    "name_id": 0,
                    "params": {
                        "mode": "all",
                        "selector": {
                            "namespaces": [
                                "sock-shop"
                            ],
                            "labelSelectors": {
                                "name": "carts-db"
                            }
                        },
                        "stressors": {
                            "cpu": {
                                "workers": 2,
                                "load": 100
                            },
                            "memory": {
                                "workers": 2,
                                "size": "256MB"
                            }
                        },
                        "containerNames": [
                            "carts-db"
                        ]
                    }
                }
            ],
            [
                {
                    "name": "PodChaos",
                    "name_id": 1,
                    "params": {
                        "action": "pod-kill",
                        "mode": "one",
                        "selector": {
                            "namespaces": [
                                "sock-shop"
                            ],
                            "labelSelectors": {
                                "name": "front-end"
                            }
                        }
                    }
                }
            ],
            [
                {
                    "name": "NetworkChaos",
                    "name_id": 2,
                    "params": {
                        "action": "delay",
                        "mode": "all",
                        "selector": {
                            "namespaces": [
                                "sock-shop"
                            ],
                            "labelSelectors": {
                                "name": "front-end"
                            }
                        },
                        "direction": "to",
                        "device": "eth0",
                        "delay": {
                            "latency": "100ms",
                            "jitter": "10ms",
                            "correlation": "50"
                        }
                    }
                }
            ]
        ],
        "description": "During a Black Friday sale, the system is expected to handle a significant increase in traffic and load. This event will test the system's ability to maintain steady states under high demand. The system's weaknesses, such as missing resource requests and single replica deployments, can lead to potential downtime or degraded performance. To simulate this event, we will inject faults that target these weaknesses. First, we will use StressChaos to simulate high CPU and memory usage on the 'carts-db' pods, which lack resource requests, to see if they can maintain the required pod count. Next, we will use PodChaos to kill the single replica 'front-end' pod to test its resilience and recovery. Finally, we will introduce NetworkChaos to simulate network latency on the 'front-end' service, which will test the system's ability to handle network issues during high traffic. This sequence of fault injections will simulate the phenomena of a Black Friday sale, where high load, potential failures, and network issues are common."
    }
}