[
    {
        "name": "fault_scenario_assumption",
        "token_usage": {
            "input_tokens": 13627,
            "output_tokens": 319,
            "total_tokens": 13946
        },
        "message_history": [
            [
                "System: You are a helpful AI assistant for Chaos Engineering. \nGiven k8s manifests for a system, the steady states of the system, and user's instructions for Chaos Engineering, you will define the most impactful fault injections to reveal potential weaknesses of the system, such as insufficient recovery functions, resource allocation, redundancy, etc.\nAlways keep the following rules:\n- First, assume a real-world event that may be most impactful in the the system, such as promotion campaign, cyber attacks, disasters, etc.\n- Then, define the most impactful fault injections to reveal potential weaknesses of the given system while simulating the assumed real-world event.\n- Prioritize fault injections that target the system's weak resources related to the steady states to verify whether those resources can handle the faults and the steady states can be maintained.\n- The injected faults should be selected from the following fault types of Chaos Mesh:\n- PodChaos: simulates Pod failures, such as Pod node restart, Pod's persistent unavailablility, and certain container failures in a specific Pod. The supported subtypes include 'pod-kill', 'container-kill'.\n- NetworkChaos: simulates network failures, such as network latency, packet loss, packet disorder, and network partitions.\n- DNSChaos: simulates DNS failures, such as the parsing failure of DNS domain name and the wrong IP address returned.\n- HTTPChaos: simulates HTTP communication failures, such as HTTP communication latency.\n- StressChaos: simulates CPU race or memory race.\n- IOChaos: simulates the I/O failure of an application file, such as I/O delays, read and write failures.\n- TimeChaos: simulates the time jump exception.\n\n- The output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {\"properties\": {\"foo\": {\"title\": \"Foo\", \"description\": \"a list of strings\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"foo\"]}\nthe object {\"foo\": [\"bar\", \"baz\"]} is a well-formatted instance of the schema. The object {\"properties\": {\"foo\": [\"bar\", \"baz\"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{\"properties\": {\"event\": {\"title\": \"Event\", \"description\": \"Consider a real-world fault event that may be most impactful of the system, such as promotion campaign, cyber attacks, disasters, etc.\", \"type\": \"string\"}, \"thought\": {\"title\": \"Thought\", \"description\": \"Write down your thought process to define a sequence of fault injections that exploit the system's weaknesses of while simulating the fault event: 1) how the system's weaknesses affect the steady state; 2) how each fault injection exploit the system's weaknesses; 3) how the sequence simulates the phenamena in the fault event (consider carefully the sequence order). Prioritize fault injections that directly attack the weaknessses of the system, such as insufficient recovery functions, resource allocation, redundancy, etc.\", \"type\": \"string\"}, \"faults\": {\"title\": \"Faults\", \"description\": \"Define a sequence of fault injections that exploit the system's vulnerabilities to the fullest according to the above thoughts. In the inner list, a set of simultaneously injected faults are listed, while in the outer list, the sets are listed in the injection order. For example, [[fault_a], [fault_b, fault_c]] indicates that fault_a is injected, then fault_b and fault_c are injected simultaneously.\", \"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": {\"$ref\": \"#/definitions/Fault\"}}}}, \"required\": [\"event\", \"thought\", \"faults\"], \"definitions\": {\"Fault\": {\"title\": \"Fault\", \"type\": \"object\", \"properties\": {\"name\": {\"title\": \"Name\", \"description\": \"Select a fault type from [\\\"PodChaos\\\", \\\"NetworkChaos\\\", \\\"DNSChaos\\\", \\\"HTTPChaos\\\", \\\"StressChaos\\\", \\\"IOChaos\\\", \\\"TimeChaos\\\"]\", \"enum\": [\"PodChaos\", \"NetworkChaos\", \"DNSChaos\", \"HTTPChaos\", \"StressChaos\", \"IOChaos\", \"TimeChaos\"], \"type\": \"string\"}, \"name_id\": {\"title\": \"Name Id\", \"description\": \"An identifier to prevent name conflicts when the same Fault appears. Assign numbers starting from 0 in sequential order to prevent name conflicts.\", \"type\": \"integer\"}, \"scope\": {\"title\": \"Scope\", \"description\": \"Specify only the fault injection scope (i.e., the target resource where the fault is injected) in advance here.\", \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}}, \"required\": [\"name\", \"name_id\", \"scope\"]}}}\n```\nHuman: Here is the overview of my system:\nThe system consists of the following K8s manifest(s):K8s manifest: sock-shop-2/manifests/00-sock-shop-ns.yaml\n```yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: sock-shop\n\n```\nSummary of sock-shop-2/manifests/00-sock-shop-ns.yaml:\n- This manifest defines a Kubernetes Namespace.\n- The Namespace is named 'sock-shop'.\n- Namespaces are used to organize and manage resources within a Kubernetes cluster, providing a way to divide cluster resources between multiple users or teams.\n\nK8s manifest: sock-shop-2/manifests/01-carts-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: carts\n  labels:\n    name: carts\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: carts\n  template:\n    metadata:\n      labels:\n        name: carts\n    spec:\n      containers:\n      - name: carts\n        image: weaveworksdemos/carts:0.4.8\n        env:\n         - name: JAVA_OPTS\n           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false\n        resources:\n          limits:\n            cpu: 300m\n            memory: 500Mi\n          requests:\n            cpu: 100m\n            memory: 200Mi\n        ports:\n        - containerPort: 80\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n            add:\n              - NET_BIND_SERVICE\n          readOnlyRootFilesystem: true\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-volume\n      volumes:\n        - name: tmp-volume\n          emptyDir:\n            medium: Memory\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/01-carts-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'carts' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'carts' application running.\n- The Deployment uses the Docker image 'weaveworksdemos/carts:0.4.8'.\n- Environment variables are set for Java options to optimize memory usage and disable certain features.\n- Resource limits and requests are defined, with a maximum of 300m CPU and 500Mi memory, and a minimum of 100m CPU and 200Mi memory.\n- The application listens on port 80 within the container.\n- Security settings ensure the container runs as a non-root user with specific capabilities and a read-only root filesystem.\n- A temporary volume is mounted at '/tmp' using an in-memory empty directory.\n- The Deployment is scheduled to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/02-carts-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: carts\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: carts\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: carts\n\n```\nSummary of sock-shop-2/manifests/02-carts-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'carts'.\n- It is annotated for Prometheus scraping with 'prometheus.io/scrape: true'.\n- The Service is labeled with 'name: carts'.\n- It is deployed in the 'sock-shop' namespace.\n- The Service exposes port 80 and directs traffic to the same port on the target pods.\n- It selects pods with the label 'name: carts' to route traffic to.\n\nK8s manifest: sock-shop-2/manifests/03-carts-db-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: carts-db\n  labels:\n    name: carts-db\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: carts-db\n  template:\n    metadata:\n      labels:\n        name: carts-db\n    spec:\n      containers:\n      - name: carts-db\n        image: mongo\n        ports:\n        - name: mongo\n          containerPort: 27017\n        securityContext:\n          capabilities:\n            drop:\n              - all\n            add:\n              - CHOWN\n              - SETGID\n              - SETUID\n          readOnlyRootFilesystem: true\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-volume\n      volumes:\n        - name: tmp-volume\n          emptyDir:\n            medium: Memory\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/03-carts-db-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'carts-db' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'carts-db' pod running.\n- The pods are selected based on the label 'name: carts-db'.\n- Each pod runs a single container using the 'mongo' image.\n- The container exposes port 27017, which is the default port for MongoDB.\n- Security settings are applied to drop all capabilities and only add CHOWN, SETGID, and SETUID.\n- The root filesystem of the container is set to read-only for security purposes.\n- A temporary volume is mounted at '/tmp' using an in-memory emptyDir volume.\n- The pods are scheduled to run on nodes with the operating system labeled as 'linux'.\n\nK8s manifest: sock-shop-2/manifests/04-carts-db-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: carts-db\n  labels:\n    name: carts-db\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 27017\n    targetPort: 27017\n  selector:\n    name: carts-db\n\n```\nSummary of sock-shop-2/manifests/04-carts-db-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'carts-db'.\n- It is labeled with 'name: carts-db'.\n- The Service is created in the 'sock-shop' namespace.\n- It exposes port 27017 and directs traffic to the same port on the target pods.\n- The Service selects pods with the label 'name: carts-db' to route traffic to them.\n\nK8s manifest: sock-shop-2/manifests/05-catalogue-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: catalogue\n  labels:\n    name: catalogue\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: catalogue\n  template:\n    metadata:\n      labels:\n        name: catalogue\n    spec:\n      containers:\n      - name: catalogue\n        image: weaveworksdemos/catalogue:0.3.5\n        command: [\"/app\"]\n        args:\n        - -port=80\n        resources:\n          limits:\n            cpu: 200m\n            memory: 200Mi\n          requests:\n            cpu: 100m\n            memory: 100Mi\n        ports:\n        - containerPort: 80\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n            add:\n              - NET_BIND_SERVICE\n          readOnlyRootFilesystem: true\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 300\n          periodSeconds: 3\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 180\n          periodSeconds: 3\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/05-catalogue-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'catalogue' and is part of the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'catalogue' application running.\n- The Deployment uses the Docker image 'weaveworksdemos/catalogue:0.3.5'.\n- The application runs with the command '/app' and listens on port 80.\n- Resource limits are set to 200m CPU and 200Mi memory, with requests for 100m CPU and 100Mi memory.\n- The container is configured to run as a non-root user with user ID 10001.\n- Security settings include dropping all capabilities except 'NET_BIND_SERVICE' and using a read-only root filesystem.\n- Liveness and readiness probes are configured to check the '/health' endpoint on port 80, with initial delays of 300 and 180 seconds respectively.\n- The Deployment is scheduled to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/06-catalogue-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: catalogue\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: catalogue\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: catalogue\n\n```\nSummary of sock-shop-2/manifests/06-catalogue-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'catalogue'.\n- It is annotated to enable Prometheus scraping with 'prometheus.io/scrape: true'.\n- The Service is labeled with 'name: catalogue'.\n- It is deployed in the 'sock-shop' namespace.\n- The Service exposes port 80 and directs traffic to the same port on the selected pods.\n- It selects pods with the label 'name: catalogue' to route traffic to.\n\nK8s manifest: sock-shop-2/manifests/07-catalogue-db-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: catalogue-db\n  labels:\n    name: catalogue-db\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: catalogue-db\n  template:\n    metadata:\n      labels:\n        name: catalogue-db\n    spec:\n      containers:\n      - name: catalogue-db\n        image: weaveworksdemos/catalogue-db:0.3.0\n        env:\n          - name: MYSQL_ROOT_PASSWORD\n            value: fake_password\n          - name: MYSQL_DATABASE\n            value: socksdb\n        ports:\n        - name: mysql\n          containerPort: 3306\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/07-catalogue-db-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'catalogue-db'.\n- It is located in the 'sock-shop' namespace.\n- The Deployment will create 2 replicas of the pod.\n- Each pod will run a container from the image 'weaveworksdemos/catalogue-db:0.3.0'.\n- The container is configured with environment variables for 'MYSQL_ROOT_PASSWORD' and 'MYSQL_DATABASE'.\n- The container exposes port 3306, which is typically used for MySQL.\n- The pods are scheduled to run on nodes with the operating system labeled as Linux.\n\nK8s manifest: sock-shop-2/manifests/08-catalogue-db-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: catalogue-db\n  labels:\n    name: catalogue-db\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 3306\n    targetPort: 3306\n  selector:\n    name: catalogue-db\n\n```\nSummary of sock-shop-2/manifests/08-catalogue-db-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'catalogue-db'.\n- It is located in the 'sock-shop' namespace.\n- The Service is configured to expose port 3306.\n- It targets the same port (3306) on the pods.\n- The Service selects pods with the label 'name: catalogue-db'.\n\nK8s manifest: sock-shop-2/manifests/09-front-end-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: front-end\n  namespace: sock-shop\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      name: front-end\n  template:\n    metadata:\n      labels:\n        name: front-end\n    spec:\n      containers:\n      - name: front-end\n        image: weaveworksdemos/front-end:0.3.12\n        resources:\n          limits:\n            cpu: 300m\n            memory: 1000Mi\n          requests:\n            cpu: 100m\n            memory: 300Mi\n        ports:\n        - containerPort: 8079\n        env:\n        - name: SESSION_REDIS\n          value: \"true\"\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n          readOnlyRootFilesystem: true\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 8079\n          initialDelaySeconds: 300\n          periodSeconds: 3\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 8079\n          initialDelaySeconds: 30\n          periodSeconds: 3\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n```\nSummary of sock-shop-2/manifests/09-front-end-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'front-end' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 1 replica of the front-end application running.\n- The Deployment uses a selector to match pods with the label 'name: front-end'.\n- The pod template includes a single container named 'front-end'.\n- The container uses the image 'weaveworksdemos/front-end:0.3.12'.\n- Resource limits are set for the container: 300m CPU and 1000Mi memory.\n- Resource requests are set for the container: 100m CPU and 300Mi memory.\n- The container exposes port 8079.\n- An environment variable 'SESSION_REDIS' is set to 'true'.\n- Security context is configured to run the container as a non-root user with user ID 10001.\n- All additional Linux capabilities are dropped, and the root filesystem is set to read-only.\n- A liveness probe is configured to check the '/' path on port 8079, with an initial delay of 300 seconds and a period of 3 seconds.\n- A readiness probe is also configured to check the '/' path on port 8079, with an initial delay of 30 seconds and a period of 3 seconds.\n- The node selector ensures that the pod runs on nodes with the operating system labeled as Linux.\n\nK8s manifest: sock-shop-2/manifests/10-front-end-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: front-end\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: front-end\n  namespace: sock-shop\nspec:\n  type: NodePort\n  ports:\n  - port: 80\n    targetPort: 8079\n    nodePort: 30001\n  selector:\n    name: front-end\n\n```\nSummary of sock-shop-2/manifests/10-front-end-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'front-end'.\n- It is located in the 'sock-shop' namespace.\n- The Service type is 'NodePort', which exposes the service on each Node's IP at a static port.\n- It listens on port 80 and forwards traffic to target port 8079 on the pods.\n- The nodePort is set to 30001, which is the port on each node where the service can be accessed externally.\n- The Service is configured to be scraped by Prometheus for monitoring, as indicated by the annotation 'prometheus.io/scrape: true'.\n- It selects pods with the label 'name: front-end' to route traffic to.\n\nK8s manifest: sock-shop-2/manifests/11-orders-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: orders\n  labels:\n    name: orders\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: orders\n  template:\n    metadata:\n      labels:\n        name: orders\n    spec:\n      containers:\n      - name: orders\n        image: weaveworksdemos/orders:0.4.7\n        env:\n         - name: JAVA_OPTS\n           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false\n        resources:\n          limits:\n            cpu: 500m\n            memory: 500Mi\n          requests:\n            cpu: 100m\n            memory: 300Mi\n        ports:\n        - containerPort: 80\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n            add:\n              - NET_BIND_SERVICE\n          readOnlyRootFilesystem: true\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-volume\n      volumes:\n        - name: tmp-volume\n          emptyDir:\n            medium: Memory\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/11-orders-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'orders' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'orders' application running.\n- The Deployment uses the 'weaveworksdemos/orders:0.4.7' Docker image for the container.\n- Environment variables are set for Java options to optimize memory usage and disable certain features.\n- Resource limits and requests are defined, with a maximum of 500m CPU and 500Mi memory, and a minimum of 100m CPU and 300Mi memory.\n- The container listens on port 80.\n- Security settings ensure the container runs as a non-root user with specific capabilities and a read-only root filesystem.\n- A temporary volume is mounted at '/tmp' using an in-memory empty directory.\n- The Deployment is scheduled to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/12-orders-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: orders\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: orders\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: orders\n\n```\nSummary of sock-shop-2/manifests/12-orders-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'orders'.\n- It is annotated to enable Prometheus scraping with 'prometheus.io/scrape: true'.\n- The Service is labeled with 'name: orders'.\n- It is deployed in the 'sock-shop' namespace.\n- The Service exposes port 80 and directs traffic to the same port on the target pods.\n- It uses a selector to match pods with the label 'name: orders'.\n\nK8s manifest: sock-shop-2/manifests/13-orders-db-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: orders-db\n  labels:\n    name: orders-db\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: orders-db\n  template:\n    metadata:\n      labels:\n        name: orders-db\n    spec:\n      containers:\n      - name: orders-db\n        image: mongo\n        ports:\n        - name: mongo\n          containerPort: 27017\n        securityContext:\n          capabilities:\n            drop:\n              - all\n            add:\n              - CHOWN\n              - SETGID\n              - SETUID\n          readOnlyRootFilesystem: true\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-volume\n      volumes:\n        - name: tmp-volume\n          emptyDir:\n            medium: Memory\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/13-orders-db-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'orders-db' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'orders-db' pod running.\n- The pods are selected based on the label 'name: orders-db'.\n- Each pod runs a single container using the 'mongo' image.\n- The container exposes port 27017, which is the default port for MongoDB.\n- Security context is set to drop all capabilities and add only CHOWN, SETGID, and SETUID, with a read-only root filesystem.\n- A volume named 'tmp-volume' is mounted at '/tmp' and uses an in-memory empty directory.\n- The pods are scheduled to run on nodes with the operating system labeled as 'linux'.\n\nK8s manifest: sock-shop-2/manifests/14-orders-db-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: orders-db\n  labels:\n    name: orders-db\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 27017\n    targetPort: 27017\n  selector:\n    name: orders-db\n\n```\nSummary of sock-shop-2/manifests/14-orders-db-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'orders-db'.\n- It is located in the 'sock-shop' namespace.\n- The Service is configured to expose port 27017.\n- It targets the same port (27017) on the pods.\n- The Service selects pods with the label 'name: orders-db'.\n\nK8s manifest: sock-shop-2/manifests/15-payment-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: payment\n  labels:\n    name: payment\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: payment\n  template:\n    metadata:\n      labels:\n        name: payment\n    spec:\n      containers:\n      - name: payment\n        image: weaveworksdemos/payment:0.4.3\n        resources:\n          limits:\n            cpu: 200m\n            memory: 200Mi\n          requests:\n            cpu: 99m\n            memory: 100Mi\n        ports:\n        - containerPort: 80\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n            add:\n              - NET_BIND_SERVICE\n          readOnlyRootFilesystem: true\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 300\n          periodSeconds: 3\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 180\n          periodSeconds: 3\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/15-payment-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'payment' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'payment' application running.\n- The Deployment uses the Docker image 'weaveworksdemos/payment:0.4.3'.\n- Resource limits are set for the container, with a maximum of 200m CPU and 200Mi memory, and requests for 99m CPU and 100Mi memory.\n- The container listens on port 80.\n- Security settings ensure the container runs as a non-root user with user ID 10001, and the root filesystem is read-only.\n- The container has a liveness probe and a readiness probe, both checking the '/health' endpoint on port 80, with initial delays of 300 and 180 seconds respectively.\n- The Deployment is configured to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/16-payment-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: payment\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: payment\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: payment\n\n```\nSummary of sock-shop-2/manifests/16-payment-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'payment'.\n- It is annotated for Prometheus scraping, which means it is set up for monitoring.\n- The Service is labeled with 'name: payment'.\n- It is deployed in the 'sock-shop' namespace.\n- The Service exposes port 80 and directs traffic to the same port on the selected pods.\n- The Service selects pods with the label 'name: payment' to route traffic to them.\n\nK8s manifest: sock-shop-2/manifests/17-queue-master-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: queue-master\n  labels:\n    name: queue-master\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: queue-master\n  template:\n    metadata:\n      labels:\n        name: queue-master\n    spec:\n      containers:\n      - name: queue-master\n        image: weaveworksdemos/queue-master:0.3.1\n        env:\n         - name: JAVA_OPTS\n           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false\n        resources:\n          limits:\n            cpu: 300m\n            memory: 500Mi\n          requests:\n            cpu: 100m\n            memory: 300Mi\n        ports:\n        - containerPort: 80\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/17-queue-master-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'queue-master' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'queue-master' application running.\n- The Deployment uses a container image 'weaveworksdemos/queue-master:0.3.1'.\n- Environment variables are set for the container, including Java options for memory management and garbage collection.\n- Resource limits and requests are defined, with a CPU limit of 300m and memory limit of 500Mi, and requests for 100m CPU and 300Mi memory.\n- The container exposes port 80.\n- The Deployment is configured to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/18-queue-master-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: queue-master\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: queue-master\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: queue-master\n```\nSummary of sock-shop-2/manifests/18-queue-master-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The service is named 'queue-master'.\n- It is annotated for Prometheus scraping, which means it is set up to be monitored by Prometheus.\n- The service is labeled with 'name: queue-master' for identification and selection purposes.\n- It is deployed in the 'sock-shop' namespace.\n- The service exposes port 80 and directs traffic to the same port on the target pods.\n- The service uses a selector to target pods with the label 'name: queue-master'.\n\nK8s manifest: sock-shop-2/manifests/19-rabbitmq-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: rabbitmq\n  labels:\n    name: rabbitmq\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: rabbitmq\n  template:\n    metadata:\n      labels:\n        name: rabbitmq\n      annotations:\n        prometheus.io/scrape: \"false\"\n    spec:\n      containers:\n      - name: rabbitmq\n        image: rabbitmq:3.6.8-management\n        ports:\n        - containerPort: 15672\n          name: management\n        - containerPort: 5672\n          name: rabbitmq\n        securityContext:\n          capabilities:\n            drop:\n              - all\n            add:\n              - CHOWN\n              - SETGID\n              - SETUID\n              - DAC_OVERRIDE\n          readOnlyRootFilesystem: true\n      - name: rabbitmq-exporter\n        image: kbudde/rabbitmq-exporter\n        ports:\n        - containerPort: 9090\n          name: exporter\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/19-rabbitmq-dep.yaml:\n- This manifest defines a Deployment for RabbitMQ in a Kubernetes cluster.\n- The Deployment is named 'rabbitmq' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the RabbitMQ pod running.\n- The Deployment uses a selector to match pods with the label 'name: rabbitmq'.\n- The pod template includes two containers: one for RabbitMQ and another for RabbitMQ Exporter.\n- The RabbitMQ container uses the image 'rabbitmq:3.6.8-management' and exposes two ports: 15672 for management and 5672 for RabbitMQ.\n- The RabbitMQ container has a security context that drops all capabilities and adds specific ones like CHOWN, SETGID, SETUID, and DAC_OVERRIDE, and it uses a read-only root filesystem.\n- The RabbitMQ Exporter container uses the image 'kbudde/rabbitmq-exporter' and exposes port 9090.\n- The Deployment is configured to run on nodes with the label 'beta.kubernetes.io/os: linux'.\n- Annotations are set to prevent Prometheus from scraping metrics from this pod.\n\nK8s manifest: sock-shop-2/manifests/20-rabbitmq-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: rabbitmq\n  annotations:\n        prometheus.io/scrape: 'true'\n        prometheus.io/port: '9090'\n  labels:\n    name: rabbitmq\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 5672\n    name: rabbitmq\n    targetPort: 5672\n  - port: 9090\n    name: exporter\n    targetPort: exporter\n    protocol: TCP\n  selector:\n    name: rabbitmq\n\n```\nSummary of sock-shop-2/manifests/20-rabbitmq-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'rabbitmq'.\n- It is annotated for Prometheus scraping on port 9090.\n- The Service is labeled with 'name: rabbitmq'.\n- It is deployed in the 'sock-shop' namespace.\n- The Service exposes two ports: 5672 for RabbitMQ and 9090 for an exporter.\n- The Service uses TCP protocol for communication.\n- It selects pods with the label 'name: rabbitmq' to route traffic to.\n\nK8s manifest: sock-shop-2/manifests/21-session-db-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: session-db\n  labels:\n    name: session-db\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: session-db\n  template:\n    metadata:\n      labels:\n        name: session-db\n      annotations:\n        prometheus.io.scrape: \"false\"\n    spec:\n      containers:\n      - name: session-db\n        image: redis:alpine\n        ports:\n        - name: redis\n          containerPort: 6379\n        securityContext:\n          capabilities:\n            drop:\n              - all\n            add:\n              - CHOWN\n              - SETGID\n              - SETUID\n          readOnlyRootFilesystem: true\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/21-session-db-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'session-db' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'session-db' pod running.\n- The pods are selected based on the label 'name: session-db'.\n- Each pod runs a single container using the 'redis:alpine' image.\n- The container exposes port 6379, which is commonly used by Redis.\n- Security settings are applied to drop all capabilities and only add CHOWN, SETGID, and SETUID.\n- The root filesystem of the container is set to be read-only for security purposes.\n- The pods are scheduled to run on nodes with the operating system labeled as Linux.\n\nK8s manifest: sock-shop-2/manifests/22-session-db-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: session-db\n  labels:\n    name: session-db\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 6379\n    targetPort: 6379\n  selector:\n    name: session-db\n\n```\nSummary of sock-shop-2/manifests/22-session-db-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'session-db'.\n- It is located in the 'sock-shop' namespace.\n- The Service listens on port 6379 and forwards traffic to the same port on the target pods.\n- It uses a selector to target pods with the label 'name: session-db'.\n\nK8s manifest: sock-shop-2/manifests/23-shipping-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: shipping\n  labels:\n    name: shipping\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: shipping\n  template:\n    metadata:\n      labels:\n        name: shipping\n    spec:\n      containers:\n      - name: shipping\n        image: weaveworksdemos/shipping:0.4.8\n        env:\n         - name: ZIPKIN\n           value: zipkin.jaeger.svc.cluster.local\n         - name: JAVA_OPTS\n           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false\n        resources:\n          limits:\n            cpu: 300m\n            memory: 500Mi\n          requests:\n            cpu: 100m\n            memory: 300Mi\n        ports:\n        - containerPort: 80\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n            add:\n              - NET_BIND_SERVICE\n          readOnlyRootFilesystem: true\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-volume\n      volumes:\n        - name: tmp-volume\n          emptyDir:\n            medium: Memory\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/23-shipping-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'shipping' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'shipping' application running.\n- The Deployment uses the Docker image 'weaveworksdemos/shipping:0.4.8'.\n- Environment variables are set for the application, including 'ZIPKIN' and 'JAVA_OPTS'.\n- Resource limits and requests are defined, with a CPU limit of 300m and memory limit of 500Mi, and requests for 100m CPU and 300Mi memory.\n- The application listens on port 80.\n- Security context is configured to run the container as a non-root user with user ID 10001, and with a read-only root filesystem.\n- The container has a volume mounted at '/tmp', which is an in-memory empty directory.\n- The Deployment is scheduled to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/24-shipping-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: shipping\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: shipping\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: shipping\n\n\n```\nSummary of sock-shop-2/manifests/24-shipping-svc.yaml:\n- This is a Kubernetes Service manifest.\n- The service is named 'shipping'.\n- It is annotated for Prometheus scraping with 'prometheus.io/scrape: true'.\n- The service is labeled with 'name: shipping'.\n- It is deployed in the 'sock-shop' namespace.\n- The service exposes port 80 and directs traffic to the same port on the selected pods.\n- It selects pods with the label 'name: shipping'.\n\nK8s manifest: sock-shop-2/manifests/25-user-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: user\n  labels:\n    name: user\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: user\n  template:\n    metadata:\n      labels:\n        name: user\n    spec:\n      containers:\n      - name: user\n        image: weaveworksdemos/user:0.4.7\n        resources:\n          limits:\n            cpu: 300m\n            memory: 200Mi\n          requests:\n            cpu: 100m\n            memory: 100Mi\n        ports:\n        - containerPort: 80\n        env:\n        - name: mongo\n          value: user-db:27017\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n            add:\n              - NET_BIND_SERVICE\n          readOnlyRootFilesystem: true\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 300\n          periodSeconds: 3\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 180\n          periodSeconds: 3\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/25-user-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'user' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'user' application running.\n- The Deployment uses the Docker image 'weaveworksdemos/user:0.4.7'.\n- Resource limits are set for the container: 300m CPU and 200Mi memory, with requests for 100m CPU and 100Mi memory.\n- The container listens on port 80.\n- An environment variable 'mongo' is set with the value 'user-db:27017'.\n- Security context is configured to run the container as a non-root user with user ID 10001.\n- The container has a read-only root filesystem and drops all capabilities except 'NET_BIND_SERVICE'.\n- Liveness and readiness probes are configured to check the '/health' endpoint on port 80.\n- The liveness probe starts after 300 seconds and checks every 3 seconds.\n- The readiness probe starts after 180 seconds and checks every 3 seconds.\n- The Deployment is scheduled to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/26-user-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: user\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: user\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: user\n\n\n```\nSummary of sock-shop-2/manifests/26-user-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The service is named 'user'.\n- It is annotated for Prometheus scraping, which means it is set up for monitoring.\n- The service is labeled with 'name: user'.\n- It is deployed in the 'sock-shop' namespace.\n- The service listens on port 80 and forwards traffic to the same port on the selected pods.\n- The service selects pods with the label 'name: user'.\n\nK8s manifest: sock-shop-2/manifests/27-user-db-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: user-db\n  labels:\n    name: user-db\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: user-db\n  template:\n    metadata:\n      labels:\n        name: user-db\n    spec:\n      containers:\n      - name: user-db\n        image: weaveworksdemos/user-db:0.3.0\n\n        ports:\n        - name: mongo\n          containerPort: 27017\n        securityContext:\n          capabilities:\n            drop:\n              - all\n            add:\n              - CHOWN\n              - SETGID\n              - SETUID\n          readOnlyRootFilesystem: true\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-volume\n      volumes:\n        - name: tmp-volume\n          emptyDir:\n            medium: Memory\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/27-user-db-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'user-db' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'user-db' pod running.\n- The pods are selected based on the label 'name: user-db'.\n- Each pod runs a single container using the image 'weaveworksdemos/user-db:0.3.0'.\n- The container exposes port 27017, which is typically used by MongoDB.\n- Security settings are applied to drop all capabilities and only add CHOWN, SETGID, and SETUID.\n- The root filesystem of the container is set to be read-only for security purposes.\n- A temporary volume is mounted at '/tmp' using an in-memory emptyDir volume.\n- The pods are scheduled to run on nodes with the operating system labeled as 'linux'.\n\nK8s manifest: sock-shop-2/manifests/28-user-db-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: user-db\n  labels:\n    name: user-db\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 27017\n    targetPort: 27017\n  selector:\n    name: user-db\n\n\n```\nSummary of sock-shop-2/manifests/28-user-db-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'user-db'.\n- It is located in the 'sock-shop' namespace.\n- The Service is configured to expose port 27017.\n- It targets the same port (27017) on the pods it selects.\n- The Service uses a selector to match pods with the label 'name: user-db'.\n\nThe resiliency issues/weaknesses in the system are as follows:\nIssue #0: Missing Resource Requests\n  - details: Pods may not get scheduled if the cluster is under resource pressure, leading to potential downtime.\n  - manifests having the issues: ['sock-shop-2/manifests/03-carts-db-dep.yaml', 'sock-shop-2/manifests/07-catalogue-db-dep.yaml', 'sock-shop-2/manifests/13-orders-db-dep.yaml', 'sock-shop-2/manifests/19-rabbitmq-dep.yaml', 'sock-shop-2/manifests/21-session-db-dep.yaml', 'sock-shop-2/manifests/27-user-db-dep.yaml']\n  - problematic config: The deployments for carts-db, catalogue-db, orders-db, rabbitmq, session-db, and user-db do not specify resource requests.\n\nIssue #1: Single Replica Deployment\n  - details: The front-end deployment has only one replica, which can lead to downtime if the pod fails.\n  - manifests having the issues: ['sock-shop-2/manifests/09-front-end-dep.yaml']\n  - problematic config: spec.replicas: 1\n\nIssue #2: High Initial Delay for Liveness Probe\n  - details: A high initial delay for the liveness probe can delay the detection of a failed pod, leading to longer downtime.\n  - manifests having the issues: ['sock-shop-2/manifests/05-catalogue-dep.yaml', 'sock-shop-2/manifests/09-front-end-dep.yaml', 'sock-shop-2/manifests/15-payment-dep.yaml', 'sock-shop-2/manifests/25-user-dep.yaml']\n  - problematic config: livenessProbe.initialDelaySeconds: 300\n\nIssue #3: Missing Port Specification in Service\n  - details: The service may not function correctly if the port is not specified, leading to connectivity issues.\n  - manifests having the issues: ['sock-shop-2/manifests/02-carts-svc.yaml', 'sock-shop-2/manifests/04-carts-db-svc.yaml', 'sock-shop-2/manifests/06-catalogue-svc.yaml', 'sock-shop-2/manifests/08-catalogue-db-svc.yaml', 'sock-shop-2/manifests/12-orders-svc.yaml', 'sock-shop-2/manifests/14-orders-db-svc.yaml', 'sock-shop-2/manifests/16-payment-svc.yaml', 'sock-shop-2/manifests/18-queue-master-svc.yaml', 'sock-shop-2/manifests/22-session-db-svc.yaml', 'sock-shop-2/manifests/24-shipping-svc.yaml', 'sock-shop-2/manifests/26-user-svc.yaml', 'sock-shop-2/manifests/28-user-db-svc.yaml']\n  - problematic config: The port field is commented out or not specified in the service manifests.\n\nThe expected type of application on the system (i.e., K8s manfests):\nThe 'sock-shop' application is an e-commerce platform that allows users to browse a catalogue of items, add items to a shopping cart, place orders, and make payments. It is a microservices-based application deployed on Kubernetes, with each service handling a specific aspect of the e-commerce process, such as managing the catalogue, processing orders, handling payments, and managing user sessions.; The manifests provided are part of a Kubernetes deployment for a microservices-based application called 'sock-shop'. This is evident from the namespace 'sock-shop' and the naming conventions used in the manifests, such as 'carts', 'catalogue', 'orders', 'payment', 'shipping', 'user', and their respective databases. These components are typical of an e-commerce application, where users can browse a catalogue, add items to a cart, place orders, and make payments. The use of services like RabbitMQ and Redis further supports the assumption of a complex, distributed application architecture, which is common in e-commerce platforms.\n\nSteady states of the network system defined by the manifests are the following:\n2 steady states are defined.\n1st steady states:\n- Name: carts-db-pod-count\n- Description: The first issue to address is the 'Missing Resource Requests' in the 'carts-db' Deployment. This is a critical issue because without resource requests, the pods may not get scheduled if the cluster is under resource pressure, leading to potential downtime. To verify the steady state, we can measure the number of 'carts-db' pods running, ensuring it matches the expected replica count of 2. This will help us understand if the pods are being scheduled correctly despite the missing resource requests.\n- Threshold for the steady state: At least 2 'carts-db' pods must be running 95% of the time within a 1-minute monitoring period.; The steady state we are examining is the number of 'carts-db' pods running, which should match the expected replica count of 2. The current state shows that the pod count consistently matches the expected count of 2 over multiple checks. Given that the system is expected to maintain 2 replicas, the threshold should ensure that at least 2 pods are running to maintain redundancy and availability. To account for potential fluctuations, such as during pod restarts or updates, a reasonable tolerance can be applied. For example, allowing a brief period where the pod count might drop to 1, but it should recover quickly. Therefore, the threshold can be defined as maintaining at least 2 'carts-db' pods running 95% of the time within a 1-minute monitoring period. This allows for brief fluctuations while ensuring the system remains stable and available.\n- Whether the steady state meets the threshold is determined by the following Python script with K8s API:\n```\nimport os\nimport time\nimport argparse\nfrom kubernetes import client, config\nfrom unittest_base import K8sAPIBase\n\nclass TestCartsDBPodCount(K8sAPIBase):\n    def __init__(self):\n        super().__init__()\n        self.v1_apps = client.AppsV1Api()\n\n    def check_carts_db_pod_count(self, namespace, expected_count):\n        pod_count = 0\n        try:\n            resp = self.v1_apps.read_namespaced_deployment(name='carts-db', namespace=namespace)\n            pod_count = resp.status.replicas\n        except client.exceptions.ApiException as e:\n            print(f\"Exception when calling AppsV1Api->read_namespaced_deployment: {e}\")\n        return pod_count\n\n    def test_steady_state(self, duration):\n        namespace = 'sock-shop'\n        expected_count = 2\n        successful_checks = 0\n\n        for _ in range(duration):\n            pod_count = self.check_carts_db_pod_count(namespace, expected_count)\n            print(f\"Current 'carts-db' pod count: {pod_count}\")\n            if pod_count == expected_count:\n                successful_checks += 1\n            time.sleep(1)\n\n        # Calculate the percentage of successful checks\n        success_percentage = (successful_checks / duration) * 100\n        print(f\"Success percentage: {success_percentage}%\")\n\n        # Assert that the success percentage is at least 95%\n        assert success_percentage >= 95, f\"Pod count was not stable enough: {success_percentage}% < 95%\"\n\n\ndef main():\n    parser = argparse.ArgumentParser(description='Test carts-db pod count steady state.')\n    parser.add_argument('--duration', type=int, default=60, help='Duration to check the pod count in seconds')\n    args = parser.parse_args()\n\n    test = TestCartsDBPodCount()\n    test.test_steady_state(args.duration)\n\n\nif __name__ == '__main__':\n    main()\n\n```2nd steady states:\n- Name: front-end-pod-count\n- Description: The next issue to address is the 'Single Replica Deployment' in the 'front-end' Deployment. This is a critical issue because having only one replica can lead to downtime if the pod fails. To verify the steady state, we can measure the number of 'front-end' pods running, ensuring it matches the expected replica count of 1. This will help us understand if the pod is being scheduled correctly and remains available despite being a single replica. Monitoring the pod count will allow us to verify the system's resilience to potential failures.\n- Threshold for the steady state: At least 1 front-end pod must be running 95% of the time during a 1-minute monitoring period.; The current state of the system shows that the front-end pod count is consistently at 1, which matches the expected replica count as per the deployment configuration. Given that the system is currently stable with a single replica, the threshold should ensure that at least 1 front-end pod is running at all times. However, to account for potential fluctuations or brief disruptions, a reasonable tolerance should be included. Since the experiment must be completed within 1 minute, we can set a threshold that allows for a brief period where the pod count might temporarily drop below 1, but it should recover quickly. Therefore, the threshold can be defined as having at least 1 front-end pod running 95% of the time during the 1-minute monitoring period. This allows for a brief 3-second window where the pod count might be 0, but it should not persist beyond that.\n- Whether the steady state meets the threshold is determined by the following Python script with K8s API:\n```\nimport os\nimport time\nimport argparse\nfrom kubernetes import client, config\nfrom unittest_base import K8sAPIBase\n\nclass TestFrontEndPodCount(K8sAPIBase):\n    def __init__(self, namespace, duration):\n        super().__init__()\n        self.namespace = namespace\n        self.duration = duration\n\n    def test_front_end_pod_count(self):\n        pod_label_selector = 'name=front-end'\n        successful_checks = 0\n\n        # Check the pod count every second for the specified duration\n        for _ in range(self.duration):\n            pods = self.v1.list_namespaced_pod(namespace=self.namespace, label_selector=pod_label_selector)\n            pod_count = len(pods.items)\n            print(f'Current front-end pod count: {pod_count}')\n\n            # Increment successful checks if pod count is 1 or more\n            if pod_count >= 1:\n                successful_checks += 1\n\n            time.sleep(1)\n\n        # Calculate the percentage of successful checks\n        success_rate = (successful_checks / self.duration) * 100\n        print(f'Success rate: {success_rate}%')\n\n        # Assert that the success rate meets the 95% threshold\n        assert success_rate >= 95, f\"Front-end pod count did not meet the 95% threshold. Success rate: {success_rate}%\"\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Test front-end pod count in the sock-shop namespace.')\n    parser.add_argument('--duration', type=int, default=60, help='Duration to check the pod count in seconds.')\n    args = parser.parse_args()\n\n    test = TestFrontEndPodCount(namespace='sock-shop', duration=args.duration)\n    test.test_front_end_pod_count()\n```\n\nPlease follow the instructions below regarding Chaos Engineering as necessary:\n- The Chaos-Engineering experiment must be completed within 1 minute.\n\n- When using k6 in steady-state definition, always select a request URL from the following options (other requests are invalid):\n  1. http://front-end.sock-shop.svc.cluster.local/\n  2. http://front-end.sock-shop.svc.cluster.local/catalogue?size=10\n  3. http://front-end.sock-shop.svc.cluster.local/detail.html?id=<ID>\n  Replace <ID> with an available ID: [`03fef6ac-1896-4ce8-bd69-b798f85c6e0b`, `3395a43e-2d88-40de-b95f-e00e1502085b`, `510a0d7e-8e83-4193-b483-e27e09ddc34d`, `808a2de1-1aaa-4c25-a9b9-6612e8f29a38`, `819e1fbf-8b7e-4f6d-811f-693534916a8b`, `837ab141-399e-4c1f-9abc-bace40296bac`, `a0a4f044-b040-410d-8ead-4de0446aec7e`, `d3588630-ad8e-49df-bbd7-3167f7efb246`, `zzz4f044-b040-410d-8ead-4de0446aec7e`]\n  4. http://front-end.sock-shop.svc.cluster.local/category/\n  5. http://front-end.sock-shop.svc.cluster.local/category?tags=<TAG>\n  Replace <TAG> with an available tag: [`magic`, `action`, `blue`, `brown`, `black`, `sport`, `formal`, `red`, `green`, `skin`, `geek`]\n  6. http://front-end.sock-shop.svc.cluster.local/basket.html\n\nNow, please define fault injections to reveal the system's vulnerabilities.\nAI: ```json\n{\"event\":"
            ],
            "{\"event\": \"Black Friday Sale\", \"thought\": \"During a Black Friday sale, the system is expected to handle a significant increase in traffic and load. This event will test the system's ability to maintain steady states under high demand. The system's weaknesses, such as missing resource requests and single replica deployments, can lead to potential downtime or degraded performance. To simulate this event, we will inject faults that target these weaknesses. First, we will use StressChaos to simulate high CPU and memory usage on the 'carts-db' pods, which lack resource requests, to see if they can maintain the required pod count. Next, we will use PodChaos to kill the single replica 'front-end' pod to test its resilience and recovery. Finally, we will introduce NetworkChaos to simulate network latency on the 'front-end' service, which will test the system's ability to handle network issues during high traffic. This sequence of fault injections will simulate the phenomena of a Black Friday sale, where high load, potential failures, and network issues are common.\", \"faults\": [[{\"name\": \"StressChaos\", \"name_id\": 0, \"scope\": {\"namespace\": \"sock-shop\", \"label\": \"name=carts-db\"}}], [{\"name\": \"PodChaos\", \"name_id\": 1, \"scope\": {\"namespace\": \"sock-shop\", \"label\": \"name=front-end\"}}], [{\"name\": \"NetworkChaos\", \"name_id\": 2, \"scope\": {\"namespace\": \"sock-shop\", \"label\": \"name=front-end\"}}]]}\n"
        ]
    },
    {
        "name": "refine_fault_params",
        "token_usage": {
            "input_tokens": 45607,
            "output_tokens": 198,
            "total_tokens": 45805
        },
        "message_history": [
            [
                "System: You are a helpful AI assistant for Chaos Engineering.\nGiven k8s manifests that defines a network system, its steady states, and a fault type that may affect the steady states in the system, please detail the parameters of the fault.\nAlways keep the following rules:\n- Pay attention to namespace specification. If the namespace is specified in the manifest, it is deployed with the namespace. If not, it is deployed with the 'default' namespace.\n- The parameters follow the format of Chaos Mesh.\nHuman: Here is the overview of my system:\nThe system consists of the following K8s manifest(s):K8s manifest: sock-shop-2/manifests/00-sock-shop-ns.yaml\n```yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: sock-shop\n\n```\nSummary of sock-shop-2/manifests/00-sock-shop-ns.yaml:\n- This manifest defines a Kubernetes Namespace.\n- The Namespace is named 'sock-shop'.\n- Namespaces are used to organize and manage resources within a Kubernetes cluster, providing a way to divide cluster resources between multiple users or teams.\n\nK8s manifest: sock-shop-2/manifests/01-carts-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: carts\n  labels:\n    name: carts\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: carts\n  template:\n    metadata:\n      labels:\n        name: carts\n    spec:\n      containers:\n      - name: carts\n        image: weaveworksdemos/carts:0.4.8\n        env:\n         - name: JAVA_OPTS\n           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false\n        resources:\n          limits:\n            cpu: 300m\n            memory: 500Mi\n          requests:\n            cpu: 100m\n            memory: 200Mi\n        ports:\n        - containerPort: 80\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n            add:\n              - NET_BIND_SERVICE\n          readOnlyRootFilesystem: true\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-volume\n      volumes:\n        - name: tmp-volume\n          emptyDir:\n            medium: Memory\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/01-carts-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'carts' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'carts' application running.\n- The Deployment uses the Docker image 'weaveworksdemos/carts:0.4.8'.\n- Environment variables are set for Java options to optimize memory usage and disable certain features.\n- Resource limits and requests are defined, with a maximum of 300m CPU and 500Mi memory, and a minimum of 100m CPU and 200Mi memory.\n- The application listens on port 80 within the container.\n- Security settings ensure the container runs as a non-root user with specific capabilities and a read-only root filesystem.\n- A temporary volume is mounted at '/tmp' using an in-memory empty directory.\n- The Deployment is scheduled to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/02-carts-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: carts\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: carts\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: carts\n\n```\nSummary of sock-shop-2/manifests/02-carts-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'carts'.\n- It is annotated for Prometheus scraping with 'prometheus.io/scrape: true'.\n- The Service is labeled with 'name: carts'.\n- It is deployed in the 'sock-shop' namespace.\n- The Service exposes port 80 and directs traffic to the same port on the target pods.\n- It selects pods with the label 'name: carts' to route traffic to.\n\nK8s manifest: sock-shop-2/manifests/03-carts-db-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: carts-db\n  labels:\n    name: carts-db\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: carts-db\n  template:\n    metadata:\n      labels:\n        name: carts-db\n    spec:\n      containers:\n      - name: carts-db\n        image: mongo\n        ports:\n        - name: mongo\n          containerPort: 27017\n        securityContext:\n          capabilities:\n            drop:\n              - all\n            add:\n              - CHOWN\n              - SETGID\n              - SETUID\n          readOnlyRootFilesystem: true\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-volume\n      volumes:\n        - name: tmp-volume\n          emptyDir:\n            medium: Memory\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/03-carts-db-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'carts-db' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'carts-db' pod running.\n- The pods are selected based on the label 'name: carts-db'.\n- Each pod runs a single container using the 'mongo' image.\n- The container exposes port 27017, which is the default port for MongoDB.\n- Security settings are applied to drop all capabilities and only add CHOWN, SETGID, and SETUID.\n- The root filesystem of the container is set to read-only for security purposes.\n- A temporary volume is mounted at '/tmp' using an in-memory emptyDir volume.\n- The pods are scheduled to run on nodes with the operating system labeled as 'linux'.\n\nK8s manifest: sock-shop-2/manifests/04-carts-db-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: carts-db\n  labels:\n    name: carts-db\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 27017\n    targetPort: 27017\n  selector:\n    name: carts-db\n\n```\nSummary of sock-shop-2/manifests/04-carts-db-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'carts-db'.\n- It is labeled with 'name: carts-db'.\n- The Service is created in the 'sock-shop' namespace.\n- It exposes port 27017 and directs traffic to the same port on the target pods.\n- The Service selects pods with the label 'name: carts-db' to route traffic to them.\n\nK8s manifest: sock-shop-2/manifests/05-catalogue-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: catalogue\n  labels:\n    name: catalogue\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: catalogue\n  template:\n    metadata:\n      labels:\n        name: catalogue\n    spec:\n      containers:\n      - name: catalogue\n        image: weaveworksdemos/catalogue:0.3.5\n        command: [\"/app\"]\n        args:\n        - -port=80\n        resources:\n          limits:\n            cpu: 200m\n            memory: 200Mi\n          requests:\n            cpu: 100m\n            memory: 100Mi\n        ports:\n        - containerPort: 80\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n            add:\n              - NET_BIND_SERVICE\n          readOnlyRootFilesystem: true\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 300\n          periodSeconds: 3\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 180\n          periodSeconds: 3\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/05-catalogue-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'catalogue' and is part of the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'catalogue' application running.\n- The Deployment uses the Docker image 'weaveworksdemos/catalogue:0.3.5'.\n- The application runs with the command '/app' and listens on port 80.\n- Resource limits are set to 200m CPU and 200Mi memory, with requests for 100m CPU and 100Mi memory.\n- The container is configured to run as a non-root user with user ID 10001.\n- Security settings include dropping all capabilities except 'NET_BIND_SERVICE' and using a read-only root filesystem.\n- Liveness and readiness probes are configured to check the '/health' endpoint on port 80, with initial delays of 300 and 180 seconds respectively.\n- The Deployment is scheduled to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/06-catalogue-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: catalogue\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: catalogue\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: catalogue\n\n```\nSummary of sock-shop-2/manifests/06-catalogue-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'catalogue'.\n- It is annotated to enable Prometheus scraping with 'prometheus.io/scrape: true'.\n- The Service is labeled with 'name: catalogue'.\n- It is deployed in the 'sock-shop' namespace.\n- The Service exposes port 80 and directs traffic to the same port on the selected pods.\n- It selects pods with the label 'name: catalogue' to route traffic to.\n\nK8s manifest: sock-shop-2/manifests/07-catalogue-db-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: catalogue-db\n  labels:\n    name: catalogue-db\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: catalogue-db\n  template:\n    metadata:\n      labels:\n        name: catalogue-db\n    spec:\n      containers:\n      - name: catalogue-db\n        image: weaveworksdemos/catalogue-db:0.3.0\n        env:\n          - name: MYSQL_ROOT_PASSWORD\n            value: fake_password\n          - name: MYSQL_DATABASE\n            value: socksdb\n        ports:\n        - name: mysql\n          containerPort: 3306\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/07-catalogue-db-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'catalogue-db'.\n- It is located in the 'sock-shop' namespace.\n- The Deployment will create 2 replicas of the pod.\n- Each pod will run a container from the image 'weaveworksdemos/catalogue-db:0.3.0'.\n- The container is configured with environment variables for 'MYSQL_ROOT_PASSWORD' and 'MYSQL_DATABASE'.\n- The container exposes port 3306, which is typically used for MySQL.\n- The pods are scheduled to run on nodes with the operating system labeled as Linux.\n\nK8s manifest: sock-shop-2/manifests/08-catalogue-db-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: catalogue-db\n  labels:\n    name: catalogue-db\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 3306\n    targetPort: 3306\n  selector:\n    name: catalogue-db\n\n```\nSummary of sock-shop-2/manifests/08-catalogue-db-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'catalogue-db'.\n- It is located in the 'sock-shop' namespace.\n- The Service is configured to expose port 3306.\n- It targets the same port (3306) on the pods.\n- The Service selects pods with the label 'name: catalogue-db'.\n\nK8s manifest: sock-shop-2/manifests/09-front-end-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: front-end\n  namespace: sock-shop\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      name: front-end\n  template:\n    metadata:\n      labels:\n        name: front-end\n    spec:\n      containers:\n      - name: front-end\n        image: weaveworksdemos/front-end:0.3.12\n        resources:\n          limits:\n            cpu: 300m\n            memory: 1000Mi\n          requests:\n            cpu: 100m\n            memory: 300Mi\n        ports:\n        - containerPort: 8079\n        env:\n        - name: SESSION_REDIS\n          value: \"true\"\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n          readOnlyRootFilesystem: true\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 8079\n          initialDelaySeconds: 300\n          periodSeconds: 3\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 8079\n          initialDelaySeconds: 30\n          periodSeconds: 3\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n```\nSummary of sock-shop-2/manifests/09-front-end-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'front-end' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 1 replica of the front-end application running.\n- The Deployment uses a selector to match pods with the label 'name: front-end'.\n- The pod template includes a single container named 'front-end'.\n- The container uses the image 'weaveworksdemos/front-end:0.3.12'.\n- Resource limits are set for the container: 300m CPU and 1000Mi memory.\n- Resource requests are set for the container: 100m CPU and 300Mi memory.\n- The container exposes port 8079.\n- An environment variable 'SESSION_REDIS' is set to 'true'.\n- Security context is configured to run the container as a non-root user with user ID 10001.\n- All additional Linux capabilities are dropped, and the root filesystem is set to read-only.\n- A liveness probe is configured to check the '/' path on port 8079, with an initial delay of 300 seconds and a period of 3 seconds.\n- A readiness probe is also configured to check the '/' path on port 8079, with an initial delay of 30 seconds and a period of 3 seconds.\n- The node selector ensures that the pod runs on nodes with the operating system labeled as Linux.\n\nK8s manifest: sock-shop-2/manifests/10-front-end-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: front-end\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: front-end\n  namespace: sock-shop\nspec:\n  type: NodePort\n  ports:\n  - port: 80\n    targetPort: 8079\n    nodePort: 30001\n  selector:\n    name: front-end\n\n```\nSummary of sock-shop-2/manifests/10-front-end-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'front-end'.\n- It is located in the 'sock-shop' namespace.\n- The Service type is 'NodePort', which exposes the service on each Node's IP at a static port.\n- It listens on port 80 and forwards traffic to target port 8079 on the pods.\n- The nodePort is set to 30001, which is the port on each node where the service can be accessed externally.\n- The Service is configured to be scraped by Prometheus for monitoring, as indicated by the annotation 'prometheus.io/scrape: true'.\n- It selects pods with the label 'name: front-end' to route traffic to.\n\nK8s manifest: sock-shop-2/manifests/11-orders-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: orders\n  labels:\n    name: orders\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: orders\n  template:\n    metadata:\n      labels:\n        name: orders\n    spec:\n      containers:\n      - name: orders\n        image: weaveworksdemos/orders:0.4.7\n        env:\n         - name: JAVA_OPTS\n           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false\n        resources:\n          limits:\n            cpu: 500m\n            memory: 500Mi\n          requests:\n            cpu: 100m\n            memory: 300Mi\n        ports:\n        - containerPort: 80\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n            add:\n              - NET_BIND_SERVICE\n          readOnlyRootFilesystem: true\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-volume\n      volumes:\n        - name: tmp-volume\n          emptyDir:\n            medium: Memory\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/11-orders-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'orders' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'orders' application running.\n- The Deployment uses the 'weaveworksdemos/orders:0.4.7' Docker image for the container.\n- Environment variables are set for Java options to optimize memory usage and disable certain features.\n- Resource limits and requests are defined, with a maximum of 500m CPU and 500Mi memory, and a minimum of 100m CPU and 300Mi memory.\n- The container listens on port 80.\n- Security settings ensure the container runs as a non-root user with specific capabilities and a read-only root filesystem.\n- A temporary volume is mounted at '/tmp' using an in-memory empty directory.\n- The Deployment is scheduled to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/12-orders-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: orders\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: orders\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: orders\n\n```\nSummary of sock-shop-2/manifests/12-orders-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'orders'.\n- It is annotated to enable Prometheus scraping with 'prometheus.io/scrape: true'.\n- The Service is labeled with 'name: orders'.\n- It is deployed in the 'sock-shop' namespace.\n- The Service exposes port 80 and directs traffic to the same port on the target pods.\n- It uses a selector to match pods with the label 'name: orders'.\n\nK8s manifest: sock-shop-2/manifests/13-orders-db-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: orders-db\n  labels:\n    name: orders-db\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: orders-db\n  template:\n    metadata:\n      labels:\n        name: orders-db\n    spec:\n      containers:\n      - name: orders-db\n        image: mongo\n        ports:\n        - name: mongo\n          containerPort: 27017\n        securityContext:\n          capabilities:\n            drop:\n              - all\n            add:\n              - CHOWN\n              - SETGID\n              - SETUID\n          readOnlyRootFilesystem: true\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-volume\n      volumes:\n        - name: tmp-volume\n          emptyDir:\n            medium: Memory\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/13-orders-db-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'orders-db' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'orders-db' pod running.\n- The pods are selected based on the label 'name: orders-db'.\n- Each pod runs a single container using the 'mongo' image.\n- The container exposes port 27017, which is the default port for MongoDB.\n- Security context is set to drop all capabilities and add only CHOWN, SETGID, and SETUID, with a read-only root filesystem.\n- A volume named 'tmp-volume' is mounted at '/tmp' and uses an in-memory empty directory.\n- The pods are scheduled to run on nodes with the operating system labeled as 'linux'.\n\nK8s manifest: sock-shop-2/manifests/14-orders-db-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: orders-db\n  labels:\n    name: orders-db\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 27017\n    targetPort: 27017\n  selector:\n    name: orders-db\n\n```\nSummary of sock-shop-2/manifests/14-orders-db-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'orders-db'.\n- It is located in the 'sock-shop' namespace.\n- The Service is configured to expose port 27017.\n- It targets the same port (27017) on the pods.\n- The Service selects pods with the label 'name: orders-db'.\n\nK8s manifest: sock-shop-2/manifests/15-payment-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: payment\n  labels:\n    name: payment\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: payment\n  template:\n    metadata:\n      labels:\n        name: payment\n    spec:\n      containers:\n      - name: payment\n        image: weaveworksdemos/payment:0.4.3\n        resources:\n          limits:\n            cpu: 200m\n            memory: 200Mi\n          requests:\n            cpu: 99m\n            memory: 100Mi\n        ports:\n        - containerPort: 80\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n            add:\n              - NET_BIND_SERVICE\n          readOnlyRootFilesystem: true\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 300\n          periodSeconds: 3\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 180\n          periodSeconds: 3\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/15-payment-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'payment' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'payment' application running.\n- The Deployment uses the Docker image 'weaveworksdemos/payment:0.4.3'.\n- Resource limits are set for the container, with a maximum of 200m CPU and 200Mi memory, and requests for 99m CPU and 100Mi memory.\n- The container listens on port 80.\n- Security settings ensure the container runs as a non-root user with user ID 10001, and the root filesystem is read-only.\n- The container has a liveness probe and a readiness probe, both checking the '/health' endpoint on port 80, with initial delays of 300 and 180 seconds respectively.\n- The Deployment is configured to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/16-payment-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: payment\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: payment\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: payment\n\n```\nSummary of sock-shop-2/manifests/16-payment-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'payment'.\n- It is annotated for Prometheus scraping, which means it is set up for monitoring.\n- The Service is labeled with 'name: payment'.\n- It is deployed in the 'sock-shop' namespace.\n- The Service exposes port 80 and directs traffic to the same port on the selected pods.\n- The Service selects pods with the label 'name: payment' to route traffic to them.\n\nK8s manifest: sock-shop-2/manifests/17-queue-master-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: queue-master\n  labels:\n    name: queue-master\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: queue-master\n  template:\n    metadata:\n      labels:\n        name: queue-master\n    spec:\n      containers:\n      - name: queue-master\n        image: weaveworksdemos/queue-master:0.3.1\n        env:\n         - name: JAVA_OPTS\n           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false\n        resources:\n          limits:\n            cpu: 300m\n            memory: 500Mi\n          requests:\n            cpu: 100m\n            memory: 300Mi\n        ports:\n        - containerPort: 80\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/17-queue-master-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'queue-master' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'queue-master' application running.\n- The Deployment uses a container image 'weaveworksdemos/queue-master:0.3.1'.\n- Environment variables are set for the container, including Java options for memory management and garbage collection.\n- Resource limits and requests are defined, with a CPU limit of 300m and memory limit of 500Mi, and requests for 100m CPU and 300Mi memory.\n- The container exposes port 80.\n- The Deployment is configured to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/18-queue-master-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: queue-master\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: queue-master\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: queue-master\n```\nSummary of sock-shop-2/manifests/18-queue-master-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The service is named 'queue-master'.\n- It is annotated for Prometheus scraping, which means it is set up to be monitored by Prometheus.\n- The service is labeled with 'name: queue-master' for identification and selection purposes.\n- It is deployed in the 'sock-shop' namespace.\n- The service exposes port 80 and directs traffic to the same port on the target pods.\n- The service uses a selector to target pods with the label 'name: queue-master'.\n\nK8s manifest: sock-shop-2/manifests/19-rabbitmq-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: rabbitmq\n  labels:\n    name: rabbitmq\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: rabbitmq\n  template:\n    metadata:\n      labels:\n        name: rabbitmq\n      annotations:\n        prometheus.io/scrape: \"false\"\n    spec:\n      containers:\n      - name: rabbitmq\n        image: rabbitmq:3.6.8-management\n        ports:\n        - containerPort: 15672\n          name: management\n        - containerPort: 5672\n          name: rabbitmq\n        securityContext:\n          capabilities:\n            drop:\n              - all\n            add:\n              - CHOWN\n              - SETGID\n              - SETUID\n              - DAC_OVERRIDE\n          readOnlyRootFilesystem: true\n      - name: rabbitmq-exporter\n        image: kbudde/rabbitmq-exporter\n        ports:\n        - containerPort: 9090\n          name: exporter\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/19-rabbitmq-dep.yaml:\n- This manifest defines a Deployment for RabbitMQ in a Kubernetes cluster.\n- The Deployment is named 'rabbitmq' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the RabbitMQ pod running.\n- The Deployment uses a selector to match pods with the label 'name: rabbitmq'.\n- The pod template includes two containers: one for RabbitMQ and another for RabbitMQ Exporter.\n- The RabbitMQ container uses the image 'rabbitmq:3.6.8-management' and exposes two ports: 15672 for management and 5672 for RabbitMQ.\n- The RabbitMQ container has a security context that drops all capabilities and adds specific ones like CHOWN, SETGID, SETUID, and DAC_OVERRIDE, and it uses a read-only root filesystem.\n- The RabbitMQ Exporter container uses the image 'kbudde/rabbitmq-exporter' and exposes port 9090.\n- The Deployment is configured to run on nodes with the label 'beta.kubernetes.io/os: linux'.\n- Annotations are set to prevent Prometheus from scraping metrics from this pod.\n\nK8s manifest: sock-shop-2/manifests/20-rabbitmq-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: rabbitmq\n  annotations:\n        prometheus.io/scrape: 'true'\n        prometheus.io/port: '9090'\n  labels:\n    name: rabbitmq\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 5672\n    name: rabbitmq\n    targetPort: 5672\n  - port: 9090\n    name: exporter\n    targetPort: exporter\n    protocol: TCP\n  selector:\n    name: rabbitmq\n\n```\nSummary of sock-shop-2/manifests/20-rabbitmq-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'rabbitmq'.\n- It is annotated for Prometheus scraping on port 9090.\n- The Service is labeled with 'name: rabbitmq'.\n- It is deployed in the 'sock-shop' namespace.\n- The Service exposes two ports: 5672 for RabbitMQ and 9090 for an exporter.\n- The Service uses TCP protocol for communication.\n- It selects pods with the label 'name: rabbitmq' to route traffic to.\n\nK8s manifest: sock-shop-2/manifests/21-session-db-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: session-db\n  labels:\n    name: session-db\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: session-db\n  template:\n    metadata:\n      labels:\n        name: session-db\n      annotations:\n        prometheus.io.scrape: \"false\"\n    spec:\n      containers:\n      - name: session-db\n        image: redis:alpine\n        ports:\n        - name: redis\n          containerPort: 6379\n        securityContext:\n          capabilities:\n            drop:\n              - all\n            add:\n              - CHOWN\n              - SETGID\n              - SETUID\n          readOnlyRootFilesystem: true\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/21-session-db-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'session-db' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'session-db' pod running.\n- The pods are selected based on the label 'name: session-db'.\n- Each pod runs a single container using the 'redis:alpine' image.\n- The container exposes port 6379, which is commonly used by Redis.\n- Security settings are applied to drop all capabilities and only add CHOWN, SETGID, and SETUID.\n- The root filesystem of the container is set to be read-only for security purposes.\n- The pods are scheduled to run on nodes with the operating system labeled as Linux.\n\nK8s manifest: sock-shop-2/manifests/22-session-db-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: session-db\n  labels:\n    name: session-db\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 6379\n    targetPort: 6379\n  selector:\n    name: session-db\n\n```\nSummary of sock-shop-2/manifests/22-session-db-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'session-db'.\n- It is located in the 'sock-shop' namespace.\n- The Service listens on port 6379 and forwards traffic to the same port on the target pods.\n- It uses a selector to target pods with the label 'name: session-db'.\n\nK8s manifest: sock-shop-2/manifests/23-shipping-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: shipping\n  labels:\n    name: shipping\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: shipping\n  template:\n    metadata:\n      labels:\n        name: shipping\n    spec:\n      containers:\n      - name: shipping\n        image: weaveworksdemos/shipping:0.4.8\n        env:\n         - name: ZIPKIN\n           value: zipkin.jaeger.svc.cluster.local\n         - name: JAVA_OPTS\n           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false\n        resources:\n          limits:\n            cpu: 300m\n            memory: 500Mi\n          requests:\n            cpu: 100m\n            memory: 300Mi\n        ports:\n        - containerPort: 80\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n            add:\n              - NET_BIND_SERVICE\n          readOnlyRootFilesystem: true\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-volume\n      volumes:\n        - name: tmp-volume\n          emptyDir:\n            medium: Memory\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/23-shipping-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'shipping' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'shipping' application running.\n- The Deployment uses the Docker image 'weaveworksdemos/shipping:0.4.8'.\n- Environment variables are set for the application, including 'ZIPKIN' and 'JAVA_OPTS'.\n- Resource limits and requests are defined, with a CPU limit of 300m and memory limit of 500Mi, and requests for 100m CPU and 300Mi memory.\n- The application listens on port 80.\n- Security context is configured to run the container as a non-root user with user ID 10001, and with a read-only root filesystem.\n- The container has a volume mounted at '/tmp', which is an in-memory empty directory.\n- The Deployment is scheduled to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/24-shipping-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: shipping\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: shipping\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: shipping\n\n\n```\nSummary of sock-shop-2/manifests/24-shipping-svc.yaml:\n- This is a Kubernetes Service manifest.\n- The service is named 'shipping'.\n- It is annotated for Prometheus scraping with 'prometheus.io/scrape: true'.\n- The service is labeled with 'name: shipping'.\n- It is deployed in the 'sock-shop' namespace.\n- The service exposes port 80 and directs traffic to the same port on the selected pods.\n- It selects pods with the label 'name: shipping'.\n\nK8s manifest: sock-shop-2/manifests/25-user-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: user\n  labels:\n    name: user\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: user\n  template:\n    metadata:\n      labels:\n        name: user\n    spec:\n      containers:\n      - name: user\n        image: weaveworksdemos/user:0.4.7\n        resources:\n          limits:\n            cpu: 300m\n            memory: 200Mi\n          requests:\n            cpu: 100m\n            memory: 100Mi\n        ports:\n        - containerPort: 80\n        env:\n        - name: mongo\n          value: user-db:27017\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n            add:\n              - NET_BIND_SERVICE\n          readOnlyRootFilesystem: true\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 300\n          periodSeconds: 3\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 180\n          periodSeconds: 3\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/25-user-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'user' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'user' application running.\n- The Deployment uses the Docker image 'weaveworksdemos/user:0.4.7'.\n- Resource limits are set for the container: 300m CPU and 200Mi memory, with requests for 100m CPU and 100Mi memory.\n- The container listens on port 80.\n- An environment variable 'mongo' is set with the value 'user-db:27017'.\n- Security context is configured to run the container as a non-root user with user ID 10001.\n- The container has a read-only root filesystem and drops all capabilities except 'NET_BIND_SERVICE'.\n- Liveness and readiness probes are configured to check the '/health' endpoint on port 80.\n- The liveness probe starts after 300 seconds and checks every 3 seconds.\n- The readiness probe starts after 180 seconds and checks every 3 seconds.\n- The Deployment is scheduled to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/26-user-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: user\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: user\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: user\n\n\n```\nSummary of sock-shop-2/manifests/26-user-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The service is named 'user'.\n- It is annotated for Prometheus scraping, which means it is set up for monitoring.\n- The service is labeled with 'name: user'.\n- It is deployed in the 'sock-shop' namespace.\n- The service listens on port 80 and forwards traffic to the same port on the selected pods.\n- The service selects pods with the label 'name: user'.\n\nK8s manifest: sock-shop-2/manifests/27-user-db-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: user-db\n  labels:\n    name: user-db\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: user-db\n  template:\n    metadata:\n      labels:\n        name: user-db\n    spec:\n      containers:\n      - name: user-db\n        image: weaveworksdemos/user-db:0.3.0\n\n        ports:\n        - name: mongo\n          containerPort: 27017\n        securityContext:\n          capabilities:\n            drop:\n              - all\n            add:\n              - CHOWN\n              - SETGID\n              - SETUID\n          readOnlyRootFilesystem: true\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-volume\n      volumes:\n        - name: tmp-volume\n          emptyDir:\n            medium: Memory\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/27-user-db-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'user-db' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'user-db' pod running.\n- The pods are selected based on the label 'name: user-db'.\n- Each pod runs a single container using the image 'weaveworksdemos/user-db:0.3.0'.\n- The container exposes port 27017, which is typically used by MongoDB.\n- Security settings are applied to drop all capabilities and only add CHOWN, SETGID, and SETUID.\n- The root filesystem of the container is set to be read-only for security purposes.\n- A temporary volume is mounted at '/tmp' using an in-memory emptyDir volume.\n- The pods are scheduled to run on nodes with the operating system labeled as 'linux'.\n\nK8s manifest: sock-shop-2/manifests/28-user-db-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: user-db\n  labels:\n    name: user-db\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 27017\n    targetPort: 27017\n  selector:\n    name: user-db\n\n\n```\nSummary of sock-shop-2/manifests/28-user-db-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'user-db'.\n- It is located in the 'sock-shop' namespace.\n- The Service is configured to expose port 27017.\n- It targets the same port (27017) on the pods it selects.\n- The Service uses a selector to match pods with the label 'name: user-db'.\n\nThe resiliency issues/weaknesses in the system are as follows:\nIssue #0: Missing Resource Requests\n  - details: Pods may not get scheduled if the cluster is under resource pressure, leading to potential downtime.\n  - manifests having the issues: ['sock-shop-2/manifests/03-carts-db-dep.yaml', 'sock-shop-2/manifests/07-catalogue-db-dep.yaml', 'sock-shop-2/manifests/13-orders-db-dep.yaml', 'sock-shop-2/manifests/19-rabbitmq-dep.yaml', 'sock-shop-2/manifests/21-session-db-dep.yaml', 'sock-shop-2/manifests/27-user-db-dep.yaml']\n  - problematic config: The deployments for carts-db, catalogue-db, orders-db, rabbitmq, session-db, and user-db do not specify resource requests.\n\nIssue #1: Single Replica Deployment\n  - details: The front-end deployment has only one replica, which can lead to downtime if the pod fails.\n  - manifests having the issues: ['sock-shop-2/manifests/09-front-end-dep.yaml']\n  - problematic config: spec.replicas: 1\n\nIssue #2: High Initial Delay for Liveness Probe\n  - details: A high initial delay for the liveness probe can delay the detection of a failed pod, leading to longer downtime.\n  - manifests having the issues: ['sock-shop-2/manifests/05-catalogue-dep.yaml', 'sock-shop-2/manifests/09-front-end-dep.yaml', 'sock-shop-2/manifests/15-payment-dep.yaml', 'sock-shop-2/manifests/25-user-dep.yaml']\n  - problematic config: livenessProbe.initialDelaySeconds: 300\n\nIssue #3: Missing Port Specification in Service\n  - details: The service may not function correctly if the port is not specified, leading to connectivity issues.\n  - manifests having the issues: ['sock-shop-2/manifests/02-carts-svc.yaml', 'sock-shop-2/manifests/04-carts-db-svc.yaml', 'sock-shop-2/manifests/06-catalogue-svc.yaml', 'sock-shop-2/manifests/08-catalogue-db-svc.yaml', 'sock-shop-2/manifests/12-orders-svc.yaml', 'sock-shop-2/manifests/14-orders-db-svc.yaml', 'sock-shop-2/manifests/16-payment-svc.yaml', 'sock-shop-2/manifests/18-queue-master-svc.yaml', 'sock-shop-2/manifests/22-session-db-svc.yaml', 'sock-shop-2/manifests/24-shipping-svc.yaml', 'sock-shop-2/manifests/26-user-svc.yaml', 'sock-shop-2/manifests/28-user-db-svc.yaml']\n  - problematic config: The port field is commented out or not specified in the service manifests.\n\nThe expected type of application on the system (i.e., K8s manfests):\nThe 'sock-shop' application is an e-commerce platform that allows users to browse a catalogue of items, add items to a shopping cart, place orders, and make payments. It is a microservices-based application deployed on Kubernetes, with each service handling a specific aspect of the e-commerce process, such as managing the catalogue, processing orders, handling payments, and managing user sessions.; The manifests provided are part of a Kubernetes deployment for a microservices-based application called 'sock-shop'. This is evident from the namespace 'sock-shop' and the naming conventions used in the manifests, such as 'carts', 'catalogue', 'orders', 'payment', 'shipping', 'user', and their respective databases. These components are typical of an e-commerce application, where users can browse a catalogue, add items to a cart, place orders, and make payments. The use of services like RabbitMQ and Redis further supports the assumption of a complex, distributed application architecture, which is common in e-commerce platforms.\n\nSteady states of my system:\n2 steady states are defined.\n1st steady states:\n- Name: carts-db-pod-count\n- Description: The first issue to address is the 'Missing Resource Requests' in the 'carts-db' Deployment. This is a critical issue because without resource requests, the pods may not get scheduled if the cluster is under resource pressure, leading to potential downtime. To verify the steady state, we can measure the number of 'carts-db' pods running, ensuring it matches the expected replica count of 2. This will help us understand if the pods are being scheduled correctly despite the missing resource requests.\n- Threshold for the steady state: At least 2 'carts-db' pods must be running 95% of the time within a 1-minute monitoring period.; The steady state we are examining is the number of 'carts-db' pods running, which should match the expected replica count of 2. The current state shows that the pod count consistently matches the expected count of 2 over multiple checks. Given that the system is expected to maintain 2 replicas, the threshold should ensure that at least 2 pods are running to maintain redundancy and availability. To account for potential fluctuations, such as during pod restarts or updates, a reasonable tolerance can be applied. For example, allowing a brief period where the pod count might drop to 1, but it should recover quickly. Therefore, the threshold can be defined as maintaining at least 2 'carts-db' pods running 95% of the time within a 1-minute monitoring period. This allows for brief fluctuations while ensuring the system remains stable and available.\n- Whether the steady state meets the threshold is determined by the following Python script with K8s API:\n```\nimport os\nimport time\nimport argparse\nfrom kubernetes import client, config\nfrom unittest_base import K8sAPIBase\n\nclass TestCartsDBPodCount(K8sAPIBase):\n    def __init__(self):\n        super().__init__()\n        self.v1_apps = client.AppsV1Api()\n\n    def check_carts_db_pod_count(self, namespace, expected_count):\n        pod_count = 0\n        try:\n            resp = self.v1_apps.read_namespaced_deployment(name='carts-db', namespace=namespace)\n            pod_count = resp.status.replicas\n        except client.exceptions.ApiException as e:\n            print(f\"Exception when calling AppsV1Api->read_namespaced_deployment: {e}\")\n        return pod_count\n\n    def test_steady_state(self, duration):\n        namespace = 'sock-shop'\n        expected_count = 2\n        successful_checks = 0\n\n        for _ in range(duration):\n            pod_count = self.check_carts_db_pod_count(namespace, expected_count)\n            print(f\"Current 'carts-db' pod count: {pod_count}\")\n            if pod_count == expected_count:\n                successful_checks += 1\n            time.sleep(1)\n\n        # Calculate the percentage of successful checks\n        success_percentage = (successful_checks / duration) * 100\n        print(f\"Success percentage: {success_percentage}%\")\n\n        # Assert that the success percentage is at least 95%\n        assert success_percentage >= 95, f\"Pod count was not stable enough: {success_percentage}% < 95%\"\n\n\ndef main():\n    parser = argparse.ArgumentParser(description='Test carts-db pod count steady state.')\n    parser.add_argument('--duration', type=int, default=60, help='Duration to check the pod count in seconds')\n    args = parser.parse_args()\n\n    test = TestCartsDBPodCount()\n    test.test_steady_state(args.duration)\n\n\nif __name__ == '__main__':\n    main()\n\n```2nd steady states:\n- Name: front-end-pod-count\n- Description: The next issue to address is the 'Single Replica Deployment' in the 'front-end' Deployment. This is a critical issue because having only one replica can lead to downtime if the pod fails. To verify the steady state, we can measure the number of 'front-end' pods running, ensuring it matches the expected replica count of 1. This will help us understand if the pod is being scheduled correctly and remains available despite being a single replica. Monitoring the pod count will allow us to verify the system's resilience to potential failures.\n- Threshold for the steady state: At least 1 front-end pod must be running 95% of the time during a 1-minute monitoring period.; The current state of the system shows that the front-end pod count is consistently at 1, which matches the expected replica count as per the deployment configuration. Given that the system is currently stable with a single replica, the threshold should ensure that at least 1 front-end pod is running at all times. However, to account for potential fluctuations or brief disruptions, a reasonable tolerance should be included. Since the experiment must be completed within 1 minute, we can set a threshold that allows for a brief period where the pod count might temporarily drop below 1, but it should recover quickly. Therefore, the threshold can be defined as having at least 1 front-end pod running 95% of the time during the 1-minute monitoring period. This allows for a brief 3-second window where the pod count might be 0, but it should not persist beyond that.\n- Whether the steady state meets the threshold is determined by the following Python script with K8s API:\n```\nimport os\nimport time\nimport argparse\nfrom kubernetes import client, config\nfrom unittest_base import K8sAPIBase\n\nclass TestFrontEndPodCount(K8sAPIBase):\n    def __init__(self, namespace, duration):\n        super().__init__()\n        self.namespace = namespace\n        self.duration = duration\n\n    def test_front_end_pod_count(self):\n        pod_label_selector = 'name=front-end'\n        successful_checks = 0\n\n        # Check the pod count every second for the specified duration\n        for _ in range(self.duration):\n            pods = self.v1.list_namespaced_pod(namespace=self.namespace, label_selector=pod_label_selector)\n            pod_count = len(pods.items)\n            print(f'Current front-end pod count: {pod_count}')\n\n            # Increment successful checks if pod count is 1 or more\n            if pod_count >= 1:\n                successful_checks += 1\n\n            time.sleep(1)\n\n        # Calculate the percentage of successful checks\n        success_rate = (successful_checks / self.duration) * 100\n        print(f'Success rate: {success_rate}%')\n\n        # Assert that the success rate meets the 95% threshold\n        assert success_rate >= 95, f\"Front-end pod count did not meet the 95% threshold. Success rate: {success_rate}%\"\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Test front-end pod count in the sock-shop namespace.')\n    parser.add_argument('--duration', type=int, default=60, help='Duration to check the pod count in seconds.')\n    args = parser.parse_args()\n\n    test = TestFrontEndPodCount(namespace='sock-shop', duration=args.duration)\n    test.test_front_end_pod_count()\n```\n\nA fault scenario that may occur in my system and may affect the steady states:\n\nAn assumed fault scenario is as follows:\n- Event: Black Friday Sale\n- Used Chaos Engineering tool: Chaos Mesh\n- Faults to simulate the event: [[{'name': 'StressChaos', 'name_id': 0, 'scope': {'namespace': 'sock-shop', 'label': 'name=carts-db'}}], [{'name': 'PodChaos', 'name_id': 1, 'scope': {'namespace': 'sock-shop', 'label': 'name=front-end'}}], [{'name': 'NetworkChaos', 'name_id': 2, 'scope': {'namespace': 'sock-shop', 'label': 'name=front-end'}}]]\n- Description: During a Black Friday sale, the system is expected to handle a significant increase in traffic and load. This event will test the system's ability to maintain steady states under high demand. The system's weaknesses, such as missing resource requests and single replica deployments, can lead to potential downtime or degraded performance. To simulate this event, we will inject faults that target these weaknesses. First, we will use StressChaos to simulate high CPU and memory usage on the 'carts-db' pods, which lack resource requests, to see if they can maintain the required pod count. Next, we will use PodChaos to kill the single replica 'front-end' pod to test its resilience and recovery. Finally, we will introduce NetworkChaos to simulate network latency on the 'front-end' service, which will test the system's ability to handle network issues during high traffic. This sequence of fault injections will simulate the phenomena of a Black Friday sale, where high load, potential failures, and network issues are common.\n\nPlease follow the instructions below regarding Chaos Engineering as necessary:\n- The Chaos-Engineering experiment must be completed within 1 minute.\n\n- When using k6 in steady-state definition, always select a request URL from the following options (other requests are invalid):\n  1. http://front-end.sock-shop.svc.cluster.local/\n  2. http://front-end.sock-shop.svc.cluster.local/catalogue?size=10\n  3. http://front-end.sock-shop.svc.cluster.local/detail.html?id=<ID>\n  Replace <ID> with an available ID: [`03fef6ac-1896-4ce8-bd69-b798f85c6e0b`, `3395a43e-2d88-40de-b95f-e00e1502085b`, `510a0d7e-8e83-4193-b483-e27e09ddc34d`, `808a2de1-1aaa-4c25-a9b9-6612e8f29a38`, `819e1fbf-8b7e-4f6d-811f-693534916a8b`, `837ab141-399e-4c1f-9abc-bace40296bac`, `a0a4f044-b040-410d-8ead-4de0446aec7e`, `d3588630-ad8e-49df-bbd7-3167f7efb246`, `zzz4f044-b040-410d-8ead-4de0446aec7e`]\n  4. http://front-end.sock-shop.svc.cluster.local/category/\n  5. http://front-end.sock-shop.svc.cluster.local/category?tags=<TAG>\n  Replace <TAG> with an available tag: [`magic`, `action`, `blue`, `brown`, `black`, `sport`, `formal`, `red`, `green`, `skin`, `geek`]\n  6. http://front-end.sock-shop.svc.cluster.local/basket.html\n\nNow, please detail the parameters of the fault \"StressChaos({'namespace': 'sock-shop', 'label': 'name=carts-db'})\".\nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {\"properties\": {\"foo\": {\"title\": \"Foo\", \"description\": \"a list of strings\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"foo\"]}\nthe object {\"foo\": [\"bar\", \"baz\"]} is a well-formatted instance of the schema. The object {\"properties\": {\"foo\": [\"bar\", \"baz\"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{\"properties\": {\"mode\": {\"title\": \"Mode\", \"description\": \"Specifies the mode of the experiment. The mode options include 'one' (selecting a random Pod), 'all' (selecting all eligible Pods), 'fixed' (selecting a specified number of eligible Pods), 'fixed-percent' (selecting a specified percentage of Pods from the eligible Pods), and 'random-max-percent' (selecting the maximum percentage of Pods from the eligible Pods)\", \"example\": \"one\", \"enum\": [\"one\", \"all\", \"fixed\", \"fixed-percent\", \"random-max-percent\"], \"type\": \"string\"}, \"value\": {\"title\": \"Value\", \"description\": \"Provides parameters for the mode configuration, depending on mode.For example, when mode is set to fixed-percent, value specifies the percentage of Pods.\", \"example\": \"1\", \"type\": \"string\"}, \"stressors\": {\"title\": \"Stressors\", \"description\": \"Specifies the stress of CPU or memory\", \"dafault\": null, \"allOf\": [{\"$ref\": \"#/definitions/Stressors\"}]}, \"stressngStressors\": {\"title\": \"Stressngstressors\", \"description\": \"Specifies the stres-ng parameter to reach richer stress injection\", \"example\": \"--clone 2\", \"type\": \"string\"}, \"containerNames\": {\"title\": \"Containernames\", \"description\": \"Specifies the name of the container into which the fault is injected.\", \"example\": [\"nginx\"], \"type\": \"array\", \"items\": {\"type\": \"string\"}}, \"selector\": {\"title\": \"Selector\", \"description\": \"Specifies the target Pod.\", \"allOf\": [{\"$ref\": \"#/definitions/Selectors\"}]}}, \"required\": [\"mode\", \"selector\"], \"definitions\": {\"MemoryStressor\": {\"title\": \"MemoryStressor\", \"type\": \"object\", \"properties\": {\"workers\": {\"title\": \"Workers\", \"description\": \"Specifies the number of threads that apply memory stress\", \"example\": 1, \"type\": \"integer\"}, \"size\": {\"title\": \"Size\", \"description\": \"Specifies the memory size to be occupied or a percentage of the total memory size. The final sum of the occupied memory size is size.\", \"example\": \"256MB\", \"type\": \"string\"}, \"oomScoreAdj\": {\"title\": \"Oomscoreadj\", \"description\": \"Specifies the oom_score_adj of the stress process.\", \"example\": -1000, \"type\": \"integer\"}}}, \"CPUStressor\": {\"title\": \"CPUStressor\", \"type\": \"object\", \"properties\": {\"workers\": {\"title\": \"Workers\", \"description\": \"Specifies the number of threads that apply CPU stress\", \"example\": 1, \"type\": \"integer\"}, \"load\": {\"title\": \"Load\", \"description\": \"Specifies the percentage of CPU occupied. 0 means that no additional CPU is added, and 100 refers to full load. The final sum of CPU load is workers * load.\", \"example\": 50, \"type\": \"integer\"}}}, \"Stressors\": {\"title\": \"Stressors\", \"type\": \"object\", \"properties\": {\"memory\": {\"title\": \"Memory\", \"description\": \"Specifies the memory stress\", \"allOf\": [{\"$ref\": \"#/definitions/MemoryStressor\"}]}, \"cpu\": {\"title\": \"Cpu\", \"description\": \"Specifies the CPU stress\", \"allOf\": [{\"$ref\": \"#/definitions/CPUStressor\"}]}}}, \"SetBasedRequirements\": {\"title\": \"SetBasedRequirements\", \"type\": \"object\", \"properties\": {\"key\": {\"title\": \"Key\", \"description\": \"Label key\", \"type\": \"string\"}, \"operator\": {\"title\": \"Operator\", \"description\": \"Select an operator.\", \"enum\": [\"In\", \"NotIn\", \"Exists\", \"DoesNotExist\"], \"type\": \"string\"}, \"values\": {\"title\": \"Values\", \"description\": \"Label values. The values set must be non-empty in the case of In and NotIn.\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"key\", \"operator\", \"values\"]}, \"Selectors\": {\"title\": \"Selectors\", \"type\": \"object\", \"properties\": {\"namespaces\": {\"title\": \"Namespaces\", \"description\": \"Specifies the namespace of the experiment's target Pod. If this selector is None, Chaos Mesh will set it to the namespace of the current Chaos experiment.\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}, \"labelSelectors\": {\"title\": \"Labelselectors\", \"description\": \"Specifies the label-key/value pairs that the experiment's target Pod must have. If multiple labels are specified, the experiment target must have all the labels specified by this selector.\", \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"expressionSelectors\": {\"title\": \"Expressionselectors\", \"description\": \"Specifies a set of expressions that define the label's rules to specifiy the experiment's target Pod.\", \"example\": [{\"key\": \"tier\", \"operator\": \"In\", \"values\": [\"cache\"]}, {\"key\": \"environment\", \"operator\": \"NotIn\", \"values\": [\"dev\"]}], \"type\": \"array\", \"items\": {\"$ref\": \"#/definitions/SetBasedRequirements\"}}, \"annotationSelectors\": {\"title\": \"Annotationselectors\", \"description\": \"Specifies the annotation-key/value pairs that the experiment's target Pod must have. If multiple annotations are specified, the experiment target must have all annotations specified by this selector.\", \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"fieldSelectors\": {\"title\": \"Fieldselectors\", \"description\": \"Specifies the field-key/value pairs of the experiment's target Pod. If multiple fields are specified, the experiment target must have all fields set by this selector.\", \"example\": {\"metadata.name\": \"my-pod\", \"metadata.namespace\": \"dafault\"}, \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"podPhaseSelectors\": {\"title\": \"Podphaseselectors\", \"description\": \"Specifies the phase of the experiment's target Pod. If this selector is None, the target Pod's phase is not limited.\", \"type\": \"array\", \"items\": {\"enum\": [\"Pending\", \"Running\", \"Succeeded\", \"Failed\", \"Unknown\"], \"type\": \"string\"}}, \"nodeSelectors\": {\"title\": \"Nodeselectors\", \"description\": \"Specifies the node-label-key/value pairs to which the experiment's target Pod belongs.\", \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"nodes\": {\"title\": \"Nodes\", \"description\": \"Specifies the node to which the experiment's target Pod belongs. The target Pod can only belong to one node in the configured node list. If multiple node labels are specified, the node to which the experiment's target Pod belongs must have all labels specified by this selector.\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}, \"pods\": {\"title\": \"Pods\", \"description\": \"Specifies the namespaces and list of the experiment's target Pods. If you have specified this selector, Chaos Mesh ignores other configured selectors.\", \"example\": {\"default\": [\"pod-0\", \"pod-2\"]}, \"type\": \"object\", \"additionalProperties\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}}}}\n```\nAI: ```json\n{\"mode\":"
            ],
            "{\"mode\": \"all\", \"selector\": {\"namespaces\": [\"sock-shop\"], \"labelSelectors\": {\"name\": \"carts-db\"}}, \"stressors\": {\"cpu\": {\"workers\": 2, \"load\": 100}, \"memory\": {\"workers\": 2, \"size\": \"256MB\"}}, \"stressngStressors\": \"\", \"containerNames\": [\"carts-db\"]}",
            [
                "System: You are a helpful AI assistant for Chaos Engineering.\nGiven k8s manifests that defines a network system, its steady states, and a fault type that may affect the steady states in the system, please detail the parameters of the fault.\nAlways keep the following rules:\n- Pay attention to namespace specification. If the namespace is specified in the manifest, it is deployed with the namespace. If not, it is deployed with the 'default' namespace.\n- The parameters follow the format of Chaos Mesh.\nHuman: Here is the overview of my system:\nThe system consists of the following K8s manifest(s):K8s manifest: sock-shop-2/manifests/00-sock-shop-ns.yaml\n```yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: sock-shop\n\n```\nSummary of sock-shop-2/manifests/00-sock-shop-ns.yaml:\n- This manifest defines a Kubernetes Namespace.\n- The Namespace is named 'sock-shop'.\n- Namespaces are used to organize and manage resources within a Kubernetes cluster, providing a way to divide cluster resources between multiple users or teams.\n\nK8s manifest: sock-shop-2/manifests/01-carts-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: carts\n  labels:\n    name: carts\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: carts\n  template:\n    metadata:\n      labels:\n        name: carts\n    spec:\n      containers:\n      - name: carts\n        image: weaveworksdemos/carts:0.4.8\n        env:\n         - name: JAVA_OPTS\n           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false\n        resources:\n          limits:\n            cpu: 300m\n            memory: 500Mi\n          requests:\n            cpu: 100m\n            memory: 200Mi\n        ports:\n        - containerPort: 80\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n            add:\n              - NET_BIND_SERVICE\n          readOnlyRootFilesystem: true\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-volume\n      volumes:\n        - name: tmp-volume\n          emptyDir:\n            medium: Memory\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/01-carts-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'carts' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'carts' application running.\n- The Deployment uses the Docker image 'weaveworksdemos/carts:0.4.8'.\n- Environment variables are set for Java options to optimize memory usage and disable certain features.\n- Resource limits and requests are defined, with a maximum of 300m CPU and 500Mi memory, and a minimum of 100m CPU and 200Mi memory.\n- The application listens on port 80 within the container.\n- Security settings ensure the container runs as a non-root user with specific capabilities and a read-only root filesystem.\n- A temporary volume is mounted at '/tmp' using an in-memory empty directory.\n- The Deployment is scheduled to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/02-carts-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: carts\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: carts\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: carts\n\n```\nSummary of sock-shop-2/manifests/02-carts-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'carts'.\n- It is annotated for Prometheus scraping with 'prometheus.io/scrape: true'.\n- The Service is labeled with 'name: carts'.\n- It is deployed in the 'sock-shop' namespace.\n- The Service exposes port 80 and directs traffic to the same port on the target pods.\n- It selects pods with the label 'name: carts' to route traffic to.\n\nK8s manifest: sock-shop-2/manifests/03-carts-db-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: carts-db\n  labels:\n    name: carts-db\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: carts-db\n  template:\n    metadata:\n      labels:\n        name: carts-db\n    spec:\n      containers:\n      - name: carts-db\n        image: mongo\n        ports:\n        - name: mongo\n          containerPort: 27017\n        securityContext:\n          capabilities:\n            drop:\n              - all\n            add:\n              - CHOWN\n              - SETGID\n              - SETUID\n          readOnlyRootFilesystem: true\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-volume\n      volumes:\n        - name: tmp-volume\n          emptyDir:\n            medium: Memory\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/03-carts-db-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'carts-db' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'carts-db' pod running.\n- The pods are selected based on the label 'name: carts-db'.\n- Each pod runs a single container using the 'mongo' image.\n- The container exposes port 27017, which is the default port for MongoDB.\n- Security settings are applied to drop all capabilities and only add CHOWN, SETGID, and SETUID.\n- The root filesystem of the container is set to read-only for security purposes.\n- A temporary volume is mounted at '/tmp' using an in-memory emptyDir volume.\n- The pods are scheduled to run on nodes with the operating system labeled as 'linux'.\n\nK8s manifest: sock-shop-2/manifests/04-carts-db-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: carts-db\n  labels:\n    name: carts-db\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 27017\n    targetPort: 27017\n  selector:\n    name: carts-db\n\n```\nSummary of sock-shop-2/manifests/04-carts-db-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'carts-db'.\n- It is labeled with 'name: carts-db'.\n- The Service is created in the 'sock-shop' namespace.\n- It exposes port 27017 and directs traffic to the same port on the target pods.\n- The Service selects pods with the label 'name: carts-db' to route traffic to them.\n\nK8s manifest: sock-shop-2/manifests/05-catalogue-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: catalogue\n  labels:\n    name: catalogue\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: catalogue\n  template:\n    metadata:\n      labels:\n        name: catalogue\n    spec:\n      containers:\n      - name: catalogue\n        image: weaveworksdemos/catalogue:0.3.5\n        command: [\"/app\"]\n        args:\n        - -port=80\n        resources:\n          limits:\n            cpu: 200m\n            memory: 200Mi\n          requests:\n            cpu: 100m\n            memory: 100Mi\n        ports:\n        - containerPort: 80\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n            add:\n              - NET_BIND_SERVICE\n          readOnlyRootFilesystem: true\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 300\n          periodSeconds: 3\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 180\n          periodSeconds: 3\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/05-catalogue-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'catalogue' and is part of the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'catalogue' application running.\n- The Deployment uses the Docker image 'weaveworksdemos/catalogue:0.3.5'.\n- The application runs with the command '/app' and listens on port 80.\n- Resource limits are set to 200m CPU and 200Mi memory, with requests for 100m CPU and 100Mi memory.\n- The container is configured to run as a non-root user with user ID 10001.\n- Security settings include dropping all capabilities except 'NET_BIND_SERVICE' and using a read-only root filesystem.\n- Liveness and readiness probes are configured to check the '/health' endpoint on port 80, with initial delays of 300 and 180 seconds respectively.\n- The Deployment is scheduled to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/06-catalogue-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: catalogue\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: catalogue\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: catalogue\n\n```\nSummary of sock-shop-2/manifests/06-catalogue-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'catalogue'.\n- It is annotated to enable Prometheus scraping with 'prometheus.io/scrape: true'.\n- The Service is labeled with 'name: catalogue'.\n- It is deployed in the 'sock-shop' namespace.\n- The Service exposes port 80 and directs traffic to the same port on the selected pods.\n- It selects pods with the label 'name: catalogue' to route traffic to.\n\nK8s manifest: sock-shop-2/manifests/07-catalogue-db-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: catalogue-db\n  labels:\n    name: catalogue-db\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: catalogue-db\n  template:\n    metadata:\n      labels:\n        name: catalogue-db\n    spec:\n      containers:\n      - name: catalogue-db\n        image: weaveworksdemos/catalogue-db:0.3.0\n        env:\n          - name: MYSQL_ROOT_PASSWORD\n            value: fake_password\n          - name: MYSQL_DATABASE\n            value: socksdb\n        ports:\n        - name: mysql\n          containerPort: 3306\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/07-catalogue-db-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'catalogue-db'.\n- It is located in the 'sock-shop' namespace.\n- The Deployment will create 2 replicas of the pod.\n- Each pod will run a container from the image 'weaveworksdemos/catalogue-db:0.3.0'.\n- The container is configured with environment variables for 'MYSQL_ROOT_PASSWORD' and 'MYSQL_DATABASE'.\n- The container exposes port 3306, which is typically used for MySQL.\n- The pods are scheduled to run on nodes with the operating system labeled as Linux.\n\nK8s manifest: sock-shop-2/manifests/08-catalogue-db-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: catalogue-db\n  labels:\n    name: catalogue-db\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 3306\n    targetPort: 3306\n  selector:\n    name: catalogue-db\n\n```\nSummary of sock-shop-2/manifests/08-catalogue-db-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'catalogue-db'.\n- It is located in the 'sock-shop' namespace.\n- The Service is configured to expose port 3306.\n- It targets the same port (3306) on the pods.\n- The Service selects pods with the label 'name: catalogue-db'.\n\nK8s manifest: sock-shop-2/manifests/09-front-end-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: front-end\n  namespace: sock-shop\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      name: front-end\n  template:\n    metadata:\n      labels:\n        name: front-end\n    spec:\n      containers:\n      - name: front-end\n        image: weaveworksdemos/front-end:0.3.12\n        resources:\n          limits:\n            cpu: 300m\n            memory: 1000Mi\n          requests:\n            cpu: 100m\n            memory: 300Mi\n        ports:\n        - containerPort: 8079\n        env:\n        - name: SESSION_REDIS\n          value: \"true\"\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n          readOnlyRootFilesystem: true\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 8079\n          initialDelaySeconds: 300\n          periodSeconds: 3\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 8079\n          initialDelaySeconds: 30\n          periodSeconds: 3\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n```\nSummary of sock-shop-2/manifests/09-front-end-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'front-end' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 1 replica of the front-end application running.\n- The Deployment uses a selector to match pods with the label 'name: front-end'.\n- The pod template includes a single container named 'front-end'.\n- The container uses the image 'weaveworksdemos/front-end:0.3.12'.\n- Resource limits are set for the container: 300m CPU and 1000Mi memory.\n- Resource requests are set for the container: 100m CPU and 300Mi memory.\n- The container exposes port 8079.\n- An environment variable 'SESSION_REDIS' is set to 'true'.\n- Security context is configured to run the container as a non-root user with user ID 10001.\n- All additional Linux capabilities are dropped, and the root filesystem is set to read-only.\n- A liveness probe is configured to check the '/' path on port 8079, with an initial delay of 300 seconds and a period of 3 seconds.\n- A readiness probe is also configured to check the '/' path on port 8079, with an initial delay of 30 seconds and a period of 3 seconds.\n- The node selector ensures that the pod runs on nodes with the operating system labeled as Linux.\n\nK8s manifest: sock-shop-2/manifests/10-front-end-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: front-end\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: front-end\n  namespace: sock-shop\nspec:\n  type: NodePort\n  ports:\n  - port: 80\n    targetPort: 8079\n    nodePort: 30001\n  selector:\n    name: front-end\n\n```\nSummary of sock-shop-2/manifests/10-front-end-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'front-end'.\n- It is located in the 'sock-shop' namespace.\n- The Service type is 'NodePort', which exposes the service on each Node's IP at a static port.\n- It listens on port 80 and forwards traffic to target port 8079 on the pods.\n- The nodePort is set to 30001, which is the port on each node where the service can be accessed externally.\n- The Service is configured to be scraped by Prometheus for monitoring, as indicated by the annotation 'prometheus.io/scrape: true'.\n- It selects pods with the label 'name: front-end' to route traffic to.\n\nK8s manifest: sock-shop-2/manifests/11-orders-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: orders\n  labels:\n    name: orders\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: orders\n  template:\n    metadata:\n      labels:\n        name: orders\n    spec:\n      containers:\n      - name: orders\n        image: weaveworksdemos/orders:0.4.7\n        env:\n         - name: JAVA_OPTS\n           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false\n        resources:\n          limits:\n            cpu: 500m\n            memory: 500Mi\n          requests:\n            cpu: 100m\n            memory: 300Mi\n        ports:\n        - containerPort: 80\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n            add:\n              - NET_BIND_SERVICE\n          readOnlyRootFilesystem: true\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-volume\n      volumes:\n        - name: tmp-volume\n          emptyDir:\n            medium: Memory\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/11-orders-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'orders' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'orders' application running.\n- The Deployment uses the 'weaveworksdemos/orders:0.4.7' Docker image for the container.\n- Environment variables are set for Java options to optimize memory usage and disable certain features.\n- Resource limits and requests are defined, with a maximum of 500m CPU and 500Mi memory, and a minimum of 100m CPU and 300Mi memory.\n- The container listens on port 80.\n- Security settings ensure the container runs as a non-root user with specific capabilities and a read-only root filesystem.\n- A temporary volume is mounted at '/tmp' using an in-memory empty directory.\n- The Deployment is scheduled to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/12-orders-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: orders\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: orders\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: orders\n\n```\nSummary of sock-shop-2/manifests/12-orders-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'orders'.\n- It is annotated to enable Prometheus scraping with 'prometheus.io/scrape: true'.\n- The Service is labeled with 'name: orders'.\n- It is deployed in the 'sock-shop' namespace.\n- The Service exposes port 80 and directs traffic to the same port on the target pods.\n- It uses a selector to match pods with the label 'name: orders'.\n\nK8s manifest: sock-shop-2/manifests/13-orders-db-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: orders-db\n  labels:\n    name: orders-db\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: orders-db\n  template:\n    metadata:\n      labels:\n        name: orders-db\n    spec:\n      containers:\n      - name: orders-db\n        image: mongo\n        ports:\n        - name: mongo\n          containerPort: 27017\n        securityContext:\n          capabilities:\n            drop:\n              - all\n            add:\n              - CHOWN\n              - SETGID\n              - SETUID\n          readOnlyRootFilesystem: true\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-volume\n      volumes:\n        - name: tmp-volume\n          emptyDir:\n            medium: Memory\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/13-orders-db-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'orders-db' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'orders-db' pod running.\n- The pods are selected based on the label 'name: orders-db'.\n- Each pod runs a single container using the 'mongo' image.\n- The container exposes port 27017, which is the default port for MongoDB.\n- Security context is set to drop all capabilities and add only CHOWN, SETGID, and SETUID, with a read-only root filesystem.\n- A volume named 'tmp-volume' is mounted at '/tmp' and uses an in-memory empty directory.\n- The pods are scheduled to run on nodes with the operating system labeled as 'linux'.\n\nK8s manifest: sock-shop-2/manifests/14-orders-db-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: orders-db\n  labels:\n    name: orders-db\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 27017\n    targetPort: 27017\n  selector:\n    name: orders-db\n\n```\nSummary of sock-shop-2/manifests/14-orders-db-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'orders-db'.\n- It is located in the 'sock-shop' namespace.\n- The Service is configured to expose port 27017.\n- It targets the same port (27017) on the pods.\n- The Service selects pods with the label 'name: orders-db'.\n\nK8s manifest: sock-shop-2/manifests/15-payment-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: payment\n  labels:\n    name: payment\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: payment\n  template:\n    metadata:\n      labels:\n        name: payment\n    spec:\n      containers:\n      - name: payment\n        image: weaveworksdemos/payment:0.4.3\n        resources:\n          limits:\n            cpu: 200m\n            memory: 200Mi\n          requests:\n            cpu: 99m\n            memory: 100Mi\n        ports:\n        - containerPort: 80\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n            add:\n              - NET_BIND_SERVICE\n          readOnlyRootFilesystem: true\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 300\n          periodSeconds: 3\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 180\n          periodSeconds: 3\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/15-payment-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'payment' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'payment' application running.\n- The Deployment uses the Docker image 'weaveworksdemos/payment:0.4.3'.\n- Resource limits are set for the container, with a maximum of 200m CPU and 200Mi memory, and requests for 99m CPU and 100Mi memory.\n- The container listens on port 80.\n- Security settings ensure the container runs as a non-root user with user ID 10001, and the root filesystem is read-only.\n- The container has a liveness probe and a readiness probe, both checking the '/health' endpoint on port 80, with initial delays of 300 and 180 seconds respectively.\n- The Deployment is configured to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/16-payment-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: payment\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: payment\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: payment\n\n```\nSummary of sock-shop-2/manifests/16-payment-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'payment'.\n- It is annotated for Prometheus scraping, which means it is set up for monitoring.\n- The Service is labeled with 'name: payment'.\n- It is deployed in the 'sock-shop' namespace.\n- The Service exposes port 80 and directs traffic to the same port on the selected pods.\n- The Service selects pods with the label 'name: payment' to route traffic to them.\n\nK8s manifest: sock-shop-2/manifests/17-queue-master-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: queue-master\n  labels:\n    name: queue-master\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: queue-master\n  template:\n    metadata:\n      labels:\n        name: queue-master\n    spec:\n      containers:\n      - name: queue-master\n        image: weaveworksdemos/queue-master:0.3.1\n        env:\n         - name: JAVA_OPTS\n           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false\n        resources:\n          limits:\n            cpu: 300m\n            memory: 500Mi\n          requests:\n            cpu: 100m\n            memory: 300Mi\n        ports:\n        - containerPort: 80\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/17-queue-master-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'queue-master' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'queue-master' application running.\n- The Deployment uses a container image 'weaveworksdemos/queue-master:0.3.1'.\n- Environment variables are set for the container, including Java options for memory management and garbage collection.\n- Resource limits and requests are defined, with a CPU limit of 300m and memory limit of 500Mi, and requests for 100m CPU and 300Mi memory.\n- The container exposes port 80.\n- The Deployment is configured to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/18-queue-master-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: queue-master\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: queue-master\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: queue-master\n```\nSummary of sock-shop-2/manifests/18-queue-master-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The service is named 'queue-master'.\n- It is annotated for Prometheus scraping, which means it is set up to be monitored by Prometheus.\n- The service is labeled with 'name: queue-master' for identification and selection purposes.\n- It is deployed in the 'sock-shop' namespace.\n- The service exposes port 80 and directs traffic to the same port on the target pods.\n- The service uses a selector to target pods with the label 'name: queue-master'.\n\nK8s manifest: sock-shop-2/manifests/19-rabbitmq-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: rabbitmq\n  labels:\n    name: rabbitmq\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: rabbitmq\n  template:\n    metadata:\n      labels:\n        name: rabbitmq\n      annotations:\n        prometheus.io/scrape: \"false\"\n    spec:\n      containers:\n      - name: rabbitmq\n        image: rabbitmq:3.6.8-management\n        ports:\n        - containerPort: 15672\n          name: management\n        - containerPort: 5672\n          name: rabbitmq\n        securityContext:\n          capabilities:\n            drop:\n              - all\n            add:\n              - CHOWN\n              - SETGID\n              - SETUID\n              - DAC_OVERRIDE\n          readOnlyRootFilesystem: true\n      - name: rabbitmq-exporter\n        image: kbudde/rabbitmq-exporter\n        ports:\n        - containerPort: 9090\n          name: exporter\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/19-rabbitmq-dep.yaml:\n- This manifest defines a Deployment for RabbitMQ in a Kubernetes cluster.\n- The Deployment is named 'rabbitmq' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the RabbitMQ pod running.\n- The Deployment uses a selector to match pods with the label 'name: rabbitmq'.\n- The pod template includes two containers: one for RabbitMQ and another for RabbitMQ Exporter.\n- The RabbitMQ container uses the image 'rabbitmq:3.6.8-management' and exposes two ports: 15672 for management and 5672 for RabbitMQ.\n- The RabbitMQ container has a security context that drops all capabilities and adds specific ones like CHOWN, SETGID, SETUID, and DAC_OVERRIDE, and it uses a read-only root filesystem.\n- The RabbitMQ Exporter container uses the image 'kbudde/rabbitmq-exporter' and exposes port 9090.\n- The Deployment is configured to run on nodes with the label 'beta.kubernetes.io/os: linux'.\n- Annotations are set to prevent Prometheus from scraping metrics from this pod.\n\nK8s manifest: sock-shop-2/manifests/20-rabbitmq-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: rabbitmq\n  annotations:\n        prometheus.io/scrape: 'true'\n        prometheus.io/port: '9090'\n  labels:\n    name: rabbitmq\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 5672\n    name: rabbitmq\n    targetPort: 5672\n  - port: 9090\n    name: exporter\n    targetPort: exporter\n    protocol: TCP\n  selector:\n    name: rabbitmq\n\n```\nSummary of sock-shop-2/manifests/20-rabbitmq-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'rabbitmq'.\n- It is annotated for Prometheus scraping on port 9090.\n- The Service is labeled with 'name: rabbitmq'.\n- It is deployed in the 'sock-shop' namespace.\n- The Service exposes two ports: 5672 for RabbitMQ and 9090 for an exporter.\n- The Service uses TCP protocol for communication.\n- It selects pods with the label 'name: rabbitmq' to route traffic to.\n\nK8s manifest: sock-shop-2/manifests/21-session-db-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: session-db\n  labels:\n    name: session-db\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: session-db\n  template:\n    metadata:\n      labels:\n        name: session-db\n      annotations:\n        prometheus.io.scrape: \"false\"\n    spec:\n      containers:\n      - name: session-db\n        image: redis:alpine\n        ports:\n        - name: redis\n          containerPort: 6379\n        securityContext:\n          capabilities:\n            drop:\n              - all\n            add:\n              - CHOWN\n              - SETGID\n              - SETUID\n          readOnlyRootFilesystem: true\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/21-session-db-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'session-db' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'session-db' pod running.\n- The pods are selected based on the label 'name: session-db'.\n- Each pod runs a single container using the 'redis:alpine' image.\n- The container exposes port 6379, which is commonly used by Redis.\n- Security settings are applied to drop all capabilities and only add CHOWN, SETGID, and SETUID.\n- The root filesystem of the container is set to be read-only for security purposes.\n- The pods are scheduled to run on nodes with the operating system labeled as Linux.\n\nK8s manifest: sock-shop-2/manifests/22-session-db-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: session-db\n  labels:\n    name: session-db\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 6379\n    targetPort: 6379\n  selector:\n    name: session-db\n\n```\nSummary of sock-shop-2/manifests/22-session-db-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'session-db'.\n- It is located in the 'sock-shop' namespace.\n- The Service listens on port 6379 and forwards traffic to the same port on the target pods.\n- It uses a selector to target pods with the label 'name: session-db'.\n\nK8s manifest: sock-shop-2/manifests/23-shipping-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: shipping\n  labels:\n    name: shipping\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: shipping\n  template:\n    metadata:\n      labels:\n        name: shipping\n    spec:\n      containers:\n      - name: shipping\n        image: weaveworksdemos/shipping:0.4.8\n        env:\n         - name: ZIPKIN\n           value: zipkin.jaeger.svc.cluster.local\n         - name: JAVA_OPTS\n           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false\n        resources:\n          limits:\n            cpu: 300m\n            memory: 500Mi\n          requests:\n            cpu: 100m\n            memory: 300Mi\n        ports:\n        - containerPort: 80\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n            add:\n              - NET_BIND_SERVICE\n          readOnlyRootFilesystem: true\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-volume\n      volumes:\n        - name: tmp-volume\n          emptyDir:\n            medium: Memory\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/23-shipping-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'shipping' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'shipping' application running.\n- The Deployment uses the Docker image 'weaveworksdemos/shipping:0.4.8'.\n- Environment variables are set for the application, including 'ZIPKIN' and 'JAVA_OPTS'.\n- Resource limits and requests are defined, with a CPU limit of 300m and memory limit of 500Mi, and requests for 100m CPU and 300Mi memory.\n- The application listens on port 80.\n- Security context is configured to run the container as a non-root user with user ID 10001, and with a read-only root filesystem.\n- The container has a volume mounted at '/tmp', which is an in-memory empty directory.\n- The Deployment is scheduled to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/24-shipping-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: shipping\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: shipping\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: shipping\n\n\n```\nSummary of sock-shop-2/manifests/24-shipping-svc.yaml:\n- This is a Kubernetes Service manifest.\n- The service is named 'shipping'.\n- It is annotated for Prometheus scraping with 'prometheus.io/scrape: true'.\n- The service is labeled with 'name: shipping'.\n- It is deployed in the 'sock-shop' namespace.\n- The service exposes port 80 and directs traffic to the same port on the selected pods.\n- It selects pods with the label 'name: shipping'.\n\nK8s manifest: sock-shop-2/manifests/25-user-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: user\n  labels:\n    name: user\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: user\n  template:\n    metadata:\n      labels:\n        name: user\n    spec:\n      containers:\n      - name: user\n        image: weaveworksdemos/user:0.4.7\n        resources:\n          limits:\n            cpu: 300m\n            memory: 200Mi\n          requests:\n            cpu: 100m\n            memory: 100Mi\n        ports:\n        - containerPort: 80\n        env:\n        - name: mongo\n          value: user-db:27017\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n            add:\n              - NET_BIND_SERVICE\n          readOnlyRootFilesystem: true\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 300\n          periodSeconds: 3\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 180\n          periodSeconds: 3\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/25-user-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'user' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'user' application running.\n- The Deployment uses the Docker image 'weaveworksdemos/user:0.4.7'.\n- Resource limits are set for the container: 300m CPU and 200Mi memory, with requests for 100m CPU and 100Mi memory.\n- The container listens on port 80.\n- An environment variable 'mongo' is set with the value 'user-db:27017'.\n- Security context is configured to run the container as a non-root user with user ID 10001.\n- The container has a read-only root filesystem and drops all capabilities except 'NET_BIND_SERVICE'.\n- Liveness and readiness probes are configured to check the '/health' endpoint on port 80.\n- The liveness probe starts after 300 seconds and checks every 3 seconds.\n- The readiness probe starts after 180 seconds and checks every 3 seconds.\n- The Deployment is scheduled to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/26-user-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: user\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: user\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: user\n\n\n```\nSummary of sock-shop-2/manifests/26-user-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The service is named 'user'.\n- It is annotated for Prometheus scraping, which means it is set up for monitoring.\n- The service is labeled with 'name: user'.\n- It is deployed in the 'sock-shop' namespace.\n- The service listens on port 80 and forwards traffic to the same port on the selected pods.\n- The service selects pods with the label 'name: user'.\n\nK8s manifest: sock-shop-2/manifests/27-user-db-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: user-db\n  labels:\n    name: user-db\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: user-db\n  template:\n    metadata:\n      labels:\n        name: user-db\n    spec:\n      containers:\n      - name: user-db\n        image: weaveworksdemos/user-db:0.3.0\n\n        ports:\n        - name: mongo\n          containerPort: 27017\n        securityContext:\n          capabilities:\n            drop:\n              - all\n            add:\n              - CHOWN\n              - SETGID\n              - SETUID\n          readOnlyRootFilesystem: true\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-volume\n      volumes:\n        - name: tmp-volume\n          emptyDir:\n            medium: Memory\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/27-user-db-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'user-db' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'user-db' pod running.\n- The pods are selected based on the label 'name: user-db'.\n- Each pod runs a single container using the image 'weaveworksdemos/user-db:0.3.0'.\n- The container exposes port 27017, which is typically used by MongoDB.\n- Security settings are applied to drop all capabilities and only add CHOWN, SETGID, and SETUID.\n- The root filesystem of the container is set to be read-only for security purposes.\n- A temporary volume is mounted at '/tmp' using an in-memory emptyDir volume.\n- The pods are scheduled to run on nodes with the operating system labeled as 'linux'.\n\nK8s manifest: sock-shop-2/manifests/28-user-db-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: user-db\n  labels:\n    name: user-db\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 27017\n    targetPort: 27017\n  selector:\n    name: user-db\n\n\n```\nSummary of sock-shop-2/manifests/28-user-db-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'user-db'.\n- It is located in the 'sock-shop' namespace.\n- The Service is configured to expose port 27017.\n- It targets the same port (27017) on the pods it selects.\n- The Service uses a selector to match pods with the label 'name: user-db'.\n\nThe resiliency issues/weaknesses in the system are as follows:\nIssue #0: Missing Resource Requests\n  - details: Pods may not get scheduled if the cluster is under resource pressure, leading to potential downtime.\n  - manifests having the issues: ['sock-shop-2/manifests/03-carts-db-dep.yaml', 'sock-shop-2/manifests/07-catalogue-db-dep.yaml', 'sock-shop-2/manifests/13-orders-db-dep.yaml', 'sock-shop-2/manifests/19-rabbitmq-dep.yaml', 'sock-shop-2/manifests/21-session-db-dep.yaml', 'sock-shop-2/manifests/27-user-db-dep.yaml']\n  - problematic config: The deployments for carts-db, catalogue-db, orders-db, rabbitmq, session-db, and user-db do not specify resource requests.\n\nIssue #1: Single Replica Deployment\n  - details: The front-end deployment has only one replica, which can lead to downtime if the pod fails.\n  - manifests having the issues: ['sock-shop-2/manifests/09-front-end-dep.yaml']\n  - problematic config: spec.replicas: 1\n\nIssue #2: High Initial Delay for Liveness Probe\n  - details: A high initial delay for the liveness probe can delay the detection of a failed pod, leading to longer downtime.\n  - manifests having the issues: ['sock-shop-2/manifests/05-catalogue-dep.yaml', 'sock-shop-2/manifests/09-front-end-dep.yaml', 'sock-shop-2/manifests/15-payment-dep.yaml', 'sock-shop-2/manifests/25-user-dep.yaml']\n  - problematic config: livenessProbe.initialDelaySeconds: 300\n\nIssue #3: Missing Port Specification in Service\n  - details: The service may not function correctly if the port is not specified, leading to connectivity issues.\n  - manifests having the issues: ['sock-shop-2/manifests/02-carts-svc.yaml', 'sock-shop-2/manifests/04-carts-db-svc.yaml', 'sock-shop-2/manifests/06-catalogue-svc.yaml', 'sock-shop-2/manifests/08-catalogue-db-svc.yaml', 'sock-shop-2/manifests/12-orders-svc.yaml', 'sock-shop-2/manifests/14-orders-db-svc.yaml', 'sock-shop-2/manifests/16-payment-svc.yaml', 'sock-shop-2/manifests/18-queue-master-svc.yaml', 'sock-shop-2/manifests/22-session-db-svc.yaml', 'sock-shop-2/manifests/24-shipping-svc.yaml', 'sock-shop-2/manifests/26-user-svc.yaml', 'sock-shop-2/manifests/28-user-db-svc.yaml']\n  - problematic config: The port field is commented out or not specified in the service manifests.\n\nThe expected type of application on the system (i.e., K8s manfests):\nThe 'sock-shop' application is an e-commerce platform that allows users to browse a catalogue of items, add items to a shopping cart, place orders, and make payments. It is a microservices-based application deployed on Kubernetes, with each service handling a specific aspect of the e-commerce process, such as managing the catalogue, processing orders, handling payments, and managing user sessions.; The manifests provided are part of a Kubernetes deployment for a microservices-based application called 'sock-shop'. This is evident from the namespace 'sock-shop' and the naming conventions used in the manifests, such as 'carts', 'catalogue', 'orders', 'payment', 'shipping', 'user', and their respective databases. These components are typical of an e-commerce application, where users can browse a catalogue, add items to a cart, place orders, and make payments. The use of services like RabbitMQ and Redis further supports the assumption of a complex, distributed application architecture, which is common in e-commerce platforms.\n\nSteady states of my system:\n2 steady states are defined.\n1st steady states:\n- Name: carts-db-pod-count\n- Description: The first issue to address is the 'Missing Resource Requests' in the 'carts-db' Deployment. This is a critical issue because without resource requests, the pods may not get scheduled if the cluster is under resource pressure, leading to potential downtime. To verify the steady state, we can measure the number of 'carts-db' pods running, ensuring it matches the expected replica count of 2. This will help us understand if the pods are being scheduled correctly despite the missing resource requests.\n- Threshold for the steady state: At least 2 'carts-db' pods must be running 95% of the time within a 1-minute monitoring period.; The steady state we are examining is the number of 'carts-db' pods running, which should match the expected replica count of 2. The current state shows that the pod count consistently matches the expected count of 2 over multiple checks. Given that the system is expected to maintain 2 replicas, the threshold should ensure that at least 2 pods are running to maintain redundancy and availability. To account for potential fluctuations, such as during pod restarts or updates, a reasonable tolerance can be applied. For example, allowing a brief period where the pod count might drop to 1, but it should recover quickly. Therefore, the threshold can be defined as maintaining at least 2 'carts-db' pods running 95% of the time within a 1-minute monitoring period. This allows for brief fluctuations while ensuring the system remains stable and available.\n- Whether the steady state meets the threshold is determined by the following Python script with K8s API:\n```\nimport os\nimport time\nimport argparse\nfrom kubernetes import client, config\nfrom unittest_base import K8sAPIBase\n\nclass TestCartsDBPodCount(K8sAPIBase):\n    def __init__(self):\n        super().__init__()\n        self.v1_apps = client.AppsV1Api()\n\n    def check_carts_db_pod_count(self, namespace, expected_count):\n        pod_count = 0\n        try:\n            resp = self.v1_apps.read_namespaced_deployment(name='carts-db', namespace=namespace)\n            pod_count = resp.status.replicas\n        except client.exceptions.ApiException as e:\n            print(f\"Exception when calling AppsV1Api->read_namespaced_deployment: {e}\")\n        return pod_count\n\n    def test_steady_state(self, duration):\n        namespace = 'sock-shop'\n        expected_count = 2\n        successful_checks = 0\n\n        for _ in range(duration):\n            pod_count = self.check_carts_db_pod_count(namespace, expected_count)\n            print(f\"Current 'carts-db' pod count: {pod_count}\")\n            if pod_count == expected_count:\n                successful_checks += 1\n            time.sleep(1)\n\n        # Calculate the percentage of successful checks\n        success_percentage = (successful_checks / duration) * 100\n        print(f\"Success percentage: {success_percentage}%\")\n\n        # Assert that the success percentage is at least 95%\n        assert success_percentage >= 95, f\"Pod count was not stable enough: {success_percentage}% < 95%\"\n\n\ndef main():\n    parser = argparse.ArgumentParser(description='Test carts-db pod count steady state.')\n    parser.add_argument('--duration', type=int, default=60, help='Duration to check the pod count in seconds')\n    args = parser.parse_args()\n\n    test = TestCartsDBPodCount()\n    test.test_steady_state(args.duration)\n\n\nif __name__ == '__main__':\n    main()\n\n```2nd steady states:\n- Name: front-end-pod-count\n- Description: The next issue to address is the 'Single Replica Deployment' in the 'front-end' Deployment. This is a critical issue because having only one replica can lead to downtime if the pod fails. To verify the steady state, we can measure the number of 'front-end' pods running, ensuring it matches the expected replica count of 1. This will help us understand if the pod is being scheduled correctly and remains available despite being a single replica. Monitoring the pod count will allow us to verify the system's resilience to potential failures.\n- Threshold for the steady state: At least 1 front-end pod must be running 95% of the time during a 1-minute monitoring period.; The current state of the system shows that the front-end pod count is consistently at 1, which matches the expected replica count as per the deployment configuration. Given that the system is currently stable with a single replica, the threshold should ensure that at least 1 front-end pod is running at all times. However, to account for potential fluctuations or brief disruptions, a reasonable tolerance should be included. Since the experiment must be completed within 1 minute, we can set a threshold that allows for a brief period where the pod count might temporarily drop below 1, but it should recover quickly. Therefore, the threshold can be defined as having at least 1 front-end pod running 95% of the time during the 1-minute monitoring period. This allows for a brief 3-second window where the pod count might be 0, but it should not persist beyond that.\n- Whether the steady state meets the threshold is determined by the following Python script with K8s API:\n```\nimport os\nimport time\nimport argparse\nfrom kubernetes import client, config\nfrom unittest_base import K8sAPIBase\n\nclass TestFrontEndPodCount(K8sAPIBase):\n    def __init__(self, namespace, duration):\n        super().__init__()\n        self.namespace = namespace\n        self.duration = duration\n\n    def test_front_end_pod_count(self):\n        pod_label_selector = 'name=front-end'\n        successful_checks = 0\n\n        # Check the pod count every second for the specified duration\n        for _ in range(self.duration):\n            pods = self.v1.list_namespaced_pod(namespace=self.namespace, label_selector=pod_label_selector)\n            pod_count = len(pods.items)\n            print(f'Current front-end pod count: {pod_count}')\n\n            # Increment successful checks if pod count is 1 or more\n            if pod_count >= 1:\n                successful_checks += 1\n\n            time.sleep(1)\n\n        # Calculate the percentage of successful checks\n        success_rate = (successful_checks / self.duration) * 100\n        print(f'Success rate: {success_rate}%')\n\n        # Assert that the success rate meets the 95% threshold\n        assert success_rate >= 95, f\"Front-end pod count did not meet the 95% threshold. Success rate: {success_rate}%\"\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Test front-end pod count in the sock-shop namespace.')\n    parser.add_argument('--duration', type=int, default=60, help='Duration to check the pod count in seconds.')\n    args = parser.parse_args()\n\n    test = TestFrontEndPodCount(namespace='sock-shop', duration=args.duration)\n    test.test_front_end_pod_count()\n```\n\nA fault scenario that may occur in my system and may affect the steady states:\n\nAn assumed fault scenario is as follows:\n- Event: Black Friday Sale\n- Used Chaos Engineering tool: Chaos Mesh\n- Faults to simulate the event: [[{'name': 'StressChaos', 'name_id': 0, 'scope': {'namespace': 'sock-shop', 'label': 'name=carts-db'}}], [{'name': 'PodChaos', 'name_id': 1, 'scope': {'namespace': 'sock-shop', 'label': 'name=front-end'}}], [{'name': 'NetworkChaos', 'name_id': 2, 'scope': {'namespace': 'sock-shop', 'label': 'name=front-end'}}]]\n- Description: During a Black Friday sale, the system is expected to handle a significant increase in traffic and load. This event will test the system's ability to maintain steady states under high demand. The system's weaknesses, such as missing resource requests and single replica deployments, can lead to potential downtime or degraded performance. To simulate this event, we will inject faults that target these weaknesses. First, we will use StressChaos to simulate high CPU and memory usage on the 'carts-db' pods, which lack resource requests, to see if they can maintain the required pod count. Next, we will use PodChaos to kill the single replica 'front-end' pod to test its resilience and recovery. Finally, we will introduce NetworkChaos to simulate network latency on the 'front-end' service, which will test the system's ability to handle network issues during high traffic. This sequence of fault injections will simulate the phenomena of a Black Friday sale, where high load, potential failures, and network issues are common.\n\nPlease follow the instructions below regarding Chaos Engineering as necessary:\n- The Chaos-Engineering experiment must be completed within 1 minute.\n\n- When using k6 in steady-state definition, always select a request URL from the following options (other requests are invalid):\n  1. http://front-end.sock-shop.svc.cluster.local/\n  2. http://front-end.sock-shop.svc.cluster.local/catalogue?size=10\n  3. http://front-end.sock-shop.svc.cluster.local/detail.html?id=<ID>\n  Replace <ID> with an available ID: [`03fef6ac-1896-4ce8-bd69-b798f85c6e0b`, `3395a43e-2d88-40de-b95f-e00e1502085b`, `510a0d7e-8e83-4193-b483-e27e09ddc34d`, `808a2de1-1aaa-4c25-a9b9-6612e8f29a38`, `819e1fbf-8b7e-4f6d-811f-693534916a8b`, `837ab141-399e-4c1f-9abc-bace40296bac`, `a0a4f044-b040-410d-8ead-4de0446aec7e`, `d3588630-ad8e-49df-bbd7-3167f7efb246`, `zzz4f044-b040-410d-8ead-4de0446aec7e`]\n  4. http://front-end.sock-shop.svc.cluster.local/category/\n  5. http://front-end.sock-shop.svc.cluster.local/category?tags=<TAG>\n  Replace <TAG> with an available tag: [`magic`, `action`, `blue`, `brown`, `black`, `sport`, `formal`, `red`, `green`, `skin`, `geek`]\n  6. http://front-end.sock-shop.svc.cluster.local/basket.html\n\nNow, please detail the parameters of the fault \"PodChaos({'namespace': 'sock-shop', 'label': 'name=front-end'})\".\nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {\"properties\": {\"foo\": {\"title\": \"Foo\", \"description\": \"a list of strings\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"foo\"]}\nthe object {\"foo\": [\"bar\", \"baz\"]} is a well-formatted instance of the schema. The object {\"properties\": {\"foo\": [\"bar\", \"baz\"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{\"properties\": {\"action\": {\"title\": \"Action\", \"description\": \"Specifies the fault type from 'pod-kill', or 'container-kill'.\", \"example\": \"pod-kill\", \"enum\": [\"pod-kill\", \"container-kill\"], \"type\": \"string\"}, \"mode\": {\"title\": \"Mode\", \"description\": \"Specifies the mode of the experiment. The mode options include 'one' (selecting a random Pod), 'all' (selecting all eligible Pods), 'fixed' (selecting a specified number of eligible Pods), 'fixed-percent' (selecting a specified percentage of Pods from the eligible Pods), and 'random-max-percent' (selecting the maximum percentage of Pods from the eligible Pods)\", \"example\": \"one\", \"enum\": [\"one\", \"all\", \"fixed\", \"fixed-percent\", \"random-max-percent\"], \"type\": \"string\"}, \"value\": {\"title\": \"Value\", \"description\": \"Provides parameters for the mode configuration, depending on mode.For example, when mode is set to fixed-percent, value specifies the percentage of Pods.\", \"example\": \"1\", \"type\": \"string\"}, \"selector\": {\"title\": \"Selector\", \"description\": \"Specifies the target Pod.\", \"example\": null, \"allOf\": [{\"$ref\": \"#/definitions/Selectors\"}]}, \"containerNames\": {\"title\": \"Containernames\", \"description\": \"When you configure action to container-kill, this configuration is mandatory to specify the target container name for injecting faults.\", \"example\": [\"prometheus\"], \"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"action\", \"mode\", \"selector\"], \"definitions\": {\"SetBasedRequirements\": {\"title\": \"SetBasedRequirements\", \"type\": \"object\", \"properties\": {\"key\": {\"title\": \"Key\", \"description\": \"Label key\", \"type\": \"string\"}, \"operator\": {\"title\": \"Operator\", \"description\": \"Select an operator.\", \"enum\": [\"In\", \"NotIn\", \"Exists\", \"DoesNotExist\"], \"type\": \"string\"}, \"values\": {\"title\": \"Values\", \"description\": \"Label values. The values set must be non-empty in the case of In and NotIn.\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"key\", \"operator\", \"values\"]}, \"Selectors\": {\"title\": \"Selectors\", \"type\": \"object\", \"properties\": {\"namespaces\": {\"title\": \"Namespaces\", \"description\": \"Specifies the namespace of the experiment's target Pod. If this selector is None, Chaos Mesh will set it to the namespace of the current Chaos experiment.\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}, \"labelSelectors\": {\"title\": \"Labelselectors\", \"description\": \"Specifies the label-key/value pairs that the experiment's target Pod must have. If multiple labels are specified, the experiment target must have all the labels specified by this selector.\", \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"expressionSelectors\": {\"title\": \"Expressionselectors\", \"description\": \"Specifies a set of expressions that define the label's rules to specifiy the experiment's target Pod.\", \"example\": [{\"key\": \"tier\", \"operator\": \"In\", \"values\": [\"cache\"]}, {\"key\": \"environment\", \"operator\": \"NotIn\", \"values\": [\"dev\"]}], \"type\": \"array\", \"items\": {\"$ref\": \"#/definitions/SetBasedRequirements\"}}, \"annotationSelectors\": {\"title\": \"Annotationselectors\", \"description\": \"Specifies the annotation-key/value pairs that the experiment's target Pod must have. If multiple annotations are specified, the experiment target must have all annotations specified by this selector.\", \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"fieldSelectors\": {\"title\": \"Fieldselectors\", \"description\": \"Specifies the field-key/value pairs of the experiment's target Pod. If multiple fields are specified, the experiment target must have all fields set by this selector.\", \"example\": {\"metadata.name\": \"my-pod\", \"metadata.namespace\": \"dafault\"}, \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"podPhaseSelectors\": {\"title\": \"Podphaseselectors\", \"description\": \"Specifies the phase of the experiment's target Pod. If this selector is None, the target Pod's phase is not limited.\", \"type\": \"array\", \"items\": {\"enum\": [\"Pending\", \"Running\", \"Succeeded\", \"Failed\", \"Unknown\"], \"type\": \"string\"}}, \"nodeSelectors\": {\"title\": \"Nodeselectors\", \"description\": \"Specifies the node-label-key/value pairs to which the experiment's target Pod belongs.\", \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"nodes\": {\"title\": \"Nodes\", \"description\": \"Specifies the node to which the experiment's target Pod belongs. The target Pod can only belong to one node in the configured node list. If multiple node labels are specified, the node to which the experiment's target Pod belongs must have all labels specified by this selector.\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}, \"pods\": {\"title\": \"Pods\", \"description\": \"Specifies the namespaces and list of the experiment's target Pods. If you have specified this selector, Chaos Mesh ignores other configured selectors.\", \"example\": {\"default\": [\"pod-0\", \"pod-2\"]}, \"type\": \"object\", \"additionalProperties\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}}}}\n```\nAI: ```json\n{\"action\":"
            ],
            "{\"action\": \"pod-kill\", \"mode\": \"one\", \"selector\": {\"namespaces\": [\"sock-shop\"], \"labelSelectors\": {\"name\": \"front-end\"}}, \"value\": \"\"}\n",
            [
                "System: You are a helpful AI assistant for Chaos Engineering.\nGiven k8s manifests that defines a network system, its steady states, and a fault type that may affect the steady states in the system, please detail the parameters of the fault.\nAlways keep the following rules:\n- Pay attention to namespace specification. If the namespace is specified in the manifest, it is deployed with the namespace. If not, it is deployed with the 'default' namespace.\n- The parameters follow the format of Chaos Mesh.\nHuman: Here is the overview of my system:\nThe system consists of the following K8s manifest(s):K8s manifest: sock-shop-2/manifests/00-sock-shop-ns.yaml\n```yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: sock-shop\n\n```\nSummary of sock-shop-2/manifests/00-sock-shop-ns.yaml:\n- This manifest defines a Kubernetes Namespace.\n- The Namespace is named 'sock-shop'.\n- Namespaces are used to organize and manage resources within a Kubernetes cluster, providing a way to divide cluster resources between multiple users or teams.\n\nK8s manifest: sock-shop-2/manifests/01-carts-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: carts\n  labels:\n    name: carts\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: carts\n  template:\n    metadata:\n      labels:\n        name: carts\n    spec:\n      containers:\n      - name: carts\n        image: weaveworksdemos/carts:0.4.8\n        env:\n         - name: JAVA_OPTS\n           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false\n        resources:\n          limits:\n            cpu: 300m\n            memory: 500Mi\n          requests:\n            cpu: 100m\n            memory: 200Mi\n        ports:\n        - containerPort: 80\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n            add:\n              - NET_BIND_SERVICE\n          readOnlyRootFilesystem: true\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-volume\n      volumes:\n        - name: tmp-volume\n          emptyDir:\n            medium: Memory\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/01-carts-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'carts' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'carts' application running.\n- The Deployment uses the Docker image 'weaveworksdemos/carts:0.4.8'.\n- Environment variables are set for Java options to optimize memory usage and disable certain features.\n- Resource limits and requests are defined, with a maximum of 300m CPU and 500Mi memory, and a minimum of 100m CPU and 200Mi memory.\n- The application listens on port 80 within the container.\n- Security settings ensure the container runs as a non-root user with specific capabilities and a read-only root filesystem.\n- A temporary volume is mounted at '/tmp' using an in-memory empty directory.\n- The Deployment is scheduled to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/02-carts-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: carts\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: carts\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: carts\n\n```\nSummary of sock-shop-2/manifests/02-carts-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'carts'.\n- It is annotated for Prometheus scraping with 'prometheus.io/scrape: true'.\n- The Service is labeled with 'name: carts'.\n- It is deployed in the 'sock-shop' namespace.\n- The Service exposes port 80 and directs traffic to the same port on the target pods.\n- It selects pods with the label 'name: carts' to route traffic to.\n\nK8s manifest: sock-shop-2/manifests/03-carts-db-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: carts-db\n  labels:\n    name: carts-db\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: carts-db\n  template:\n    metadata:\n      labels:\n        name: carts-db\n    spec:\n      containers:\n      - name: carts-db\n        image: mongo\n        ports:\n        - name: mongo\n          containerPort: 27017\n        securityContext:\n          capabilities:\n            drop:\n              - all\n            add:\n              - CHOWN\n              - SETGID\n              - SETUID\n          readOnlyRootFilesystem: true\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-volume\n      volumes:\n        - name: tmp-volume\n          emptyDir:\n            medium: Memory\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/03-carts-db-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'carts-db' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'carts-db' pod running.\n- The pods are selected based on the label 'name: carts-db'.\n- Each pod runs a single container using the 'mongo' image.\n- The container exposes port 27017, which is the default port for MongoDB.\n- Security settings are applied to drop all capabilities and only add CHOWN, SETGID, and SETUID.\n- The root filesystem of the container is set to read-only for security purposes.\n- A temporary volume is mounted at '/tmp' using an in-memory emptyDir volume.\n- The pods are scheduled to run on nodes with the operating system labeled as 'linux'.\n\nK8s manifest: sock-shop-2/manifests/04-carts-db-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: carts-db\n  labels:\n    name: carts-db\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 27017\n    targetPort: 27017\n  selector:\n    name: carts-db\n\n```\nSummary of sock-shop-2/manifests/04-carts-db-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'carts-db'.\n- It is labeled with 'name: carts-db'.\n- The Service is created in the 'sock-shop' namespace.\n- It exposes port 27017 and directs traffic to the same port on the target pods.\n- The Service selects pods with the label 'name: carts-db' to route traffic to them.\n\nK8s manifest: sock-shop-2/manifests/05-catalogue-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: catalogue\n  labels:\n    name: catalogue\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: catalogue\n  template:\n    metadata:\n      labels:\n        name: catalogue\n    spec:\n      containers:\n      - name: catalogue\n        image: weaveworksdemos/catalogue:0.3.5\n        command: [\"/app\"]\n        args:\n        - -port=80\n        resources:\n          limits:\n            cpu: 200m\n            memory: 200Mi\n          requests:\n            cpu: 100m\n            memory: 100Mi\n        ports:\n        - containerPort: 80\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n            add:\n              - NET_BIND_SERVICE\n          readOnlyRootFilesystem: true\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 300\n          periodSeconds: 3\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 180\n          periodSeconds: 3\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/05-catalogue-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'catalogue' and is part of the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'catalogue' application running.\n- The Deployment uses the Docker image 'weaveworksdemos/catalogue:0.3.5'.\n- The application runs with the command '/app' and listens on port 80.\n- Resource limits are set to 200m CPU and 200Mi memory, with requests for 100m CPU and 100Mi memory.\n- The container is configured to run as a non-root user with user ID 10001.\n- Security settings include dropping all capabilities except 'NET_BIND_SERVICE' and using a read-only root filesystem.\n- Liveness and readiness probes are configured to check the '/health' endpoint on port 80, with initial delays of 300 and 180 seconds respectively.\n- The Deployment is scheduled to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/06-catalogue-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: catalogue\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: catalogue\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: catalogue\n\n```\nSummary of sock-shop-2/manifests/06-catalogue-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'catalogue'.\n- It is annotated to enable Prometheus scraping with 'prometheus.io/scrape: true'.\n- The Service is labeled with 'name: catalogue'.\n- It is deployed in the 'sock-shop' namespace.\n- The Service exposes port 80 and directs traffic to the same port on the selected pods.\n- It selects pods with the label 'name: catalogue' to route traffic to.\n\nK8s manifest: sock-shop-2/manifests/07-catalogue-db-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: catalogue-db\n  labels:\n    name: catalogue-db\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: catalogue-db\n  template:\n    metadata:\n      labels:\n        name: catalogue-db\n    spec:\n      containers:\n      - name: catalogue-db\n        image: weaveworksdemos/catalogue-db:0.3.0\n        env:\n          - name: MYSQL_ROOT_PASSWORD\n            value: fake_password\n          - name: MYSQL_DATABASE\n            value: socksdb\n        ports:\n        - name: mysql\n          containerPort: 3306\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/07-catalogue-db-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'catalogue-db'.\n- It is located in the 'sock-shop' namespace.\n- The Deployment will create 2 replicas of the pod.\n- Each pod will run a container from the image 'weaveworksdemos/catalogue-db:0.3.0'.\n- The container is configured with environment variables for 'MYSQL_ROOT_PASSWORD' and 'MYSQL_DATABASE'.\n- The container exposes port 3306, which is typically used for MySQL.\n- The pods are scheduled to run on nodes with the operating system labeled as Linux.\n\nK8s manifest: sock-shop-2/manifests/08-catalogue-db-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: catalogue-db\n  labels:\n    name: catalogue-db\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 3306\n    targetPort: 3306\n  selector:\n    name: catalogue-db\n\n```\nSummary of sock-shop-2/manifests/08-catalogue-db-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'catalogue-db'.\n- It is located in the 'sock-shop' namespace.\n- The Service is configured to expose port 3306.\n- It targets the same port (3306) on the pods.\n- The Service selects pods with the label 'name: catalogue-db'.\n\nK8s manifest: sock-shop-2/manifests/09-front-end-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: front-end\n  namespace: sock-shop\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      name: front-end\n  template:\n    metadata:\n      labels:\n        name: front-end\n    spec:\n      containers:\n      - name: front-end\n        image: weaveworksdemos/front-end:0.3.12\n        resources:\n          limits:\n            cpu: 300m\n            memory: 1000Mi\n          requests:\n            cpu: 100m\n            memory: 300Mi\n        ports:\n        - containerPort: 8079\n        env:\n        - name: SESSION_REDIS\n          value: \"true\"\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n          readOnlyRootFilesystem: true\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 8079\n          initialDelaySeconds: 300\n          periodSeconds: 3\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 8079\n          initialDelaySeconds: 30\n          periodSeconds: 3\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n```\nSummary of sock-shop-2/manifests/09-front-end-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'front-end' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 1 replica of the front-end application running.\n- The Deployment uses a selector to match pods with the label 'name: front-end'.\n- The pod template includes a single container named 'front-end'.\n- The container uses the image 'weaveworksdemos/front-end:0.3.12'.\n- Resource limits are set for the container: 300m CPU and 1000Mi memory.\n- Resource requests are set for the container: 100m CPU and 300Mi memory.\n- The container exposes port 8079.\n- An environment variable 'SESSION_REDIS' is set to 'true'.\n- Security context is configured to run the container as a non-root user with user ID 10001.\n- All additional Linux capabilities are dropped, and the root filesystem is set to read-only.\n- A liveness probe is configured to check the '/' path on port 8079, with an initial delay of 300 seconds and a period of 3 seconds.\n- A readiness probe is also configured to check the '/' path on port 8079, with an initial delay of 30 seconds and a period of 3 seconds.\n- The node selector ensures that the pod runs on nodes with the operating system labeled as Linux.\n\nK8s manifest: sock-shop-2/manifests/10-front-end-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: front-end\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: front-end\n  namespace: sock-shop\nspec:\n  type: NodePort\n  ports:\n  - port: 80\n    targetPort: 8079\n    nodePort: 30001\n  selector:\n    name: front-end\n\n```\nSummary of sock-shop-2/manifests/10-front-end-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'front-end'.\n- It is located in the 'sock-shop' namespace.\n- The Service type is 'NodePort', which exposes the service on each Node's IP at a static port.\n- It listens on port 80 and forwards traffic to target port 8079 on the pods.\n- The nodePort is set to 30001, which is the port on each node where the service can be accessed externally.\n- The Service is configured to be scraped by Prometheus for monitoring, as indicated by the annotation 'prometheus.io/scrape: true'.\n- It selects pods with the label 'name: front-end' to route traffic to.\n\nK8s manifest: sock-shop-2/manifests/11-orders-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: orders\n  labels:\n    name: orders\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: orders\n  template:\n    metadata:\n      labels:\n        name: orders\n    spec:\n      containers:\n      - name: orders\n        image: weaveworksdemos/orders:0.4.7\n        env:\n         - name: JAVA_OPTS\n           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false\n        resources:\n          limits:\n            cpu: 500m\n            memory: 500Mi\n          requests:\n            cpu: 100m\n            memory: 300Mi\n        ports:\n        - containerPort: 80\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n            add:\n              - NET_BIND_SERVICE\n          readOnlyRootFilesystem: true\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-volume\n      volumes:\n        - name: tmp-volume\n          emptyDir:\n            medium: Memory\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/11-orders-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'orders' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'orders' application running.\n- The Deployment uses the 'weaveworksdemos/orders:0.4.7' Docker image for the container.\n- Environment variables are set for Java options to optimize memory usage and disable certain features.\n- Resource limits and requests are defined, with a maximum of 500m CPU and 500Mi memory, and a minimum of 100m CPU and 300Mi memory.\n- The container listens on port 80.\n- Security settings ensure the container runs as a non-root user with specific capabilities and a read-only root filesystem.\n- A temporary volume is mounted at '/tmp' using an in-memory empty directory.\n- The Deployment is scheduled to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/12-orders-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: orders\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: orders\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: orders\n\n```\nSummary of sock-shop-2/manifests/12-orders-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'orders'.\n- It is annotated to enable Prometheus scraping with 'prometheus.io/scrape: true'.\n- The Service is labeled with 'name: orders'.\n- It is deployed in the 'sock-shop' namespace.\n- The Service exposes port 80 and directs traffic to the same port on the target pods.\n- It uses a selector to match pods with the label 'name: orders'.\n\nK8s manifest: sock-shop-2/manifests/13-orders-db-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: orders-db\n  labels:\n    name: orders-db\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: orders-db\n  template:\n    metadata:\n      labels:\n        name: orders-db\n    spec:\n      containers:\n      - name: orders-db\n        image: mongo\n        ports:\n        - name: mongo\n          containerPort: 27017\n        securityContext:\n          capabilities:\n            drop:\n              - all\n            add:\n              - CHOWN\n              - SETGID\n              - SETUID\n          readOnlyRootFilesystem: true\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-volume\n      volumes:\n        - name: tmp-volume\n          emptyDir:\n            medium: Memory\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/13-orders-db-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'orders-db' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'orders-db' pod running.\n- The pods are selected based on the label 'name: orders-db'.\n- Each pod runs a single container using the 'mongo' image.\n- The container exposes port 27017, which is the default port for MongoDB.\n- Security context is set to drop all capabilities and add only CHOWN, SETGID, and SETUID, with a read-only root filesystem.\n- A volume named 'tmp-volume' is mounted at '/tmp' and uses an in-memory empty directory.\n- The pods are scheduled to run on nodes with the operating system labeled as 'linux'.\n\nK8s manifest: sock-shop-2/manifests/14-orders-db-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: orders-db\n  labels:\n    name: orders-db\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 27017\n    targetPort: 27017\n  selector:\n    name: orders-db\n\n```\nSummary of sock-shop-2/manifests/14-orders-db-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'orders-db'.\n- It is located in the 'sock-shop' namespace.\n- The Service is configured to expose port 27017.\n- It targets the same port (27017) on the pods.\n- The Service selects pods with the label 'name: orders-db'.\n\nK8s manifest: sock-shop-2/manifests/15-payment-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: payment\n  labels:\n    name: payment\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: payment\n  template:\n    metadata:\n      labels:\n        name: payment\n    spec:\n      containers:\n      - name: payment\n        image: weaveworksdemos/payment:0.4.3\n        resources:\n          limits:\n            cpu: 200m\n            memory: 200Mi\n          requests:\n            cpu: 99m\n            memory: 100Mi\n        ports:\n        - containerPort: 80\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n            add:\n              - NET_BIND_SERVICE\n          readOnlyRootFilesystem: true\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 300\n          periodSeconds: 3\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 180\n          periodSeconds: 3\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/15-payment-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'payment' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'payment' application running.\n- The Deployment uses the Docker image 'weaveworksdemos/payment:0.4.3'.\n- Resource limits are set for the container, with a maximum of 200m CPU and 200Mi memory, and requests for 99m CPU and 100Mi memory.\n- The container listens on port 80.\n- Security settings ensure the container runs as a non-root user with user ID 10001, and the root filesystem is read-only.\n- The container has a liveness probe and a readiness probe, both checking the '/health' endpoint on port 80, with initial delays of 300 and 180 seconds respectively.\n- The Deployment is configured to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/16-payment-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: payment\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: payment\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: payment\n\n```\nSummary of sock-shop-2/manifests/16-payment-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'payment'.\n- It is annotated for Prometheus scraping, which means it is set up for monitoring.\n- The Service is labeled with 'name: payment'.\n- It is deployed in the 'sock-shop' namespace.\n- The Service exposes port 80 and directs traffic to the same port on the selected pods.\n- The Service selects pods with the label 'name: payment' to route traffic to them.\n\nK8s manifest: sock-shop-2/manifests/17-queue-master-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: queue-master\n  labels:\n    name: queue-master\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: queue-master\n  template:\n    metadata:\n      labels:\n        name: queue-master\n    spec:\n      containers:\n      - name: queue-master\n        image: weaveworksdemos/queue-master:0.3.1\n        env:\n         - name: JAVA_OPTS\n           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false\n        resources:\n          limits:\n            cpu: 300m\n            memory: 500Mi\n          requests:\n            cpu: 100m\n            memory: 300Mi\n        ports:\n        - containerPort: 80\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/17-queue-master-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'queue-master' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'queue-master' application running.\n- The Deployment uses a container image 'weaveworksdemos/queue-master:0.3.1'.\n- Environment variables are set for the container, including Java options for memory management and garbage collection.\n- Resource limits and requests are defined, with a CPU limit of 300m and memory limit of 500Mi, and requests for 100m CPU and 300Mi memory.\n- The container exposes port 80.\n- The Deployment is configured to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/18-queue-master-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: queue-master\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: queue-master\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: queue-master\n```\nSummary of sock-shop-2/manifests/18-queue-master-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The service is named 'queue-master'.\n- It is annotated for Prometheus scraping, which means it is set up to be monitored by Prometheus.\n- The service is labeled with 'name: queue-master' for identification and selection purposes.\n- It is deployed in the 'sock-shop' namespace.\n- The service exposes port 80 and directs traffic to the same port on the target pods.\n- The service uses a selector to target pods with the label 'name: queue-master'.\n\nK8s manifest: sock-shop-2/manifests/19-rabbitmq-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: rabbitmq\n  labels:\n    name: rabbitmq\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: rabbitmq\n  template:\n    metadata:\n      labels:\n        name: rabbitmq\n      annotations:\n        prometheus.io/scrape: \"false\"\n    spec:\n      containers:\n      - name: rabbitmq\n        image: rabbitmq:3.6.8-management\n        ports:\n        - containerPort: 15672\n          name: management\n        - containerPort: 5672\n          name: rabbitmq\n        securityContext:\n          capabilities:\n            drop:\n              - all\n            add:\n              - CHOWN\n              - SETGID\n              - SETUID\n              - DAC_OVERRIDE\n          readOnlyRootFilesystem: true\n      - name: rabbitmq-exporter\n        image: kbudde/rabbitmq-exporter\n        ports:\n        - containerPort: 9090\n          name: exporter\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/19-rabbitmq-dep.yaml:\n- This manifest defines a Deployment for RabbitMQ in a Kubernetes cluster.\n- The Deployment is named 'rabbitmq' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the RabbitMQ pod running.\n- The Deployment uses a selector to match pods with the label 'name: rabbitmq'.\n- The pod template includes two containers: one for RabbitMQ and another for RabbitMQ Exporter.\n- The RabbitMQ container uses the image 'rabbitmq:3.6.8-management' and exposes two ports: 15672 for management and 5672 for RabbitMQ.\n- The RabbitMQ container has a security context that drops all capabilities and adds specific ones like CHOWN, SETGID, SETUID, and DAC_OVERRIDE, and it uses a read-only root filesystem.\n- The RabbitMQ Exporter container uses the image 'kbudde/rabbitmq-exporter' and exposes port 9090.\n- The Deployment is configured to run on nodes with the label 'beta.kubernetes.io/os: linux'.\n- Annotations are set to prevent Prometheus from scraping metrics from this pod.\n\nK8s manifest: sock-shop-2/manifests/20-rabbitmq-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: rabbitmq\n  annotations:\n        prometheus.io/scrape: 'true'\n        prometheus.io/port: '9090'\n  labels:\n    name: rabbitmq\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 5672\n    name: rabbitmq\n    targetPort: 5672\n  - port: 9090\n    name: exporter\n    targetPort: exporter\n    protocol: TCP\n  selector:\n    name: rabbitmq\n\n```\nSummary of sock-shop-2/manifests/20-rabbitmq-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'rabbitmq'.\n- It is annotated for Prometheus scraping on port 9090.\n- The Service is labeled with 'name: rabbitmq'.\n- It is deployed in the 'sock-shop' namespace.\n- The Service exposes two ports: 5672 for RabbitMQ and 9090 for an exporter.\n- The Service uses TCP protocol for communication.\n- It selects pods with the label 'name: rabbitmq' to route traffic to.\n\nK8s manifest: sock-shop-2/manifests/21-session-db-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: session-db\n  labels:\n    name: session-db\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: session-db\n  template:\n    metadata:\n      labels:\n        name: session-db\n      annotations:\n        prometheus.io.scrape: \"false\"\n    spec:\n      containers:\n      - name: session-db\n        image: redis:alpine\n        ports:\n        - name: redis\n          containerPort: 6379\n        securityContext:\n          capabilities:\n            drop:\n              - all\n            add:\n              - CHOWN\n              - SETGID\n              - SETUID\n          readOnlyRootFilesystem: true\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/21-session-db-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'session-db' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'session-db' pod running.\n- The pods are selected based on the label 'name: session-db'.\n- Each pod runs a single container using the 'redis:alpine' image.\n- The container exposes port 6379, which is commonly used by Redis.\n- Security settings are applied to drop all capabilities and only add CHOWN, SETGID, and SETUID.\n- The root filesystem of the container is set to be read-only for security purposes.\n- The pods are scheduled to run on nodes with the operating system labeled as Linux.\n\nK8s manifest: sock-shop-2/manifests/22-session-db-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: session-db\n  labels:\n    name: session-db\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 6379\n    targetPort: 6379\n  selector:\n    name: session-db\n\n```\nSummary of sock-shop-2/manifests/22-session-db-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'session-db'.\n- It is located in the 'sock-shop' namespace.\n- The Service listens on port 6379 and forwards traffic to the same port on the target pods.\n- It uses a selector to target pods with the label 'name: session-db'.\n\nK8s manifest: sock-shop-2/manifests/23-shipping-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: shipping\n  labels:\n    name: shipping\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: shipping\n  template:\n    metadata:\n      labels:\n        name: shipping\n    spec:\n      containers:\n      - name: shipping\n        image: weaveworksdemos/shipping:0.4.8\n        env:\n         - name: ZIPKIN\n           value: zipkin.jaeger.svc.cluster.local\n         - name: JAVA_OPTS\n           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false\n        resources:\n          limits:\n            cpu: 300m\n            memory: 500Mi\n          requests:\n            cpu: 100m\n            memory: 300Mi\n        ports:\n        - containerPort: 80\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n            add:\n              - NET_BIND_SERVICE\n          readOnlyRootFilesystem: true\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-volume\n      volumes:\n        - name: tmp-volume\n          emptyDir:\n            medium: Memory\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/23-shipping-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'shipping' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'shipping' application running.\n- The Deployment uses the Docker image 'weaveworksdemos/shipping:0.4.8'.\n- Environment variables are set for the application, including 'ZIPKIN' and 'JAVA_OPTS'.\n- Resource limits and requests are defined, with a CPU limit of 300m and memory limit of 500Mi, and requests for 100m CPU and 300Mi memory.\n- The application listens on port 80.\n- Security context is configured to run the container as a non-root user with user ID 10001, and with a read-only root filesystem.\n- The container has a volume mounted at '/tmp', which is an in-memory empty directory.\n- The Deployment is scheduled to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/24-shipping-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: shipping\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: shipping\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: shipping\n\n\n```\nSummary of sock-shop-2/manifests/24-shipping-svc.yaml:\n- This is a Kubernetes Service manifest.\n- The service is named 'shipping'.\n- It is annotated for Prometheus scraping with 'prometheus.io/scrape: true'.\n- The service is labeled with 'name: shipping'.\n- It is deployed in the 'sock-shop' namespace.\n- The service exposes port 80 and directs traffic to the same port on the selected pods.\n- It selects pods with the label 'name: shipping'.\n\nK8s manifest: sock-shop-2/manifests/25-user-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: user\n  labels:\n    name: user\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: user\n  template:\n    metadata:\n      labels:\n        name: user\n    spec:\n      containers:\n      - name: user\n        image: weaveworksdemos/user:0.4.7\n        resources:\n          limits:\n            cpu: 300m\n            memory: 200Mi\n          requests:\n            cpu: 100m\n            memory: 100Mi\n        ports:\n        - containerPort: 80\n        env:\n        - name: mongo\n          value: user-db:27017\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 10001\n          capabilities:\n            drop:\n              - all\n            add:\n              - NET_BIND_SERVICE\n          readOnlyRootFilesystem: true\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 300\n          periodSeconds: 3\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 180\n          periodSeconds: 3\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/25-user-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'user' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'user' application running.\n- The Deployment uses the Docker image 'weaveworksdemos/user:0.4.7'.\n- Resource limits are set for the container: 300m CPU and 200Mi memory, with requests for 100m CPU and 100Mi memory.\n- The container listens on port 80.\n- An environment variable 'mongo' is set with the value 'user-db:27017'.\n- Security context is configured to run the container as a non-root user with user ID 10001.\n- The container has a read-only root filesystem and drops all capabilities except 'NET_BIND_SERVICE'.\n- Liveness and readiness probes are configured to check the '/health' endpoint on port 80.\n- The liveness probe starts after 300 seconds and checks every 3 seconds.\n- The readiness probe starts after 180 seconds and checks every 3 seconds.\n- The Deployment is scheduled to run on nodes with the Linux operating system.\n\nK8s manifest: sock-shop-2/manifests/26-user-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: user\n  annotations:\n        prometheus.io/scrape: 'true'\n  labels:\n    name: user\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 80\n    targetPort: 80\n  selector:\n    name: user\n\n\n```\nSummary of sock-shop-2/manifests/26-user-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The service is named 'user'.\n- It is annotated for Prometheus scraping, which means it is set up for monitoring.\n- The service is labeled with 'name: user'.\n- It is deployed in the 'sock-shop' namespace.\n- The service listens on port 80 and forwards traffic to the same port on the selected pods.\n- The service selects pods with the label 'name: user'.\n\nK8s manifest: sock-shop-2/manifests/27-user-db-dep.yaml\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: user-db\n  labels:\n    name: user-db\n  namespace: sock-shop\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: user-db\n  template:\n    metadata:\n      labels:\n        name: user-db\n    spec:\n      containers:\n      - name: user-db\n        image: weaveworksdemos/user-db:0.3.0\n\n        ports:\n        - name: mongo\n          containerPort: 27017\n        securityContext:\n          capabilities:\n            drop:\n              - all\n            add:\n              - CHOWN\n              - SETGID\n              - SETUID\n          readOnlyRootFilesystem: true\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-volume\n      volumes:\n        - name: tmp-volume\n          emptyDir:\n            medium: Memory\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n```\nSummary of sock-shop-2/manifests/27-user-db-dep.yaml:\n- This manifest defines a Deployment in Kubernetes.\n- The Deployment is named 'user-db' and is located in the 'sock-shop' namespace.\n- It specifies that there should be 2 replicas of the 'user-db' pod running.\n- The pods are selected based on the label 'name: user-db'.\n- Each pod runs a single container using the image 'weaveworksdemos/user-db:0.3.0'.\n- The container exposes port 27017, which is typically used by MongoDB.\n- Security settings are applied to drop all capabilities and only add CHOWN, SETGID, and SETUID.\n- The root filesystem of the container is set to be read-only for security purposes.\n- A temporary volume is mounted at '/tmp' using an in-memory emptyDir volume.\n- The pods are scheduled to run on nodes with the operating system labeled as 'linux'.\n\nK8s manifest: sock-shop-2/manifests/28-user-db-svc.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: user-db\n  labels:\n    name: user-db\n  namespace: sock-shop\nspec:\n  ports:\n    # the port that this service should serve on\n  - port: 27017\n    targetPort: 27017\n  selector:\n    name: user-db\n\n\n```\nSummary of sock-shop-2/manifests/28-user-db-svc.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'user-db'.\n- It is located in the 'sock-shop' namespace.\n- The Service is configured to expose port 27017.\n- It targets the same port (27017) on the pods it selects.\n- The Service uses a selector to match pods with the label 'name: user-db'.\n\nThe resiliency issues/weaknesses in the system are as follows:\nIssue #0: Missing Resource Requests\n  - details: Pods may not get scheduled if the cluster is under resource pressure, leading to potential downtime.\n  - manifests having the issues: ['sock-shop-2/manifests/03-carts-db-dep.yaml', 'sock-shop-2/manifests/07-catalogue-db-dep.yaml', 'sock-shop-2/manifests/13-orders-db-dep.yaml', 'sock-shop-2/manifests/19-rabbitmq-dep.yaml', 'sock-shop-2/manifests/21-session-db-dep.yaml', 'sock-shop-2/manifests/27-user-db-dep.yaml']\n  - problematic config: The deployments for carts-db, catalogue-db, orders-db, rabbitmq, session-db, and user-db do not specify resource requests.\n\nIssue #1: Single Replica Deployment\n  - details: The front-end deployment has only one replica, which can lead to downtime if the pod fails.\n  - manifests having the issues: ['sock-shop-2/manifests/09-front-end-dep.yaml']\n  - problematic config: spec.replicas: 1\n\nIssue #2: High Initial Delay for Liveness Probe\n  - details: A high initial delay for the liveness probe can delay the detection of a failed pod, leading to longer downtime.\n  - manifests having the issues: ['sock-shop-2/manifests/05-catalogue-dep.yaml', 'sock-shop-2/manifests/09-front-end-dep.yaml', 'sock-shop-2/manifests/15-payment-dep.yaml', 'sock-shop-2/manifests/25-user-dep.yaml']\n  - problematic config: livenessProbe.initialDelaySeconds: 300\n\nIssue #3: Missing Port Specification in Service\n  - details: The service may not function correctly if the port is not specified, leading to connectivity issues.\n  - manifests having the issues: ['sock-shop-2/manifests/02-carts-svc.yaml', 'sock-shop-2/manifests/04-carts-db-svc.yaml', 'sock-shop-2/manifests/06-catalogue-svc.yaml', 'sock-shop-2/manifests/08-catalogue-db-svc.yaml', 'sock-shop-2/manifests/12-orders-svc.yaml', 'sock-shop-2/manifests/14-orders-db-svc.yaml', 'sock-shop-2/manifests/16-payment-svc.yaml', 'sock-shop-2/manifests/18-queue-master-svc.yaml', 'sock-shop-2/manifests/22-session-db-svc.yaml', 'sock-shop-2/manifests/24-shipping-svc.yaml', 'sock-shop-2/manifests/26-user-svc.yaml', 'sock-shop-2/manifests/28-user-db-svc.yaml']\n  - problematic config: The port field is commented out or not specified in the service manifests.\n\nThe expected type of application on the system (i.e., K8s manfests):\nThe 'sock-shop' application is an e-commerce platform that allows users to browse a catalogue of items, add items to a shopping cart, place orders, and make payments. It is a microservices-based application deployed on Kubernetes, with each service handling a specific aspect of the e-commerce process, such as managing the catalogue, processing orders, handling payments, and managing user sessions.; The manifests provided are part of a Kubernetes deployment for a microservices-based application called 'sock-shop'. This is evident from the namespace 'sock-shop' and the naming conventions used in the manifests, such as 'carts', 'catalogue', 'orders', 'payment', 'shipping', 'user', and their respective databases. These components are typical of an e-commerce application, where users can browse a catalogue, add items to a cart, place orders, and make payments. The use of services like RabbitMQ and Redis further supports the assumption of a complex, distributed application architecture, which is common in e-commerce platforms.\n\nSteady states of my system:\n2 steady states are defined.\n1st steady states:\n- Name: carts-db-pod-count\n- Description: The first issue to address is the 'Missing Resource Requests' in the 'carts-db' Deployment. This is a critical issue because without resource requests, the pods may not get scheduled if the cluster is under resource pressure, leading to potential downtime. To verify the steady state, we can measure the number of 'carts-db' pods running, ensuring it matches the expected replica count of 2. This will help us understand if the pods are being scheduled correctly despite the missing resource requests.\n- Threshold for the steady state: At least 2 'carts-db' pods must be running 95% of the time within a 1-minute monitoring period.; The steady state we are examining is the number of 'carts-db' pods running, which should match the expected replica count of 2. The current state shows that the pod count consistently matches the expected count of 2 over multiple checks. Given that the system is expected to maintain 2 replicas, the threshold should ensure that at least 2 pods are running to maintain redundancy and availability. To account for potential fluctuations, such as during pod restarts or updates, a reasonable tolerance can be applied. For example, allowing a brief period where the pod count might drop to 1, but it should recover quickly. Therefore, the threshold can be defined as maintaining at least 2 'carts-db' pods running 95% of the time within a 1-minute monitoring period. This allows for brief fluctuations while ensuring the system remains stable and available.\n- Whether the steady state meets the threshold is determined by the following Python script with K8s API:\n```\nimport os\nimport time\nimport argparse\nfrom kubernetes import client, config\nfrom unittest_base import K8sAPIBase\n\nclass TestCartsDBPodCount(K8sAPIBase):\n    def __init__(self):\n        super().__init__()\n        self.v1_apps = client.AppsV1Api()\n\n    def check_carts_db_pod_count(self, namespace, expected_count):\n        pod_count = 0\n        try:\n            resp = self.v1_apps.read_namespaced_deployment(name='carts-db', namespace=namespace)\n            pod_count = resp.status.replicas\n        except client.exceptions.ApiException as e:\n            print(f\"Exception when calling AppsV1Api->read_namespaced_deployment: {e}\")\n        return pod_count\n\n    def test_steady_state(self, duration):\n        namespace = 'sock-shop'\n        expected_count = 2\n        successful_checks = 0\n\n        for _ in range(duration):\n            pod_count = self.check_carts_db_pod_count(namespace, expected_count)\n            print(f\"Current 'carts-db' pod count: {pod_count}\")\n            if pod_count == expected_count:\n                successful_checks += 1\n            time.sleep(1)\n\n        # Calculate the percentage of successful checks\n        success_percentage = (successful_checks / duration) * 100\n        print(f\"Success percentage: {success_percentage}%\")\n\n        # Assert that the success percentage is at least 95%\n        assert success_percentage >= 95, f\"Pod count was not stable enough: {success_percentage}% < 95%\"\n\n\ndef main():\n    parser = argparse.ArgumentParser(description='Test carts-db pod count steady state.')\n    parser.add_argument('--duration', type=int, default=60, help='Duration to check the pod count in seconds')\n    args = parser.parse_args()\n\n    test = TestCartsDBPodCount()\n    test.test_steady_state(args.duration)\n\n\nif __name__ == '__main__':\n    main()\n\n```2nd steady states:\n- Name: front-end-pod-count\n- Description: The next issue to address is the 'Single Replica Deployment' in the 'front-end' Deployment. This is a critical issue because having only one replica can lead to downtime if the pod fails. To verify the steady state, we can measure the number of 'front-end' pods running, ensuring it matches the expected replica count of 1. This will help us understand if the pod is being scheduled correctly and remains available despite being a single replica. Monitoring the pod count will allow us to verify the system's resilience to potential failures.\n- Threshold for the steady state: At least 1 front-end pod must be running 95% of the time during a 1-minute monitoring period.; The current state of the system shows that the front-end pod count is consistently at 1, which matches the expected replica count as per the deployment configuration. Given that the system is currently stable with a single replica, the threshold should ensure that at least 1 front-end pod is running at all times. However, to account for potential fluctuations or brief disruptions, a reasonable tolerance should be included. Since the experiment must be completed within 1 minute, we can set a threshold that allows for a brief period where the pod count might temporarily drop below 1, but it should recover quickly. Therefore, the threshold can be defined as having at least 1 front-end pod running 95% of the time during the 1-minute monitoring period. This allows for a brief 3-second window where the pod count might be 0, but it should not persist beyond that.\n- Whether the steady state meets the threshold is determined by the following Python script with K8s API:\n```\nimport os\nimport time\nimport argparse\nfrom kubernetes import client, config\nfrom unittest_base import K8sAPIBase\n\nclass TestFrontEndPodCount(K8sAPIBase):\n    def __init__(self, namespace, duration):\n        super().__init__()\n        self.namespace = namespace\n        self.duration = duration\n\n    def test_front_end_pod_count(self):\n        pod_label_selector = 'name=front-end'\n        successful_checks = 0\n\n        # Check the pod count every second for the specified duration\n        for _ in range(self.duration):\n            pods = self.v1.list_namespaced_pod(namespace=self.namespace, label_selector=pod_label_selector)\n            pod_count = len(pods.items)\n            print(f'Current front-end pod count: {pod_count}')\n\n            # Increment successful checks if pod count is 1 or more\n            if pod_count >= 1:\n                successful_checks += 1\n\n            time.sleep(1)\n\n        # Calculate the percentage of successful checks\n        success_rate = (successful_checks / self.duration) * 100\n        print(f'Success rate: {success_rate}%')\n\n        # Assert that the success rate meets the 95% threshold\n        assert success_rate >= 95, f\"Front-end pod count did not meet the 95% threshold. Success rate: {success_rate}%\"\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Test front-end pod count in the sock-shop namespace.')\n    parser.add_argument('--duration', type=int, default=60, help='Duration to check the pod count in seconds.')\n    args = parser.parse_args()\n\n    test = TestFrontEndPodCount(namespace='sock-shop', duration=args.duration)\n    test.test_front_end_pod_count()\n```\n\nA fault scenario that may occur in my system and may affect the steady states:\n\nAn assumed fault scenario is as follows:\n- Event: Black Friday Sale\n- Used Chaos Engineering tool: Chaos Mesh\n- Faults to simulate the event: [[{'name': 'StressChaos', 'name_id': 0, 'scope': {'namespace': 'sock-shop', 'label': 'name=carts-db'}}], [{'name': 'PodChaos', 'name_id': 1, 'scope': {'namespace': 'sock-shop', 'label': 'name=front-end'}}], [{'name': 'NetworkChaos', 'name_id': 2, 'scope': {'namespace': 'sock-shop', 'label': 'name=front-end'}}]]\n- Description: During a Black Friday sale, the system is expected to handle a significant increase in traffic and load. This event will test the system's ability to maintain steady states under high demand. The system's weaknesses, such as missing resource requests and single replica deployments, can lead to potential downtime or degraded performance. To simulate this event, we will inject faults that target these weaknesses. First, we will use StressChaos to simulate high CPU and memory usage on the 'carts-db' pods, which lack resource requests, to see if they can maintain the required pod count. Next, we will use PodChaos to kill the single replica 'front-end' pod to test its resilience and recovery. Finally, we will introduce NetworkChaos to simulate network latency on the 'front-end' service, which will test the system's ability to handle network issues during high traffic. This sequence of fault injections will simulate the phenomena of a Black Friday sale, where high load, potential failures, and network issues are common.\n\nPlease follow the instructions below regarding Chaos Engineering as necessary:\n- The Chaos-Engineering experiment must be completed within 1 minute.\n\n- When using k6 in steady-state definition, always select a request URL from the following options (other requests are invalid):\n  1. http://front-end.sock-shop.svc.cluster.local/\n  2. http://front-end.sock-shop.svc.cluster.local/catalogue?size=10\n  3. http://front-end.sock-shop.svc.cluster.local/detail.html?id=<ID>\n  Replace <ID> with an available ID: [`03fef6ac-1896-4ce8-bd69-b798f85c6e0b`, `3395a43e-2d88-40de-b95f-e00e1502085b`, `510a0d7e-8e83-4193-b483-e27e09ddc34d`, `808a2de1-1aaa-4c25-a9b9-6612e8f29a38`, `819e1fbf-8b7e-4f6d-811f-693534916a8b`, `837ab141-399e-4c1f-9abc-bace40296bac`, `a0a4f044-b040-410d-8ead-4de0446aec7e`, `d3588630-ad8e-49df-bbd7-3167f7efb246`, `zzz4f044-b040-410d-8ead-4de0446aec7e`]\n  4. http://front-end.sock-shop.svc.cluster.local/category/\n  5. http://front-end.sock-shop.svc.cluster.local/category?tags=<TAG>\n  Replace <TAG> with an available tag: [`magic`, `action`, `blue`, `brown`, `black`, `sport`, `formal`, `red`, `green`, `skin`, `geek`]\n  6. http://front-end.sock-shop.svc.cluster.local/basket.html\n\nNow, please detail the parameters of the fault \"NetworkChaos({'namespace': 'sock-shop', 'label': 'name=front-end'})\".\nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {\"properties\": {\"foo\": {\"title\": \"Foo\", \"description\": \"a list of strings\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"foo\"]}\nthe object {\"foo\": [\"bar\", \"baz\"]} is a well-formatted instance of the schema. The object {\"properties\": {\"foo\": [\"bar\", \"baz\"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{\"properties\": {\"action\": {\"title\": \"Action\", \"description\": \"Indicates the specific fault type. Available types include: netem, delay (network delay), loss (packet loss), duplicate (packet duplicating), corrupt (packet corrupt), partition (network partition), and bandwidth (network bandwidth limit). After you specify action field, specify action-related fields for other necessary field configuration.\", \"example\": \"Partition\", \"enum\": [\"netem\", \"delay\", \"loss\", \"duplicate\", \"corrupt\", \"partition\", \"bandwidth\"], \"type\": \"string\"}, \"direction\": {\"title\": \"Direction\", \"description\": \"Indicates the direction of target packets. Available vaules include from (the packets from target), to (the packets to target), and both (the packets from or to target). This parameter makes Chaos only take effect for a specific direction of packets.\", \"default\": \"to\", \"example\": \"both\", \"enum\": [\"from\", \"to\", \"both\"], \"type\": \"string\"}, \"target\": {\"title\": \"Target\", \"description\": \"Used in combination with direction, making Chaos only effective for some packets. 'from' and 'both' direction cannot be used when targets is empty in netem action.\", \"allOf\": [{\"$ref\": \"#/definitions/Selector\"}]}, \"mode\": {\"title\": \"Mode\", \"description\": \"Specifies the mode of the experiment. The mode options include one (selecting a random Pod), all (selecting all eligible Pods), fixed (selecting a specified number of eligible Pods), fixed-percent (selecting a specified percentage of Pods from the eligible Pods), and random-max-percent (selecting the maximum percentage of Pods from the eligible Pods)\", \"example\": \"one\", \"enum\": [\"one\", \"all\", \"fixed\", \"fixed-percent\", \"random-max-percent\"], \"type\": \"string\"}, \"value\": {\"title\": \"Value\", \"description\": \"Provides parameters for the mode configuration, depending on mode. For example, when mode is set to fixed-percent, value specifies the percentage of Pods.\", \"example\": \"1\", \"type\": \"string\"}, \"selector\": {\"title\": \"Selector\", \"description\": \"Specifies the target Pod.\", \"allOf\": [{\"$ref\": \"#/definitions/Selectors\"}]}, \"externalTargets\": {\"title\": \"Externaltargets\", \"description\": \"Indicates the network targets except for Kubernetes, which can be IPv4 addresses or domains. This parameter only works with direction: to.\", \"example\": [\"1.1.1.1\", \"www.google.com\"], \"type\": \"array\", \"items\": {\"type\": \"string\"}}, \"device\": {\"title\": \"Device\", \"description\": \"Specifies the affected network interface\", \"example\": \"eth0\", \"type\": \"string\"}, \"delay\": {\"title\": \"Delay\", \"description\": \"When setting action to delay means simulating network delay fault, you also need to configure this parameters.\", \"allOf\": [{\"$ref\": \"#/definitions/Deplay\"}]}, \"loss\": {\"title\": \"Loss\", \"description\": \"When setting action to loss means simulating packet loss fault, you can also configure this parameters.\", \"allOf\": [{\"$ref\": \"#/definitions/Loss\"}]}, \"duplicated\": {\"title\": \"Duplicated\", \"description\": \"When setting action to duplicate, meaning simulating package duplication, you can also set this parameters.\", \"allOf\": [{\"$ref\": \"#/definitions/Duplicate\"}]}, \"corrupt\": {\"title\": \"Corrupt\", \"description\": \"When setting action to corrupt means simulating package corruption fault, you can also configure the following parameters.\", \"allOf\": [{\"$ref\": \"#/definitions/Corrupt\"}]}, \"rate\": {\"title\": \"Rate\", \"description\": \"When setting action to rate means simulating bandwidth rate fault, you also need to configure this parameters. This action is similar to bandwidth/rate below, however, the key distinction is that this action can combine with other netem actions listed above. However, if you require more control over the bandwidth simulation such as limiting the buffer size, select the bandwidth action.\", \"allOf\": [{\"$ref\": \"#/definitions/Rate\"}]}, \"bandwidth\": {\"title\": \"Bandwidth\", \"description\": \"When setting 'action' to 'bandwidth' means simulating bandwidth limit fault, you also need to configure this parameters. This action is mutually exclusive with any netem action defined above. If you need to inject bandwidth rate along with other network failures such as corruption, use the rate action instead.\", \"allOf\": [{\"$ref\": \"#/definitions/Bandwidth\"}]}}, \"required\": [\"action\", \"mode\", \"selector\"], \"definitions\": {\"SetBasedRequirements\": {\"title\": \"SetBasedRequirements\", \"type\": \"object\", \"properties\": {\"key\": {\"title\": \"Key\", \"description\": \"Label key\", \"type\": \"string\"}, \"operator\": {\"title\": \"Operator\", \"description\": \"Select an operator.\", \"enum\": [\"In\", \"NotIn\", \"Exists\", \"DoesNotExist\"], \"type\": \"string\"}, \"values\": {\"title\": \"Values\", \"description\": \"Label values. The values set must be non-empty in the case of In and NotIn.\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"key\", \"operator\", \"values\"]}, \"Selectors\": {\"title\": \"Selectors\", \"type\": \"object\", \"properties\": {\"namespaces\": {\"title\": \"Namespaces\", \"description\": \"Specifies the namespace of the experiment's target Pod. If this selector is None, Chaos Mesh will set it to the namespace of the current Chaos experiment.\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}, \"labelSelectors\": {\"title\": \"Labelselectors\", \"description\": \"Specifies the label-key/value pairs that the experiment's target Pod must have. If multiple labels are specified, the experiment target must have all the labels specified by this selector.\", \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"expressionSelectors\": {\"title\": \"Expressionselectors\", \"description\": \"Specifies a set of expressions that define the label's rules to specifiy the experiment's target Pod.\", \"example\": [{\"key\": \"tier\", \"operator\": \"In\", \"values\": [\"cache\"]}, {\"key\": \"environment\", \"operator\": \"NotIn\", \"values\": [\"dev\"]}], \"type\": \"array\", \"items\": {\"$ref\": \"#/definitions/SetBasedRequirements\"}}, \"annotationSelectors\": {\"title\": \"Annotationselectors\", \"description\": \"Specifies the annotation-key/value pairs that the experiment's target Pod must have. If multiple annotations are specified, the experiment target must have all annotations specified by this selector.\", \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"fieldSelectors\": {\"title\": \"Fieldselectors\", \"description\": \"Specifies the field-key/value pairs of the experiment's target Pod. If multiple fields are specified, the experiment target must have all fields set by this selector.\", \"example\": {\"metadata.name\": \"my-pod\", \"metadata.namespace\": \"dafault\"}, \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"podPhaseSelectors\": {\"title\": \"Podphaseselectors\", \"description\": \"Specifies the phase of the experiment's target Pod. If this selector is None, the target Pod's phase is not limited.\", \"type\": \"array\", \"items\": {\"enum\": [\"Pending\", \"Running\", \"Succeeded\", \"Failed\", \"Unknown\"], \"type\": \"string\"}}, \"nodeSelectors\": {\"title\": \"Nodeselectors\", \"description\": \"Specifies the node-label-key/value pairs to which the experiment's target Pod belongs.\", \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"nodes\": {\"title\": \"Nodes\", \"description\": \"Specifies the node to which the experiment's target Pod belongs. The target Pod can only belong to one node in the configured node list. If multiple node labels are specified, the node to which the experiment's target Pod belongs must have all labels specified by this selector.\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}, \"pods\": {\"title\": \"Pods\", \"description\": \"Specifies the namespaces and list of the experiment's target Pods. If you have specified this selector, Chaos Mesh ignores other configured selectors.\", \"example\": {\"default\": [\"pod-0\", \"pod-2\"]}, \"type\": \"object\", \"additionalProperties\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}}, \"Selector\": {\"title\": \"Selector\", \"type\": \"object\", \"properties\": {\"mode\": {\"title\": \"Mode\", \"description\": \"Specifies the mode of the experiment. The mode options include one (selecting a random Pod), all (selecting all eligible Pods), fixed (selecting a specified number of eligible Pods), fixed-percent (selecting a specified percentage of Pods from the eligible Pods), and random-max-percent (selecting the maximum percentage of Pods from the eligible Pods)\", \"example\": \"one\", \"enum\": [\"one\", \"all\", \"fixed\", \"fixed-percent\", \"random-max-percent\"], \"type\": \"string\"}, \"selector\": {\"title\": \"Selector\", \"description\": \"Specifies the target Pod.\", \"example\": null, \"allOf\": [{\"$ref\": \"#/definitions/Selectors\"}]}}, \"required\": [\"mode\", \"selector\"]}, \"Reorder\": {\"title\": \"Reorder\", \"type\": \"object\", \"properties\": {\"reorder\": {\"title\": \"Reorder\", \"description\": \"Indicates the probability to reorder\", \"default\": \"0\", \"example\": \"0.5\", \"type\": \"string\"}, \"correlation\": {\"title\": \"Correlation\", \"description\": \"Indicates the correlation between this time's length of delay time and the previous time's length of delay time. Range of value: [0, 100]\", \"default\": \"0\", \"example\": \"50\", \"type\": \"string\"}, \"gap\": {\"title\": \"Gap\", \"description\": \"Indicates the gap before and after packet reordering\", \"default\": 0, \"example\": 5, \"type\": \"integer\"}}}, \"Deplay\": {\"title\": \"Deplay\", \"type\": \"object\", \"properties\": {\"latency\": {\"title\": \"Latency\", \"description\": \"Indicates the network latency\", \"example\": \"2ms\", \"type\": \"string\"}, \"correlation\": {\"title\": \"Correlation\", \"description\": \"Indicates the correlation between the current latency and the previous one. Range of value: [0, 100]. Specify only the number. NEVER include any units.\", \"example\": \"50\", \"type\": \"string\"}, \"jitter\": {\"title\": \"Jitter\", \"description\": \"Indicates the range of the network latency\", \"example\": \"1ms\", \"type\": \"string\"}, \"reorder\": {\"title\": \"Reorder\", \"description\": \"Indicates the status of network packet reordering\", \"allOf\": [{\"$ref\": \"#/definitions/Reorder\"}]}}}, \"Loss\": {\"title\": \"Loss\", \"type\": \"object\", \"properties\": {\"loss\": {\"title\": \"Loss\", \"description\": \"Indicates the probability of packet loss. Range of value: [0, 100]. Specify only the number. NEVER include any units.\", \"default\": \"0\", \"example\": \"50\", \"type\": \"string\"}, \"correlation\": {\"title\": \"Correlation\", \"description\": \"Indicates the correlation between the probability of current packet loss and the previous time's packet loss. Range of value: [0, 100]. Specify only the number. NEVER include any units.\", \"default\": \"0\", \"example\": \"50\", \"type\": \"string\"}}}, \"Duplicate\": {\"title\": \"Duplicate\", \"type\": \"object\", \"properties\": {\"duplicate\": {\"title\": \"Duplicate\", \"description\": \"Indicates the probability of packet duplicating. Range of value: [0, 100]. Specify only the number. NEVER include any units.\", \"default\": \"0\", \"example\": \"50\", \"type\": \"string\"}, \"correlation\": {\"title\": \"Correlation\", \"description\": \"Indicates the correlation between the probability of current packet duplicating and the previous time's packet duplicating. Range of value: [0, 100]. Specify only the number. NEVER include any units.\", \"default\": \"0\", \"example\": \"50\", \"type\": \"string\"}}}, \"Corrupt\": {\"title\": \"Corrupt\", \"type\": \"object\", \"properties\": {\"corrupt\": {\"title\": \"Corrupt\", \"description\": \"Indicates the probability of packet corruption. Range of value: [0, 100]. Specify only the number. NEVER include any units.\", \"default\": \"0\", \"example\": \"50\", \"type\": \"string\"}, \"correlation\": {\"title\": \"Correlation\", \"description\": \"Indicates the correlation between the probability of current packet corruption and the previous time's packet corruption. Range of value: [0, 100]. Specify only the number. NEVER include any units.\", \"default\": \"0\", \"example\": \"50\", \"type\": \"string\"}}}, \"Rate\": {\"title\": \"Rate\", \"type\": \"object\", \"properties\": {\"rate\": {\"title\": \"Rate\", \"description\": \"Indicates the rate of bandwidth limit. Allows bit, kbit, mbit, gbit, tbit, bps, kbps, mbps, gbps, tbps unit. bps means bytes per second\", \"example\": \"1mbps\", \"type\": \"string\"}}}, \"Bandwidth\": {\"title\": \"Bandwidth\", \"type\": \"object\", \"properties\": {\"rate\": {\"title\": \"Rate\", \"description\": \"Indicates the rate of bandwidth limit. Allows bit, kbit, mbit, gbit, tbit, bps, kbps, mbps, gbps, tbps unit. bps means bytes per second\", \"example\": \"1mbps\", \"type\": \"string\"}, \"limit\": {\"title\": \"Limit\", \"description\": \"Indicates the number of bytes waiting in queue\", \"example\": 1, \"type\": \"integer\"}, \"buffer\": {\"title\": \"Buffer\", \"description\": \"Indicates the maximum number of bytes that can be sent instantaneously\", \"example\": 1, \"type\": \"integer\"}, \"peakrate\": {\"title\": \"Peakrate\", \"description\": \"Indicates the maximum consumption of bucket (usually not set)\", \"example\": 1, \"type\": \"integer\"}, \"minburst\": {\"title\": \"Minburst\", \"description\": \"Indicates the size of peakrate bucket (usually not set)\", \"example\": 1, \"type\": \"integer\"}}}}}\n```\nAI: ```json\n{\"action\":"
            ],
            "{\"action\": \"delay\", \"mode\": \"all\", \"selector\": {\"namespaces\": [\"sock-shop\"], \"labelSelectors\": {\"name\": \"front-end\"}}, \"direction\": \"to\", \"device\": \"eth0\", \"delay\": {\"latency\": \"100ms\", \"jitter\": \"10ms\", \"correlation\": \"50\"}}"
        ]
    }
]