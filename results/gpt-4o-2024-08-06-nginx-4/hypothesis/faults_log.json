[
    {
        "name": "fault_scenario_assumption",
        "token_usage": {
            "input_tokens": 2851,
            "output_tokens": 237,
            "total_tokens": 3088
        },
        "message_history": [
            [
                "System: You are a helpful AI assistant for Chaos Engineering. \nGiven k8s manifests for a system, the steady states of the system, and user's instructions for Chaos Engineering, you will define the most impactful fault injections to reveal potential weaknesses of the system, such as insufficient recovery functions, resource allocation, redundancy, etc.\nAlways keep the following rules:\n- First, assume a real-world event that may be most impactful in the the system, such as promotion campaign, cyber attacks, disasters, etc.\n- Then, define the most impactful fault injections to reveal potential weaknesses of the given system while simulating the assumed real-world event.\n- Prioritize fault injections that target the system's weak resources related to the steady states to verify whether those resources can handle the faults and the steady states can be maintained.\n- The injected faults should be selected from the following fault types of Chaos Mesh:\n- PodChaos: simulates Pod failures, such as Pod node restart, Pod's persistent unavailablility, and certain container failures in a specific Pod. The supported subtypes include 'pod-failure', 'pod-kill', 'container-kill'.\n- NetworkChaos: simulates network failures, such as network latency, packet loss, packet disorder, and network partitions.\n- DNSChaos: simulates DNS failures, such as the parsing failure of DNS domain name and the wrong IP address returned.\n- HTTPChaos: simulates HTTP communication failures, such as HTTP communication latency.\n- StressChaos: simulates CPU race or memory race.\n- IOChaos: simulates the I/O failure of an application file, such as I/O delays, read and write failures.\n- TimeChaos: simulates the time jump exception.\n\n- The output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {\"properties\": {\"foo\": {\"title\": \"Foo\", \"description\": \"a list of strings\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"foo\"]}\nthe object {\"foo\": [\"bar\", \"baz\"]} is a well-formatted instance of the schema. The object {\"properties\": {\"foo\": [\"bar\", \"baz\"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{\"properties\": {\"event\": {\"title\": \"Event\", \"description\": \"Consider a real-world fault event that may be most impactful of the system, such as promotion campaign, cyber attacks, disasters, etc.\", \"type\": \"string\"}, \"thought\": {\"title\": \"Thought\", \"description\": \"Write down your thought process to define a sequence of fault injections that exploit the system's weaknesses of while simulating the fault event: 1) how the system's weaknesses affect the steady state; 2) how each fault injection exploit the system's weaknesses; 3) how the sequence simulates the phenamena in the fault event (consider carefully the sequence order). Prioritize fault injections that directly attack the weaknessses of the system, such as insufficient recovery functions, resource allocation, redundancy, etc.\", \"type\": \"string\"}, \"faults\": {\"title\": \"Faults\", \"description\": \"Define a sequence of fault injections that exploit the system's vulnerabilities to the fullest according to the above thoughts. In the inner list, a set of simultaneously injected faults are listed, while in the outer list, the sets are listed in the injection order. For example, [[fault_a], [fault_b, fault_c]] indicates that fault_a is injected, then fault_b and fault_c are injected simultaneously.\", \"type\": \"array\", \"items\": {\"type\": \"array\", \"items\": {\"$ref\": \"#/definitions/Fault\"}}}}, \"required\": [\"event\", \"thought\", \"faults\"], \"definitions\": {\"Fault\": {\"title\": \"Fault\", \"type\": \"object\", \"properties\": {\"name\": {\"title\": \"Name\", \"description\": \"Select a fault type from [\\\"PodChaos\\\", \\\"NetworkChaos\\\", \\\"DNSChaos\\\", \\\"HTTPChaos\\\", \\\"StressChaos\\\", \\\"IOChaos\\\", \\\"TimeChaos\\\"]\", \"enum\": [\"PodChaos\", \"NetworkChaos\", \"DNSChaos\", \"HTTPChaos\", \"StressChaos\", \"IOChaos\", \"TimeChaos\"], \"type\": \"string\"}, \"name_id\": {\"title\": \"Name Id\", \"description\": \"An identifier to prevent name conflicts when the same Fault appears. Assign numbers starting from 0 in sequential order to prevent name conflicts.\", \"type\": \"integer\"}, \"scope\": {\"title\": \"Scope\", \"description\": \"Specify only the fault injection scope (i.e., the target resource where the fault is injected) in advance here.\", \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}}, \"required\": [\"name\", \"name_id\", \"scope\"]}}}\n```\nHuman: Here is the overview of my system:\nThe system consists of the following K8s manifest(s):K8s manifest: nginx/pod.yaml\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example-pod\n  labels:\n    app: example\nspec:\n  restartPolicy: Never\n  containers:\n  - name: example-container\n    image: nginx:1.17.1\n    ports:\n    - containerPort: 80\n```\nSummary of nginx/pod.yaml:\n- This manifest defines a Kubernetes Pod.\n- The Pod is named 'example-pod'.\n- It includes metadata with a label 'app: example'.\n- The Pod's restart policy is set to 'Never', meaning it won't restart automatically if it fails.\n- The Pod contains one container named 'example-container'.\n- The container uses the 'nginx:1.17.1' image, which is a specific version of the Nginx web server.\n- The container exposes port 80, which is commonly used for HTTP traffic.\n\nK8s manifest: nginx/service.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: example-service\nspec:\n  selector:\n    app: example\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n```\nSummary of nginx/service.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'example-service'.\n- It uses the 'v1' API version.\n- The Service selects pods with the label 'app: example'.\n- It exposes the Service on port 80 using the TCP protocol.\n- The Service forwards traffic to the target port 80 on the selected pods.\n\nThe resiliency issues/weaknesses in the system are as follows:\nIssue #0: Pod Restart Policy\n  - details: The Pod will not restart automatically if it fails, which can lead to downtime.\n  - manifests having the issues: ['nginx/pod.yaml']\n  - problematic config: restartPolicy: Never\n\nIssue #1: Single Pod Deployment\n  - details: Having a single Pod means there is no redundancy. If the Pod fails, the service will be unavailable.\n  - manifests having the issues: ['nginx/pod.yaml']\n  - problematic config: Only one Pod is defined without a Deployment or ReplicaSet.\n\nThe expected type of application on the system (i.e., K8s manfests):\nA simple web server application using Nginx to serve HTTP content.; The manifests provided define a Kubernetes Pod and a Service. The Pod runs an Nginx container, which is a popular web server used to serve static content, reverse proxy, or load balance HTTP traffic. The Service is configured to expose this Pod on port 80, which is the default port for HTTP traffic. Given the use of Nginx and the configuration of the Service, it is logical to assume that these manifests are intended to deploy a simple web server application. The file names and the use of Nginx further support this assumption.\n\nSteady states of the network system defined by the manifests are the following:\n2 steady states are defined.\n1st steady states:\n- Name: example-pod-running\n- Description: The first issue to address is the Pod's restart policy set to 'Never'. This is a critical issue because if the Pod fails, it will not restart, leading to potential downtime. Therefore, the steady state should ensure that the Pod is running and available. A measurable output for this steady state is the number of running Pods, which should be 1, as there is only one Pod defined in the manifest. This steady state will help verify that the Pod is up and running, which is crucial given the restart policy configuration.\n- Threshold for the steady state: The pod should be running at least 90% of the time during the check period.; The steady state we are considering is whether the 'example-pod' is running. The current state shows that the pod was checked 5 times over a duration of 5 seconds, and it was running each time, resulting in a running count of 5. This indicates that the pod is consistently running during the check period. Given the constraints of the chaos engineering experiment, which must be completed within 1 minute, we can set a threshold that allows for some tolerance in case of brief fluctuations. A reasonable threshold would be that the pod should be running at least 90% of the time during the check period. This allows for a small margin of error while still ensuring that the pod is generally available and running.\n- Whether the steady state meets the threshold is determined by the following Python script with K8s API:\n```\nimport os\nimport time\nimport argparse\nfrom kubernetes import client, config\nfrom unittest_base import K8sAPIBase\n\nclass TestPodRunningState(K8sAPIBase):\n    def __init__(self):\n        super().__init__()\n\n    def check_pod_status(self, namespace, pod_name):\n        try:\n            pod = self.v1.read_namespaced_pod(name=pod_name, namespace=namespace)\n            return pod.status.phase == 'Running'\n        except client.exceptions.ApiException as e:\n            print(f\"Exception when calling CoreV1Api->read_namespaced_pod: {e}\")\n            return False\n\n    def test_pod_running_state(self, duration):\n        namespace = 'default'\n        pod_name = 'example-pod'\n        running_count = 0\n\n        # Check the pod status every second for the specified duration\n        for _ in range(duration):\n            if self.check_pod_status(namespace, pod_name):\n                running_count += 1\n            time.sleep(1)\n\n        # Calculate the running percentage\n        running_percentage = (running_count / duration) * 100\n\n        # Assert that the running percentage is at least 90%\n        assert running_percentage >= 90, f\"Pod '{pod_name}' running percentage is below threshold: {running_percentage}%\"\n\n        print(f\"Pod '{pod_name}' running status checked {duration} times. Running percentage: {running_percentage}%.\")\n\n\ndef main():\n    parser = argparse.ArgumentParser(description='Test if a pod is running at least 90% of the time.')\n    parser.add_argument('--duration', type=int, default=5, help='Duration to check the pod status in seconds.')\n    args = parser.parse_args()\n\n    test = TestPodRunningState()\n    test.test_pod_running_state(args.duration)\n\n\nif __name__ == '__main__':\n    main()\n```2nd steady states:\n- Name: example-service-availability\n- Description: The next issue to address is the 'Single Pod Deployment', which is related to the lack of redundancy. This is a significant issue because if the single Pod fails, the service will be unavailable. To verify this, we can define a steady state that checks the availability of the service itself. A measurable output for this steady state is the service's response time or availability. Since the service is exposed on port 80, we can check if the service is responding to HTTP requests. This steady state will help verify that the service is available and responsive, which is crucial given the single Pod deployment configuration.\n- Threshold for the steady state: Service availability should be at least 99.9% with a response status of 200.; The steady state we are considering is the availability of the 'example-service'. The k6 test results show that the service is currently responding with a 200 status code for all requests, indicating 100% availability. Given that the system consists of a single Pod, any failure in the Pod would result in the service being unavailable. Therefore, the threshold should ensure that the service remains available and responsive. To account for minor fluctuations and network latency, a reasonable threshold would be to maintain a high availability percentage, slightly below 100% to allow for brief, non-critical failures. A threshold of 99.9% availability is a common standard for web services, allowing for some tolerance while still ensuring high reliability.\n- Whether the steady state meets the threshold is determined by the following K6 Javascript:\n```\nimport http from 'k6/http';\nimport { check } from 'k6';\n\nexport const options = {\n  vus: 1,\n  duration: '5s',\n  thresholds: {\n    // Ensure that the service availability is at least 99.9%\n    'http_req_failed': ['rate<=0.001'], // 0.1% failure rate corresponds to 99.9% availability\n  },\n};\n\nexport default function () {\n  const res = http.get('http://example-service.default.svc.cluster.local:80');\n  check(res, {\n    'status is 200': (r) => r.status === 200,\n  });\n}\n\n```\n\nPlease follow the instructions below regarding Chaos Engineering as necessary:\n- The Chaos-Engineering experiment must be completed within 1 minute.\n\nNow, please define fault injections to reveal the system's vulnerabilities.\nAI: ```json\n{\"event\":"
            ],
            "{\"event\": \"Cyber Attack\", \"thought\": \"Given the system's weaknesses, a cyber attack targeting the single Pod and its network could be highly impactful. The Pod's restart policy set to 'Never' means that if the Pod fails, it will not restart, leading to downtime. Additionally, the single Pod deployment means there is no redundancy, so any failure will make the service unavailable. To simulate a cyber attack, we can start by injecting a PodChaos fault to kill the Pod, testing the system's ability to handle Pod failures. This will directly exploit the lack of redundancy and the restart policy issue. Next, we can simulate a network attack using NetworkChaos to introduce network latency, testing the service's ability to maintain availability under network stress. This sequence simulates a cyber attack by first taking down the Pod and then stressing the network, revealing the system's vulnerabilities in handling such scenarios.\", \"faults\": [[{\"name\": \"PodChaos\", \"name_id\": 0, \"scope\": {\"pod\": \"example-pod\"}}], [{\"name\": \"NetworkChaos\", \"name_id\": 1, \"scope\": {\"service\": \"example-service\"}}]]}\n"
        ]
    },
    {
        "name": "refine_fault_params",
        "token_usage": {
            "input_tokens": 9095,
            "output_tokens": 142,
            "total_tokens": 9237
        },
        "message_history": [
            [
                "System: You are a helpful AI assistant for Chaos Engineering.\nGiven k8s manifests that defines a network system, its steady states, and a fault type that may affect the steady states in the system, please detail the parameters of the fault.\nAlways keep the following rules:\n- Pay attention to namespace specification. If the namespace is specified in the manifest, it is deployed with the namespace. If not, it is deployed with the 'default' namespace.\n- The parameters follow the format of Chaos Mesh.\nHuman: Here is the overview of my system:\nThe system consists of the following K8s manifest(s):K8s manifest: nginx/pod.yaml\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example-pod\n  labels:\n    app: example\nspec:\n  restartPolicy: Never\n  containers:\n  - name: example-container\n    image: nginx:1.17.1\n    ports:\n    - containerPort: 80\n```\nSummary of nginx/pod.yaml:\n- This manifest defines a Kubernetes Pod.\n- The Pod is named 'example-pod'.\n- It includes metadata with a label 'app: example'.\n- The Pod's restart policy is set to 'Never', meaning it won't restart automatically if it fails.\n- The Pod contains one container named 'example-container'.\n- The container uses the 'nginx:1.17.1' image, which is a specific version of the Nginx web server.\n- The container exposes port 80, which is commonly used for HTTP traffic.\n\nK8s manifest: nginx/service.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: example-service\nspec:\n  selector:\n    app: example\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n```\nSummary of nginx/service.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'example-service'.\n- It uses the 'v1' API version.\n- The Service selects pods with the label 'app: example'.\n- It exposes the Service on port 80 using the TCP protocol.\n- The Service forwards traffic to the target port 80 on the selected pods.\n\nThe resiliency issues/weaknesses in the system are as follows:\nIssue #0: Pod Restart Policy\n  - details: The Pod will not restart automatically if it fails, which can lead to downtime.\n  - manifests having the issues: ['nginx/pod.yaml']\n  - problematic config: restartPolicy: Never\n\nIssue #1: Single Pod Deployment\n  - details: Having a single Pod means there is no redundancy. If the Pod fails, the service will be unavailable.\n  - manifests having the issues: ['nginx/pod.yaml']\n  - problematic config: Only one Pod is defined without a Deployment or ReplicaSet.\n\nThe expected type of application on the system (i.e., K8s manfests):\nA simple web server application using Nginx to serve HTTP content.; The manifests provided define a Kubernetes Pod and a Service. The Pod runs an Nginx container, which is a popular web server used to serve static content, reverse proxy, or load balance HTTP traffic. The Service is configured to expose this Pod on port 80, which is the default port for HTTP traffic. Given the use of Nginx and the configuration of the Service, it is logical to assume that these manifests are intended to deploy a simple web server application. The file names and the use of Nginx further support this assumption.\n\nSteady states of my system:\n2 steady states are defined.\n1st steady states:\n- Name: example-pod-running\n- Description: The first issue to address is the Pod's restart policy set to 'Never'. This is a critical issue because if the Pod fails, it will not restart, leading to potential downtime. Therefore, the steady state should ensure that the Pod is running and available. A measurable output for this steady state is the number of running Pods, which should be 1, as there is only one Pod defined in the manifest. This steady state will help verify that the Pod is up and running, which is crucial given the restart policy configuration.\n- Threshold for the steady state: The pod should be running at least 90% of the time during the check period.; The steady state we are considering is whether the 'example-pod' is running. The current state shows that the pod was checked 5 times over a duration of 5 seconds, and it was running each time, resulting in a running count of 5. This indicates that the pod is consistently running during the check period. Given the constraints of the chaos engineering experiment, which must be completed within 1 minute, we can set a threshold that allows for some tolerance in case of brief fluctuations. A reasonable threshold would be that the pod should be running at least 90% of the time during the check period. This allows for a small margin of error while still ensuring that the pod is generally available and running.\n- Whether the steady state meets the threshold is determined by the following Python script with K8s API:\n```\nimport os\nimport time\nimport argparse\nfrom kubernetes import client, config\nfrom unittest_base import K8sAPIBase\n\nclass TestPodRunningState(K8sAPIBase):\n    def __init__(self):\n        super().__init__()\n\n    def check_pod_status(self, namespace, pod_name):\n        try:\n            pod = self.v1.read_namespaced_pod(name=pod_name, namespace=namespace)\n            return pod.status.phase == 'Running'\n        except client.exceptions.ApiException as e:\n            print(f\"Exception when calling CoreV1Api->read_namespaced_pod: {e}\")\n            return False\n\n    def test_pod_running_state(self, duration):\n        namespace = 'default'\n        pod_name = 'example-pod'\n        running_count = 0\n\n        # Check the pod status every second for the specified duration\n        for _ in range(duration):\n            if self.check_pod_status(namespace, pod_name):\n                running_count += 1\n            time.sleep(1)\n\n        # Calculate the running percentage\n        running_percentage = (running_count / duration) * 100\n\n        # Assert that the running percentage is at least 90%\n        assert running_percentage >= 90, f\"Pod '{pod_name}' running percentage is below threshold: {running_percentage}%\"\n\n        print(f\"Pod '{pod_name}' running status checked {duration} times. Running percentage: {running_percentage}%.\")\n\n\ndef main():\n    parser = argparse.ArgumentParser(description='Test if a pod is running at least 90% of the time.')\n    parser.add_argument('--duration', type=int, default=5, help='Duration to check the pod status in seconds.')\n    args = parser.parse_args()\n\n    test = TestPodRunningState()\n    test.test_pod_running_state(args.duration)\n\n\nif __name__ == '__main__':\n    main()\n```2nd steady states:\n- Name: example-service-availability\n- Description: The next issue to address is the 'Single Pod Deployment', which is related to the lack of redundancy. This is a significant issue because if the single Pod fails, the service will be unavailable. To verify this, we can define a steady state that checks the availability of the service itself. A measurable output for this steady state is the service's response time or availability. Since the service is exposed on port 80, we can check if the service is responding to HTTP requests. This steady state will help verify that the service is available and responsive, which is crucial given the single Pod deployment configuration.\n- Threshold for the steady state: Service availability should be at least 99.9% with a response status of 200.; The steady state we are considering is the availability of the 'example-service'. The k6 test results show that the service is currently responding with a 200 status code for all requests, indicating 100% availability. Given that the system consists of a single Pod, any failure in the Pod would result in the service being unavailable. Therefore, the threshold should ensure that the service remains available and responsive. To account for minor fluctuations and network latency, a reasonable threshold would be to maintain a high availability percentage, slightly below 100% to allow for brief, non-critical failures. A threshold of 99.9% availability is a common standard for web services, allowing for some tolerance while still ensuring high reliability.\n- Whether the steady state meets the threshold is determined by the following K6 Javascript:\n```\nimport http from 'k6/http';\nimport { check } from 'k6';\n\nexport const options = {\n  vus: 1,\n  duration: '5s',\n  thresholds: {\n    // Ensure that the service availability is at least 99.9%\n    'http_req_failed': ['rate<=0.001'], // 0.1% failure rate corresponds to 99.9% availability\n  },\n};\n\nexport default function () {\n  const res = http.get('http://example-service.default.svc.cluster.local:80');\n  check(res, {\n    'status is 200': (r) => r.status === 200,\n  });\n}\n\n```\n\nA fault scenario that may occur in my system and may affect the steady states:\n\nAn assumed fault scenario is as follows:\n- Event: Cyber Attack\n- Used Chaos Engineering tool: Chaos Mesh\n- Faults to simulate the event: [[{'name': 'PodChaos', 'name_id': 0, 'scope': {'pod': 'example-pod'}}], [{'name': 'NetworkChaos', 'name_id': 1, 'scope': {'service': 'example-service'}}]]\n- Description: Given the system's weaknesses, a cyber attack targeting the single Pod and its network could be highly impactful. The Pod's restart policy set to 'Never' means that if the Pod fails, it will not restart, leading to downtime. Additionally, the single Pod deployment means there is no redundancy, so any failure will make the service unavailable. To simulate a cyber attack, we can start by injecting a PodChaos fault to kill the Pod, testing the system's ability to handle Pod failures. This will directly exploit the lack of redundancy and the restart policy issue. Next, we can simulate a network attack using NetworkChaos to introduce network latency, testing the service's ability to maintain availability under network stress. This sequence simulates a cyber attack by first taking down the Pod and then stressing the network, revealing the system's vulnerabilities in handling such scenarios.\n\nPlease follow the instructions below regarding Chaos Engineering as necessary:\n- The Chaos-Engineering experiment must be completed within 1 minute.\n\nNow, please detail the parameters of the fault \"PodChaos({'pod': 'example-pod'})\".\nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {\"properties\": {\"foo\": {\"title\": \"Foo\", \"description\": \"a list of strings\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"foo\"]}\nthe object {\"foo\": [\"bar\", \"baz\"]} is a well-formatted instance of the schema. The object {\"properties\": {\"foo\": [\"bar\", \"baz\"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{\"properties\": {\"action\": {\"title\": \"Action\", \"description\": \"Specifies the fault type from 'pod-failure', 'pod-kill', or 'container-kill'. Note that you may select 'pod-failure' only when the target Pod's container has livenessProbe and readinessProbe defined.\", \"example\": \"pod-kill\", \"enum\": [\"pod-failure\", \"pod-kill\", \"container-kill\"], \"type\": \"string\"}, \"mode\": {\"title\": \"Mode\", \"description\": \"Specifies the mode of the experiment. The mode options include 'one' (selecting a random Pod), 'all' (selecting all eligible Pods), 'fixed' (selecting a specified number of eligible Pods), 'fixed-percent' (selecting a specified percentage of Pods from the eligible Pods), and 'random-max-percent' (selecting the maximum percentage of Pods from the eligible Pods)\", \"example\": \"one\", \"enum\": [\"one\", \"all\", \"fixed\", \"fixed-percent\", \"random-max-percent\"], \"type\": \"string\"}, \"value\": {\"title\": \"Value\", \"description\": \"Provides parameters for the mode configuration, depending on mode.For example, when mode is set to fixed-percent, value specifies the percentage of Pods.\", \"example\": \"1\", \"type\": \"string\"}, \"selector\": {\"title\": \"Selector\", \"description\": \"Specifies the target Pod.\", \"example\": null, \"allOf\": [{\"$ref\": \"#/definitions/Selectors\"}]}, \"containerNames\": {\"title\": \"Containernames\", \"description\": \"When you configure action to container-kill, this configuration is mandatory to specify the target container name for injecting faults.\", \"example\": [\"prometheus\"], \"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"action\", \"mode\", \"selector\"], \"definitions\": {\"SetBasedRequirements\": {\"title\": \"SetBasedRequirements\", \"type\": \"object\", \"properties\": {\"key\": {\"title\": \"Key\", \"description\": \"Label key\", \"type\": \"string\"}, \"operator\": {\"title\": \"Operator\", \"description\": \"Select an operator.\", \"enum\": [\"In\", \"NotIn\", \"Exists\", \"DoesNotExist\"], \"type\": \"string\"}, \"values\": {\"title\": \"Values\", \"description\": \"Label values. The values set must be non-empty in the case of In and NotIn.\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"key\", \"operator\", \"values\"]}, \"Selectors\": {\"title\": \"Selectors\", \"type\": \"object\", \"properties\": {\"namespaces\": {\"title\": \"Namespaces\", \"description\": \"Specifies the namespace of the experiment's target Pod. If this selector is None, Chaos Mesh will set it to the namespace of the current Chaos experiment.\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}, \"labelSelectors\": {\"title\": \"Labelselectors\", \"description\": \"Specifies the label-key/value pairs that the experiment's target Pod must have. If multiple labels are specified, the experiment target must have all the labels specified by this selector.\", \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"expressionSelectors\": {\"title\": \"Expressionselectors\", \"description\": \"Specifies a set of expressions that define the label's rules to specifiy the experiment's target Pod.\", \"example\": [{\"key\": \"tier\", \"operator\": \"In\", \"values\": [\"cache\"]}, {\"key\": \"environment\", \"operator\": \"NotIn\", \"values\": [\"dev\"]}], \"type\": \"array\", \"items\": {\"$ref\": \"#/definitions/SetBasedRequirements\"}}, \"annotationSelectors\": {\"title\": \"Annotationselectors\", \"description\": \"Specifies the annotation-key/value pairs that the experiment's target Pod must have. If multiple annotations are specified, the experiment target must have all annotations specified by this selector.\", \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"fieldSelectors\": {\"title\": \"Fieldselectors\", \"description\": \"Specifies the field-key/value pairs of the experiment's target Pod. If multiple fields are specified, the experiment target must have all fields set by this selector.\", \"example\": {\"metadata.name\": \"my-pod\", \"metadata.namespace\": \"dafault\"}, \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"podPhaseSelectors\": {\"title\": \"Podphaseselectors\", \"description\": \"Specifies the phase of the experiment's target Pod. If this selector is None, the target Pod's phase is not limited.\", \"type\": \"array\", \"items\": {\"enum\": [\"Pending\", \"Running\", \"Succeeded\", \"Failed\", \"Unknown\"], \"type\": \"string\"}}, \"nodeSelectors\": {\"title\": \"Nodeselectors\", \"description\": \"Specifies the node-label-key/value pairs to which the experiment's target Pod belongs.\", \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"nodes\": {\"title\": \"Nodes\", \"description\": \"Specifies the node to which the experiment's target Pod belongs. The target Pod can only belong to one node in the configured node list. If multiple node labels are specified, the node to which the experiment's target Pod belongs must have all labels specified by this selector.\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}, \"pods\": {\"title\": \"Pods\", \"description\": \"Specifies the namespaces and list of the experiment's target Pods. If you have specified this selector, Chaos Mesh ignores other configured selectors.\", \"example\": {\"default\": [\"pod-0\", \"pod-2\"]}, \"type\": \"object\", \"additionalProperties\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}}}}\n```\nAI: ```json\n{\"action\":"
            ],
            "{\"action\": \"pod-kill\", \"mode\": \"one\", \"selector\": {\"namespaces\": [\"default\"], \"labelSelectors\": {\"app\": \"example\"}}}",
            [
                "System: You are a helpful AI assistant for Chaos Engineering.\nGiven k8s manifests that defines a network system, its steady states, and a fault type that may affect the steady states in the system, please detail the parameters of the fault.\nAlways keep the following rules:\n- Pay attention to namespace specification. If the namespace is specified in the manifest, it is deployed with the namespace. If not, it is deployed with the 'default' namespace.\n- The parameters follow the format of Chaos Mesh.\nHuman: Here is the overview of my system:\nThe system consists of the following K8s manifest(s):K8s manifest: nginx/pod.yaml\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example-pod\n  labels:\n    app: example\nspec:\n  restartPolicy: Never\n  containers:\n  - name: example-container\n    image: nginx:1.17.1\n    ports:\n    - containerPort: 80\n```\nSummary of nginx/pod.yaml:\n- This manifest defines a Kubernetes Pod.\n- The Pod is named 'example-pod'.\n- It includes metadata with a label 'app: example'.\n- The Pod's restart policy is set to 'Never', meaning it won't restart automatically if it fails.\n- The Pod contains one container named 'example-container'.\n- The container uses the 'nginx:1.17.1' image, which is a specific version of the Nginx web server.\n- The container exposes port 80, which is commonly used for HTTP traffic.\n\nK8s manifest: nginx/service.yaml\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: example-service\nspec:\n  selector:\n    app: example\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n```\nSummary of nginx/service.yaml:\n- This manifest defines a Kubernetes Service.\n- The Service is named 'example-service'.\n- It uses the 'v1' API version.\n- The Service selects pods with the label 'app: example'.\n- It exposes the Service on port 80 using the TCP protocol.\n- The Service forwards traffic to the target port 80 on the selected pods.\n\nThe resiliency issues/weaknesses in the system are as follows:\nIssue #0: Pod Restart Policy\n  - details: The Pod will not restart automatically if it fails, which can lead to downtime.\n  - manifests having the issues: ['nginx/pod.yaml']\n  - problematic config: restartPolicy: Never\n\nIssue #1: Single Pod Deployment\n  - details: Having a single Pod means there is no redundancy. If the Pod fails, the service will be unavailable.\n  - manifests having the issues: ['nginx/pod.yaml']\n  - problematic config: Only one Pod is defined without a Deployment or ReplicaSet.\n\nThe expected type of application on the system (i.e., K8s manfests):\nA simple web server application using Nginx to serve HTTP content.; The manifests provided define a Kubernetes Pod and a Service. The Pod runs an Nginx container, which is a popular web server used to serve static content, reverse proxy, or load balance HTTP traffic. The Service is configured to expose this Pod on port 80, which is the default port for HTTP traffic. Given the use of Nginx and the configuration of the Service, it is logical to assume that these manifests are intended to deploy a simple web server application. The file names and the use of Nginx further support this assumption.\n\nSteady states of my system:\n2 steady states are defined.\n1st steady states:\n- Name: example-pod-running\n- Description: The first issue to address is the Pod's restart policy set to 'Never'. This is a critical issue because if the Pod fails, it will not restart, leading to potential downtime. Therefore, the steady state should ensure that the Pod is running and available. A measurable output for this steady state is the number of running Pods, which should be 1, as there is only one Pod defined in the manifest. This steady state will help verify that the Pod is up and running, which is crucial given the restart policy configuration.\n- Threshold for the steady state: The pod should be running at least 90% of the time during the check period.; The steady state we are considering is whether the 'example-pod' is running. The current state shows that the pod was checked 5 times over a duration of 5 seconds, and it was running each time, resulting in a running count of 5. This indicates that the pod is consistently running during the check period. Given the constraints of the chaos engineering experiment, which must be completed within 1 minute, we can set a threshold that allows for some tolerance in case of brief fluctuations. A reasonable threshold would be that the pod should be running at least 90% of the time during the check period. This allows for a small margin of error while still ensuring that the pod is generally available and running.\n- Whether the steady state meets the threshold is determined by the following Python script with K8s API:\n```\nimport os\nimport time\nimport argparse\nfrom kubernetes import client, config\nfrom unittest_base import K8sAPIBase\n\nclass TestPodRunningState(K8sAPIBase):\n    def __init__(self):\n        super().__init__()\n\n    def check_pod_status(self, namespace, pod_name):\n        try:\n            pod = self.v1.read_namespaced_pod(name=pod_name, namespace=namespace)\n            return pod.status.phase == 'Running'\n        except client.exceptions.ApiException as e:\n            print(f\"Exception when calling CoreV1Api->read_namespaced_pod: {e}\")\n            return False\n\n    def test_pod_running_state(self, duration):\n        namespace = 'default'\n        pod_name = 'example-pod'\n        running_count = 0\n\n        # Check the pod status every second for the specified duration\n        for _ in range(duration):\n            if self.check_pod_status(namespace, pod_name):\n                running_count += 1\n            time.sleep(1)\n\n        # Calculate the running percentage\n        running_percentage = (running_count / duration) * 100\n\n        # Assert that the running percentage is at least 90%\n        assert running_percentage >= 90, f\"Pod '{pod_name}' running percentage is below threshold: {running_percentage}%\"\n\n        print(f\"Pod '{pod_name}' running status checked {duration} times. Running percentage: {running_percentage}%.\")\n\n\ndef main():\n    parser = argparse.ArgumentParser(description='Test if a pod is running at least 90% of the time.')\n    parser.add_argument('--duration', type=int, default=5, help='Duration to check the pod status in seconds.')\n    args = parser.parse_args()\n\n    test = TestPodRunningState()\n    test.test_pod_running_state(args.duration)\n\n\nif __name__ == '__main__':\n    main()\n```2nd steady states:\n- Name: example-service-availability\n- Description: The next issue to address is the 'Single Pod Deployment', which is related to the lack of redundancy. This is a significant issue because if the single Pod fails, the service will be unavailable. To verify this, we can define a steady state that checks the availability of the service itself. A measurable output for this steady state is the service's response time or availability. Since the service is exposed on port 80, we can check if the service is responding to HTTP requests. This steady state will help verify that the service is available and responsive, which is crucial given the single Pod deployment configuration.\n- Threshold for the steady state: Service availability should be at least 99.9% with a response status of 200.; The steady state we are considering is the availability of the 'example-service'. The k6 test results show that the service is currently responding with a 200 status code for all requests, indicating 100% availability. Given that the system consists of a single Pod, any failure in the Pod would result in the service being unavailable. Therefore, the threshold should ensure that the service remains available and responsive. To account for minor fluctuations and network latency, a reasonable threshold would be to maintain a high availability percentage, slightly below 100% to allow for brief, non-critical failures. A threshold of 99.9% availability is a common standard for web services, allowing for some tolerance while still ensuring high reliability.\n- Whether the steady state meets the threshold is determined by the following K6 Javascript:\n```\nimport http from 'k6/http';\nimport { check } from 'k6';\n\nexport const options = {\n  vus: 1,\n  duration: '5s',\n  thresholds: {\n    // Ensure that the service availability is at least 99.9%\n    'http_req_failed': ['rate<=0.001'], // 0.1% failure rate corresponds to 99.9% availability\n  },\n};\n\nexport default function () {\n  const res = http.get('http://example-service.default.svc.cluster.local:80');\n  check(res, {\n    'status is 200': (r) => r.status === 200,\n  });\n}\n\n```\n\nA fault scenario that may occur in my system and may affect the steady states:\n\nAn assumed fault scenario is as follows:\n- Event: Cyber Attack\n- Used Chaos Engineering tool: Chaos Mesh\n- Faults to simulate the event: [[{'name': 'PodChaos', 'name_id': 0, 'scope': {'pod': 'example-pod'}}], [{'name': 'NetworkChaos', 'name_id': 1, 'scope': {'service': 'example-service'}}]]\n- Description: Given the system's weaknesses, a cyber attack targeting the single Pod and its network could be highly impactful. The Pod's restart policy set to 'Never' means that if the Pod fails, it will not restart, leading to downtime. Additionally, the single Pod deployment means there is no redundancy, so any failure will make the service unavailable. To simulate a cyber attack, we can start by injecting a PodChaos fault to kill the Pod, testing the system's ability to handle Pod failures. This will directly exploit the lack of redundancy and the restart policy issue. Next, we can simulate a network attack using NetworkChaos to introduce network latency, testing the service's ability to maintain availability under network stress. This sequence simulates a cyber attack by first taking down the Pod and then stressing the network, revealing the system's vulnerabilities in handling such scenarios.\n\nPlease follow the instructions below regarding Chaos Engineering as necessary:\n- The Chaos-Engineering experiment must be completed within 1 minute.\n\nNow, please detail the parameters of the fault \"NetworkChaos({'service': 'example-service'})\".\nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {\"properties\": {\"foo\": {\"title\": \"Foo\", \"description\": \"a list of strings\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"foo\"]}\nthe object {\"foo\": [\"bar\", \"baz\"]} is a well-formatted instance of the schema. The object {\"properties\": {\"foo\": [\"bar\", \"baz\"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{\"properties\": {\"action\": {\"title\": \"Action\", \"description\": \"Indicates the specific fault type. Available types include: netem, delay (network delay), loss (packet loss), duplicate (packet duplicating), corrupt (packet corrupt), partition (network partition), and bandwidth (network bandwidth limit). After you specify action field, specify action-related fields for other necessary field configuration.\", \"example\": \"Partition\", \"enum\": [\"netem\", \"delay\", \"loss\", \"duplicate\", \"corrupt\", \"partition\", \"bandwidth\"], \"type\": \"string\"}, \"direction\": {\"title\": \"Direction\", \"description\": \"Indicates the direction of target packets. Available vaules include from (the packets from target), to (the packets to target), and both (the packets from or to target). This parameter makes Chaos only take effect for a specific direction of packets.\", \"default\": \"to\", \"example\": \"both\", \"enum\": [\"from\", \"to\", \"both\"], \"type\": \"string\"}, \"target\": {\"title\": \"Target\", \"description\": \"Used in combination with direction, making Chaos only effective for some packets. 'from' and 'both' direction cannot be used when targets is empty in netem action.\", \"allOf\": [{\"$ref\": \"#/definitions/Selector\"}]}, \"mode\": {\"title\": \"Mode\", \"description\": \"Specifies the mode of the experiment. The mode options include one (selecting a random Pod), all (selecting all eligible Pods), fixed (selecting a specified number of eligible Pods), fixed-percent (selecting a specified percentage of Pods from the eligible Pods), and random-max-percent (selecting the maximum percentage of Pods from the eligible Pods)\", \"example\": \"one\", \"enum\": [\"one\", \"all\", \"fixed\", \"fixed-percent\", \"random-max-percent\"], \"type\": \"string\"}, \"value\": {\"title\": \"Value\", \"description\": \"Provides parameters for the mode configuration, depending on mode. For example, when mode is set to fixed-percent, value specifies the percentage of Pods.\", \"example\": \"1\", \"type\": \"string\"}, \"selector\": {\"title\": \"Selector\", \"description\": \"Specifies the target Pod.\", \"allOf\": [{\"$ref\": \"#/definitions/Selectors\"}]}, \"externalTargets\": {\"title\": \"Externaltargets\", \"description\": \"Indicates the network targets except for Kubernetes, which can be IPv4 addresses or domains. This parameter only works with direction: to.\", \"example\": [\"1.1.1.1\", \"www.google.com\"], \"type\": \"array\", \"items\": {\"type\": \"string\"}}, \"device\": {\"title\": \"Device\", \"description\": \"Specifies the affected network interface\", \"example\": \"eth0\", \"type\": \"string\"}, \"delay\": {\"title\": \"Delay\", \"description\": \"When setting action to delay means simulating network delay fault, you also need to configure this parameters.\", \"allOf\": [{\"$ref\": \"#/definitions/Deplay\"}]}, \"loss\": {\"title\": \"Loss\", \"description\": \"When setting action to loss means simulating packet loss fault, you can also configure this parameters.\", \"allOf\": [{\"$ref\": \"#/definitions/Loss\"}]}, \"duplicated\": {\"title\": \"Duplicated\", \"description\": \"When setting action to duplicate, meaning simulating package duplication, you can also set this parameters.\", \"allOf\": [{\"$ref\": \"#/definitions/Duplicate\"}]}, \"corrupt\": {\"title\": \"Corrupt\", \"description\": \"When setting action to corrupt means simulating package corruption fault, you can also configure the following parameters.\", \"allOf\": [{\"$ref\": \"#/definitions/Corrupt\"}]}, \"rate\": {\"title\": \"Rate\", \"description\": \"When setting action to rate means simulating bandwidth rate fault, you also need to configure this parameters. This action is similar to bandwidth/rate below, however, the key distinction is that this action can combine with other netem actions listed above. However, if you require more control over the bandwidth simulation such as limiting the buffer size, select the bandwidth action.\", \"allOf\": [{\"$ref\": \"#/definitions/Rate\"}]}, \"bandwidth\": {\"title\": \"Bandwidth\", \"description\": \"When setting 'action' to 'bandwidth' means simulating bandwidth limit fault, you also need to configure this parameters. This action is mutually exclusive with any netem action defined above. If you need to inject bandwidth rate along with other network failures such as corruption, use the rate action instead.\", \"allOf\": [{\"$ref\": \"#/definitions/Bandwidth\"}]}}, \"required\": [\"action\", \"mode\", \"selector\"], \"definitions\": {\"SetBasedRequirements\": {\"title\": \"SetBasedRequirements\", \"type\": \"object\", \"properties\": {\"key\": {\"title\": \"Key\", \"description\": \"Label key\", \"type\": \"string\"}, \"operator\": {\"title\": \"Operator\", \"description\": \"Select an operator.\", \"enum\": [\"In\", \"NotIn\", \"Exists\", \"DoesNotExist\"], \"type\": \"string\"}, \"values\": {\"title\": \"Values\", \"description\": \"Label values. The values set must be non-empty in the case of In and NotIn.\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"key\", \"operator\", \"values\"]}, \"Selectors\": {\"title\": \"Selectors\", \"type\": \"object\", \"properties\": {\"namespaces\": {\"title\": \"Namespaces\", \"description\": \"Specifies the namespace of the experiment's target Pod. If this selector is None, Chaos Mesh will set it to the namespace of the current Chaos experiment.\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}, \"labelSelectors\": {\"title\": \"Labelselectors\", \"description\": \"Specifies the label-key/value pairs that the experiment's target Pod must have. If multiple labels are specified, the experiment target must have all the labels specified by this selector.\", \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"expressionSelectors\": {\"title\": \"Expressionselectors\", \"description\": \"Specifies a set of expressions that define the label's rules to specifiy the experiment's target Pod.\", \"example\": [{\"key\": \"tier\", \"operator\": \"In\", \"values\": [\"cache\"]}, {\"key\": \"environment\", \"operator\": \"NotIn\", \"values\": [\"dev\"]}], \"type\": \"array\", \"items\": {\"$ref\": \"#/definitions/SetBasedRequirements\"}}, \"annotationSelectors\": {\"title\": \"Annotationselectors\", \"description\": \"Specifies the annotation-key/value pairs that the experiment's target Pod must have. If multiple annotations are specified, the experiment target must have all annotations specified by this selector.\", \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"fieldSelectors\": {\"title\": \"Fieldselectors\", \"description\": \"Specifies the field-key/value pairs of the experiment's target Pod. If multiple fields are specified, the experiment target must have all fields set by this selector.\", \"example\": {\"metadata.name\": \"my-pod\", \"metadata.namespace\": \"dafault\"}, \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"podPhaseSelectors\": {\"title\": \"Podphaseselectors\", \"description\": \"Specifies the phase of the experiment's target Pod. If this selector is None, the target Pod's phase is not limited.\", \"type\": \"array\", \"items\": {\"enum\": [\"Pending\", \"Running\", \"Succeeded\", \"Failed\", \"Unknown\"], \"type\": \"string\"}}, \"nodeSelectors\": {\"title\": \"Nodeselectors\", \"description\": \"Specifies the node-label-key/value pairs to which the experiment's target Pod belongs.\", \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"nodes\": {\"title\": \"Nodes\", \"description\": \"Specifies the node to which the experiment's target Pod belongs. The target Pod can only belong to one node in the configured node list. If multiple node labels are specified, the node to which the experiment's target Pod belongs must have all labels specified by this selector.\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}, \"pods\": {\"title\": \"Pods\", \"description\": \"Specifies the namespaces and list of the experiment's target Pods. If you have specified this selector, Chaos Mesh ignores other configured selectors.\", \"example\": {\"default\": [\"pod-0\", \"pod-2\"]}, \"type\": \"object\", \"additionalProperties\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}}, \"Selector\": {\"title\": \"Selector\", \"type\": \"object\", \"properties\": {\"mode\": {\"title\": \"Mode\", \"description\": \"Specifies the mode of the experiment. The mode options include one (selecting a random Pod), all (selecting all eligible Pods), fixed (selecting a specified number of eligible Pods), fixed-percent (selecting a specified percentage of Pods from the eligible Pods), and random-max-percent (selecting the maximum percentage of Pods from the eligible Pods)\", \"example\": \"one\", \"enum\": [\"one\", \"all\", \"fixed\", \"fixed-percent\", \"random-max-percent\"], \"type\": \"string\"}, \"selector\": {\"title\": \"Selector\", \"description\": \"Specifies the target Pod.\", \"example\": null, \"allOf\": [{\"$ref\": \"#/definitions/Selectors\"}]}}, \"required\": [\"mode\", \"selector\"]}, \"Reorder\": {\"title\": \"Reorder\", \"type\": \"object\", \"properties\": {\"reorder\": {\"title\": \"Reorder\", \"description\": \"Indicates the probability to reorder\", \"default\": \"0\", \"example\": \"0.5\", \"type\": \"string\"}, \"correlation\": {\"title\": \"Correlation\", \"description\": \"Indicates the correlation between this time's length of delay time and the previous time's length of delay time. Range of value: [0, 100]\", \"default\": \"0\", \"example\": \"50\", \"type\": \"string\"}, \"gap\": {\"title\": \"Gap\", \"description\": \"Indicates the gap before and after packet reordering\", \"default\": 0, \"example\": 5, \"type\": \"integer\"}}}, \"Deplay\": {\"title\": \"Deplay\", \"type\": \"object\", \"properties\": {\"latency\": {\"title\": \"Latency\", \"description\": \"Indicates the network latency\", \"example\": \"2ms\", \"type\": \"string\"}, \"correlation\": {\"title\": \"Correlation\", \"description\": \"Indicates the correlation between the current latency and the previous one. Range of value: [0, 100]. Specify only the number. NEVER include any units.\", \"example\": \"50\", \"type\": \"string\"}, \"jitter\": {\"title\": \"Jitter\", \"description\": \"Indicates the range of the network latency\", \"example\": \"1ms\", \"type\": \"string\"}, \"reorder\": {\"title\": \"Reorder\", \"description\": \"Indicates the status of network packet reordering\", \"allOf\": [{\"$ref\": \"#/definitions/Reorder\"}]}}}, \"Loss\": {\"title\": \"Loss\", \"type\": \"object\", \"properties\": {\"loss\": {\"title\": \"Loss\", \"description\": \"Indicates the probability of packet loss. Range of value: [0, 100]. Specify only the number. NEVER include any units.\", \"default\": \"0\", \"example\": \"50\", \"type\": \"string\"}, \"correlation\": {\"title\": \"Correlation\", \"description\": \"Indicates the correlation between the probability of current packet loss and the previous time's packet loss. Range of value: [0, 100]. Specify only the number. NEVER include any units.\", \"default\": \"0\", \"example\": \"50\", \"type\": \"string\"}}}, \"Duplicate\": {\"title\": \"Duplicate\", \"type\": \"object\", \"properties\": {\"duplicate\": {\"title\": \"Duplicate\", \"description\": \"Indicates the probability of packet duplicating. Range of value: [0, 100]. Specify only the number. NEVER include any units.\", \"default\": \"0\", \"example\": \"50\", \"type\": \"string\"}, \"correlation\": {\"title\": \"Correlation\", \"description\": \"Indicates the correlation between the probability of current packet duplicating and the previous time's packet duplicating. Range of value: [0, 100]. Specify only the number. NEVER include any units.\", \"default\": \"0\", \"example\": \"50\", \"type\": \"string\"}}}, \"Corrupt\": {\"title\": \"Corrupt\", \"type\": \"object\", \"properties\": {\"corrupt\": {\"title\": \"Corrupt\", \"description\": \"Indicates the probability of packet corruption. Range of value: [0, 100]. Specify only the number. NEVER include any units.\", \"default\": \"0\", \"example\": \"50\", \"type\": \"string\"}, \"correlation\": {\"title\": \"Correlation\", \"description\": \"Indicates the correlation between the probability of current packet corruption and the previous time's packet corruption. Range of value: [0, 100]. Specify only the number. NEVER include any units.\", \"default\": \"0\", \"example\": \"50\", \"type\": \"string\"}}}, \"Rate\": {\"title\": \"Rate\", \"type\": \"object\", \"properties\": {\"rate\": {\"title\": \"Rate\", \"description\": \"Indicates the rate of bandwidth limit. Allows bit, kbit, mbit, gbit, tbit, bps, kbps, mbps, gbps, tbps unit. bps means bytes per second\", \"example\": \"1mbps\", \"type\": \"string\"}}}, \"Bandwidth\": {\"title\": \"Bandwidth\", \"type\": \"object\", \"properties\": {\"rate\": {\"title\": \"Rate\", \"description\": \"Indicates the rate of bandwidth limit. Allows bit, kbit, mbit, gbit, tbit, bps, kbps, mbps, gbps, tbps unit. bps means bytes per second\", \"example\": \"1mbps\", \"type\": \"string\"}, \"limit\": {\"title\": \"Limit\", \"description\": \"Indicates the number of bytes waiting in queue\", \"example\": 1, \"type\": \"integer\"}, \"buffer\": {\"title\": \"Buffer\", \"description\": \"Indicates the maximum number of bytes that can be sent instantaneously\", \"example\": 1, \"type\": \"integer\"}, \"peakrate\": {\"title\": \"Peakrate\", \"description\": \"Indicates the maximum consumption of bucket (usually not set)\", \"example\": 1, \"type\": \"integer\"}, \"minburst\": {\"title\": \"Minburst\", \"description\": \"Indicates the size of peakrate bucket (usually not set)\", \"example\": 1, \"type\": \"integer\"}}}}}\n```\nAI: ```json\n{\"action\":"
            ],
            "{\"action\": \"delay\", \"direction\": \"to\", \"target\": {\"mode\": \"all\", \"selector\": {\"namespaces\": [\"default\"], \"labelSelectors\": {\"app\": \"example\"}}}, \"mode\": \"all\", \"value\": \"\", \"selector\": {\"namespaces\": [\"default\"], \"labelSelectors\": {\"app\": \"example\"}}, \"device\": \"eth0\", \"delay\": {\"latency\": \"100ms\", \"jitter\": \"10ms\", \"correlation\": \"50\"}}\n"
        ]
    }
]