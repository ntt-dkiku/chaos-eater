{
    "steady_states": {
        "elems": [
            {
                "id": 0,
                "name": "PodRunningStatusNginxPodYaml",
                "description": "The first issue to address is the Pod's restart policy set to 'Never'. This is a critical issue because if the Pod fails, it will not restart automatically, leading to potential downtime. Therefore, the steady state should verify that the Pod is running and not in a failed state. This can be measured by checking the Pod's status to ensure it is 'Running'. This steady state is specific to the 'nginx/pod.yaml' manifest, which defines the Pod with the problematic restart policy.",
                "inspection": {
                    "tool_type": "k8s",
                    "duration": "5s",
                    "script": {
                        "path": "sandbox/cycle_20241124_123316/hypothesis/k8s_PodRunningStatusNginxPodYaml.py",
                        "content": "import os\nimport time\nfrom kubernetes import client, config\n\ndef check_pod_status(namespace, pod_name, duration):\n    # Load Kubernetes configuration based on the environment\n    if os.getenv('KUBERNETES_SERVICE_HOST'):\n        config.load_incluster_config()\n    else:\n        config.load_kube_config()\n\n    v1 = client.CoreV1Api()\n    running_count = 0\n    for _ in range(duration):\n        try:\n            pod = v1.read_namespaced_pod(name=pod_name, namespace=namespace)\n            if pod.status.phase == 'Running':\n                running_count += 1\n            print(f\"Pod status: {pod.status.phase}\")\n        except client.exceptions.ApiException as e:\n            print(f\"Exception when calling CoreV1Api->read_namespaced_pod: {e}\")\n        time.sleep(1)\n    print(f\"Pod was running {running_count} out of {duration} seconds.\")\n\nif __name__ == \"__main__\":\n    import argparse\n    parser = argparse.ArgumentParser(description='Check the status of a Kubernetes Pod.')\n    parser.add_argument('--duration', type=int, default=5, help='Duration to check the Pod status in seconds.')\n    args = parser.parse_args()\n    check_pod_status(namespace='default', pod_name='example-pod', duration=args.duration)\n",
                        "work_dir": "sandbox/cycle_20241124_123316/hypothesis",
                        "fname": "k8s_PodRunningStatusNginxPodYaml.py"
                    },
                    "result": "Pod status: Running\nPod status: Running\nPod status: Running\nPod status: Running\nPod status: Running\nPod was running 5 out of 5 seconds.\n"
                },
                "threshold": {
                    "threshold": "The Pod should be in the 'Running' state for at least 90% of the time during the observation period.",
                    "reason": "The steady state we are considering is the Pod's running status. The current state shows that the Pod was running for 5 out of 5 seconds, which is 100% of the time. Given that the Pod's restart policy is set to 'Never', it is crucial to ensure that the Pod remains in the 'Running' state to avoid downtime. However, to account for minor fluctuations or delays in status updates, a reasonable threshold would be to expect the Pod to be in the 'Running' state for at least 90% of the time during the observation period. This allows for some tolerance while still ensuring that the Pod is generally stable and operational."
                },
                "unittest": {
                    "path": "sandbox/cycle_20241124_123316/hypothesis/unittest_PodRunningStatusNginxPodYaml_mod0.py",
                    "content": "import os\nimport time\nimport argparse\nfrom kubernetes import client, config\nfrom unittest_base import K8sAPIBase\n\nclass TestPodRunningStatus(K8sAPIBase):\n    def __init__(self, namespace, pod_name, duration):\n        super().__init__()\n        self.namespace = namespace\n        self.pod_name = pod_name\n        self.duration = duration\n\n    def test_pod_running_status(self):\n        running_count = 0\n        # Loop for the specified duration\n        for _ in range(self.duration):\n            try:\n                # Read the Pod status\n                pod = self.v1.read_namespaced_pod(name=self.pod_name, namespace=self.namespace)\n                # Check if the Pod is in 'Running' state\n                if pod.status.phase == 'Running':\n                    running_count += 1\n                print(f\"Pod status: {pod.status.phase}\")\n            except client.exceptions.ApiException as e:\n                print(f\"Exception when calling CoreV1Api->read_namespaced_pod: {e}\")\n            time.sleep(1)\n        # Calculate the percentage of time the Pod was running\n        running_percentage = (running_count / self.duration) * 100\n        print(f\"Pod was running {running_count} out of {self.duration} seconds, which is {running_percentage}% of the time.\")\n        # Assert that the Pod was running at least 90% of the time\n        assert running_percentage >= 90, \"Pod did not meet the 90% running threshold.\"\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Test the running status of a Kubernetes Pod.')\n    parser.add_argument('--duration', type=int, default=5, help='Duration to check the Pod status in seconds.')\n    args = parser.parse_args()\n    # Create an instance of the test class\n    test = TestPodRunningStatus(namespace='default', pod_name='example-pod', duration=args.duration)\n    # Run the test\n    test.test_pod_running_status()",
                    "work_dir": "sandbox/cycle_20241124_123316/hypothesis",
                    "fname": "unittest_PodRunningStatusNginxPodYaml_mod0.py"
                }
            },
            {
                "id": 1,
                "name": "ServiceAvailabilityNginxServiceYaml",
                "description": "The next issue to address is the lack of redundancy due to the use of a single Pod without a controller like Deployment or ReplicaSet. This can lead to a lack of automatic recovery if the Pod is deleted or fails. To verify the system's resilience, we should define a steady state that measures the availability of the web service provided by the Pod. Since the Service is responsible for exposing the Pod, we can measure the HTTP response rate or availability of the service. This steady state will ensure that the Service is consistently able to route traffic to the Pod, even if the Pod encounters issues. This is specific to the 'nginx/service.yaml' manifest, which defines the Service that selects the Pod.",
                "inspection": {
                    "tool_type": "k6",
                    "duration": "5s",
                    "script": {
                        "path": "sandbox/cycle_20241124_123316/hypothesis/k6_ServiceAvailabilityNginxServiceYaml.js",
                        "content": "import http from 'k6/http';\nimport { check } from 'k6';\n\nexport let options = {\n  vus: 10,\n  duration: '5s',\n};\n\nexport default function () {\n  let res = http.get('http://example-service.default.svc.cluster.local:80');\n  check(res, {\n    'status is 200': (r) => r.status === 200,\n  });\n}\n",
                        "work_dir": "sandbox/cycle_20241124_123316/hypothesis",
                        "fname": "k6_ServiceAvailabilityNginxServiceYaml.js"
                    },
                    "result": "\n     \u2713 status is 200\n\n     checks.........................: 100.00% 81085 out of 81085\n     data_received..................: 69 MB   14 MB/s\n     data_sent......................: 8.9 MB  1.8 MB/s\n     http_req_blocked...............: avg=8.67\u00b5s   min=1.2\u00b5s    med=3.49\u00b5s   max=5.03ms p(90)=6.25\u00b5s   p(95)=8.97\u00b5s  \n     http_req_connecting............: avg=1.88\u00b5s   min=0s       med=0s       max=1.87ms p(90)=0s       p(95)=0s      \n     http_req_duration..............: avg=488.76\u00b5s min=96.52\u00b5s  med=440.97\u00b5s max=3.55ms p(90)=613.12\u00b5s p(95)=721.86\u00b5s\n       { expected_response:true }...: avg=488.76\u00b5s min=96.52\u00b5s  med=440.97\u00b5s max=3.55ms p(90)=613.12\u00b5s p(95)=721.86\u00b5s\n     http_req_failed................: 0.00%   0 out of 81085\n     http_req_receiving.............: avg=56.19\u00b5s  min=10.68\u00b5s  med=38.86\u00b5s  max=2.84ms p(90)=73.85\u00b5s  p(95)=118.46\u00b5s\n     http_req_sending...............: avg=16.21\u00b5s  min=3.57\u00b5s   med=10.5\u00b5s   max=3.34ms p(90)=18.08\u00b5s  p(95)=27.58\u00b5s \n     http_req_tls_handshaking.......: avg=0s       min=0s       med=0s       max=0s     p(90)=0s       p(95)=0s      \n     http_req_waiting...............: avg=416.35\u00b5s min=60.66\u00b5s  med=387.02\u00b5s max=3.32ms p(90)=541.04\u00b5s p(95)=618.56\u00b5s\n     http_reqs......................: 81085   16210.604071/s\n     iteration_duration.............: avg=601.02\u00b5s min=155.09\u00b5s med=526.53\u00b5s max=6.99ms p(90)=741.71\u00b5s p(95)=1.14ms  \n     iterations.....................: 81085   16210.604071/s\n     vus............................: 10      min=10             max=10\n     vus_max........................: 10      min=10             max=10\n\n"
                },
                "threshold": {
                    "threshold": "HTTP response rate should be >= 99.5% with status code 200.",
                    "reason": "The steady state we are considering is the availability of the web service provided by the Nginx Pod, as measured by the HTTP response rate. The k6 test results show that 100% of the requests received a 200 status code, indicating that the service is fully available. To account for potential fluctuations and ensure the threshold is reasonable, we should allow for a small margin of error. A typical approach is to set the threshold slightly below 100% to accommodate minor network issues or transient errors that might occur in a real-world scenario. Given the current state shows perfect availability, a threshold of 99.5% would be reasonable, allowing for some tolerance while still ensuring high availability."
                },
                "unittest": {
                    "path": "sandbox/cycle_20241124_123316/hypothesis/unittest_ServiceAvailabilityNginxServiceYaml_mod0.js",
                    "content": "import http from 'k6/http';\nimport { check } from 'k6';\n\nexport let options = {\n  vus: 10,\n  duration: '5s',\n  thresholds: {\n    'http_req_failed': ['rate<0.005'], // Allowing for a 0.5% failure rate\n    'http_req_duration': ['p(95)<200'], // Optional: 95% of requests should be below 200ms\n  },\n};\n\nexport default function () {\n  let res = http.get('http://example-service.default.svc.cluster.local:80');\n  check(res, {\n    'status is 200': (r) => r.status === 200,\n  });\n}",
                    "work_dir": "sandbox/cycle_20241124_123316/hypothesis",
                    "fname": "unittest_ServiceAvailabilityNginxServiceYaml_mod0.js"
                }
            }
        ]
    },
    "fault": {
        "event": "Cyber Attack",
        "faults": [
            [
                {
                    "name": "PodChaos",
                    "name_id": 0,
                    "params": {
                        "action": "pod-kill",
                        "mode": "one",
                        "selector": {
                            "namespaces": [
                                "default"
                            ],
                            "labelSelectors": {
                                "app": "example"
                            }
                        }
                    }
                }
            ],
            [
                {
                    "name": "NetworkChaos",
                    "name_id": 1,
                    "params": {
                        "action": "partition",
                        "mode": "one",
                        "selector": {
                            "namespaces": [
                                "default"
                            ],
                            "labelSelectors": {
                                "app": "example"
                            }
                        },
                        "direction": "both"
                    }
                }
            ]
        ],
        "description": "In a cyber attack scenario, the attacker might target the single point of failure in the system, which is the single Pod running the Nginx server. The Pod's restart policy is set to 'Never', meaning if it fails, it won't restart automatically, leading to downtime. Additionally, the lack of redundancy due to the single Pod deployment without a controller like Deployment or ReplicaSet makes the system vulnerable to attacks that can take down the Pod. To simulate this, we can inject a PodChaos fault to kill the Pod, testing the system's ability to maintain the steady state of service availability. This will directly test the system's weakness in handling Pod failures and its impact on the steady state of service availability. Following this, we can simulate a network partition using NetworkChaos to test if the service can still route traffic effectively, even if the Pod is isolated from the network. This sequence simulates a cyber attack where the attacker first takes down the Pod and then attempts to disrupt network communication."
    }
}