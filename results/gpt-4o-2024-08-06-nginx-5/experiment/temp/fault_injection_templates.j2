# unit tests
- name: fault-unittest-example-pod-running
  templateType: Task
  deadline: 5m20s
  task:
    container:
      name: fault-unittest-example-pod-running-container
      image: chaos-eater/k8sapi:1.0
      imagePullPolicy: IfNotPresent
      command: ["/bin/bash", "-c"]
      args: ["python /chaos-eater/sandbox/cycle_20241124_133152/unittest_example-pod-running_mod0.py --duration 20"]
      volumeMounts:
        - name: pvc-volume
          mountPath: /chaos-eater
    volumes:
      - name: pvc-volume
        persistentVolumeClaim:
          claimName: pvc

- name: fault-unittest-example-service-http-response-200
  templateType: Task
  deadline: 5m20s
  task:
    container:
      name: fault-unittest-example-service-http-response-200-container
      image: grafana/k6:latest
      command: ["k6", "run", "--duration", "20s", "--quiet", "/chaos-eater/sandbox/cycle_20241124_133152/unittest_example-service-http-response-200_mod0.js"]    
      volumeMounts:
        - name: pvc-volume
          mountPath: /chaos-eater
    volumes:
      - name: pvc-volume
        persistentVolumeClaim:
          claimName: pvc

# fault_injections
- name: fault-podchaos
  templateType: PodChaos
  deadline: 20s
  podChaos:
    action: pod-kill
    mode: one
    selector:
      labelSelectors:
        app: example
      namespaces:
        - default
    value: '1'


- name: fault-networkchaos
  templateType: NetworkChaos
  deadline: 20s
  networkChaos:
    action: delay
    delay:
      correlation: '50'
      jitter: 10ms
      latency: 100ms
    device: eth0
    direction: to
    mode: all
    selector:
      labelSelectors:
        app: example
      namespaces:
        - default
    target:
      mode: all
      selector:
        labelSelectors:
          app: example
        namespaces:
          - default
