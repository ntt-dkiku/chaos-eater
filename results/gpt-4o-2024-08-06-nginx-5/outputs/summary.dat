The Chaos Engineering cycle involves a detailed process to test the resilience of a Kubernetes-based system, specifically focusing on a web server application using NGINX. The cycle begins with understanding the user inputs, which include Kubernetes manifests for a Pod and a Service. The Pod manifest defines a single Pod with a 'Never' restart policy, which poses a risk of downtime if the Pod fails. The Service manifest exposes the Pod on port 80, but relies on the Pod's availability to function correctly.

The identified resiliency issues include the Pod's restart policy and the lack of redundancy due to a single Pod deployment. The hypothesis for the experiment is that the system should maintain its steady states even when faults are injected. Two steady states are defined: the Pod should be running at least 80% of the time, and the Service should respond with HTTP status code 200 for at least 95% of requests.

The experiment is structured into three phases: pre-validation, fault-injection, and post-validation, all within a 1-minute timeframe. The pre-validation phase checks the system's steady states before fault injection. The fault-injection phase simulates a cyber attack using Chaos Mesh, introducing PodChaos to kill the Pod and NetworkChaos to delay network traffic. The post-validation phase verifies if the system returns to its steady states after the faults are removed.

The first experiment attempt revealed critical issues: the Pod did not restart after being killed, and the Service failed to handle requests due to the Pod's unavailability. These failures highlighted the need for redundancy and automatic recovery mechanisms. The recommendation was to replace the standalone Pod with a Deployment, providing multiple replicas for redundancy and automatic recovery.

After implementing the recommended changes, the second experiment attempt was successful, with all unit tests passing. The Deployment ensured that the system maintained its steady states even during fault injection, demonstrating improved resilience. This cycle underscores the importance of using Kubernetes best practices, such as Deployments, to enhance system reliability and fault tolerance.